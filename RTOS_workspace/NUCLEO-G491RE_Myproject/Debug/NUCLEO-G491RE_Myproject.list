
NUCLEO-G491RE_Myproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f10  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080090f0  080090f0  000190f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800928c  0800928c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800928c  0800928c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800928c  0800928c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800928c  0800928c  0001928c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009290  08009290  00019290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001450c  20000080  08009314  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001458c  08009314  0002458c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a112  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ad  00000000  00000000  0003a1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  0003db70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  0003f2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021df4  00000000  00000000  000408a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0d1  00000000  00000000  0006269c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8ff9  00000000  00000000  0007c76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155766  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006674  00000000  00000000  001557b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	080090d8 	.word	0x080090d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	080090d8 	.word	0x080090d8

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	20012fa4 	.word	0x20012fa4
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000366:	f000 fc40 	bl	8000bea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036a:	f000 f879 	bl	8000460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036e:	f000 f961 	bl	8000634 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000372:	f000 f905 	bl	8000580 <MX_TIM1_Init>
  MX_DAC1_Init();
 8000376:	f000 f8bf 	bl	80004f8 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 800037a:	2000      	movs	r0, #0
 800037c:	f000 fc8e 	bl	8000c9c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
	HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000380:	2000      	movs	r0, #0
 8000382:	f000 fc9f 	bl	8000cc4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
	HAL_SYSCFG_EnableVREFBUF();
 8000386:	f000 fcb1 	bl	8000cec <HAL_SYSCFG_EnableVREFBUF>

  __HAL_DAC_ENABLE(&hdac1, DAC_CHANNEL_1);
 800038a:	4b2b      	ldr	r3, [pc, #172]	; (8000438 <main+0xd8>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4b29      	ldr	r3, [pc, #164]	; (8000438 <main+0xd8>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f042 0201 	orr.w	r2, r2, #1
 8000398:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(&hdac1, DAC_CHANNEL_2);
 800039a:	4b27      	ldr	r3, [pc, #156]	; (8000438 <main+0xd8>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	4b25      	ldr	r3, [pc, #148]	; (8000438 <main+0xd8>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80003a8:	601a      	str	r2, [r3, #0]

  //Enable cycle counting
  DWT_CTRL |= (1<<0);
 80003aa:	4b24      	ldr	r3, [pc, #144]	; (800043c <main+0xdc>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a23      	ldr	r2, [pc, #140]	; (800043c <main+0xdc>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6013      	str	r3, [r2, #0]


  HAL_TIM_Encoder_Start_IT(&htim1,htim1.Channel);
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <main+0xe0>)
 80003b8:	7f1b      	ldrb	r3, [r3, #28]
 80003ba:	4619      	mov	r1, r3
 80003bc:	4820      	ldr	r0, [pc, #128]	; (8000440 <main+0xe0>)
 80003be:	f002 f96f 	bl	80026a0 <HAL_TIM_Encoder_Start_IT>

  SEGGER_UART_init(500000);
 80003c2:	4820      	ldr	r0, [pc, #128]	; (8000444 <main+0xe4>)
 80003c4:	f005 ff5c 	bl	8006280 <SEGGER_UART_init>
  SEGGER_SYSVIEW_Conf();
 80003c8:	f005 fd84 	bl	8005ed4 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 80003cc:	f107 0308 	add.w	r3, r7, #8
 80003d0:	9301      	str	r3, [sp, #4]
 80003d2:	2302      	movs	r3, #2
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <main+0xe8>)
 80003d8:	22c8      	movs	r2, #200	; 0xc8
 80003da:	491c      	ldr	r1, [pc, #112]	; (800044c <main+0xec>)
 80003dc:	481c      	ldr	r0, [pc, #112]	; (8000450 <main+0xf0>)
 80003de:	f003 fd5f 	bl	8003ea0 <xTaskCreate>
 80003e2:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d00a      	beq.n	8000400 <main+0xa0>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80003ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003ee:	f383 8811 	msr	BASEPRI, r3
 80003f2:	f3bf 8f6f 	isb	sy
 80003f6:	f3bf 8f4f 	dsb	sy
 80003fa:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80003fc:	bf00      	nop
 80003fe:	e7fe      	b.n	80003fe <main+0x9e>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 3, &task2_handle);
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	9301      	str	r3, [sp, #4]
 8000404:	2303      	movs	r3, #3
 8000406:	9300      	str	r3, [sp, #0]
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <main+0xf4>)
 800040a:	22c8      	movs	r2, #200	; 0xc8
 800040c:	4912      	ldr	r1, [pc, #72]	; (8000458 <main+0xf8>)
 800040e:	4813      	ldr	r0, [pc, #76]	; (800045c <main+0xfc>)
 8000410:	f003 fd46 	bl	8003ea0 <xTaskCreate>
 8000414:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d00a      	beq.n	8000432 <main+0xd2>
        __asm volatile
 800041c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000420:	f383 8811 	msr	BASEPRI, r3
 8000424:	f3bf 8f6f 	isb	sy
 8000428:	f3bf 8f4f 	dsb	sy
 800042c:	60fb      	str	r3, [r7, #12]
    }
 800042e:	bf00      	nop
 8000430:	e7fe      	b.n	8000430 <main+0xd0>

  //start freeRTOS scheduler
  vTaskStartScheduler();
 8000432:	f003 fed1 	bl	80041d8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000436:	e7fe      	b.n	8000436 <main+0xd6>
 8000438:	2000009c 	.word	0x2000009c
 800043c:	e0001000 	.word	0xe0001000
 8000440:	200000b0 	.word	0x200000b0
 8000444:	0007a120 	.word	0x0007a120
 8000448:	080090f0 	.word	0x080090f0
 800044c:	08009108 	.word	0x08009108
 8000450:	08000709 	.word	0x08000709
 8000454:	08009110 	.word	0x08009110
 8000458:	08009128 	.word	0x08009128
 800045c:	0800079d 	.word	0x0800079d

08000460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b094      	sub	sp, #80	; 0x50
 8000464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	f107 0318 	add.w	r3, r7, #24
 800046a:	2238      	movs	r2, #56	; 0x38
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f008 f9a8 	bl	80087c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
 8000480:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000482:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000486:	f001 f98f 	bl	80017a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048a:	2302      	movs	r3, #2
 800048c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000492:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000494:	2340      	movs	r3, #64	; 0x40
 8000496:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000498:	2302      	movs	r3, #2
 800049a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800049c:	2302      	movs	r3, #2
 800049e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80004a0:	2302      	movs	r3, #2
 80004a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 80004a4:	2319      	movs	r3, #25
 80004a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004a8:	2302      	movs	r3, #2
 80004aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004ac:	2302      	movs	r3, #2
 80004ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004b0:	2302      	movs	r3, #2
 80004b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b4:	f107 0318 	add.w	r3, r7, #24
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 fa29 	bl	8001910 <HAL_RCC_OscConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80004c4:	f000 f9ae 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c8:	230f      	movs	r3, #15
 80004ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004cc:	2303      	movs	r3, #3
 80004ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2102      	movs	r1, #2
 80004e0:	4618      	mov	r0, r3
 80004e2:	f001 fd2d 	bl	8001f40 <HAL_RCC_ClockConfig>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004ec:	f000 f99a 	bl	8000824 <Error_Handler>
  }
}
 80004f0:	bf00      	nop
 80004f2:	3750      	adds	r7, #80	; 0x50
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08c      	sub	sp, #48	; 0x30
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80004fe:	463b      	mov	r3, r7
 8000500:	2230      	movs	r2, #48	; 0x30
 8000502:	2100      	movs	r1, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f008 f95d 	bl	80087c4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800050a:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_DAC1_Init+0x80>)
 800050c:	4a1b      	ldr	r2, [pc, #108]	; (800057c <MX_DAC1_Init+0x84>)
 800050e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000510:	4819      	ldr	r0, [pc, #100]	; (8000578 <MX_DAC1_Init+0x80>)
 8000512:	f000 fcef 	bl	8000ef4 <HAL_DAC_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800051c:	f000 f982 	bl	8000824 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000520:	2302      	movs	r3, #2
 8000522:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000524:	2300      	movs	r3, #0
 8000526:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000528:	2300      	movs	r3, #0
 800052a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000534:	2300      	movs	r3, #0
 8000536:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800053c:	2301      	movs	r3, #1
 800053e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000540:	2300      	movs	r3, #0
 8000542:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	4619      	mov	r1, r3
 800054a:	480b      	ldr	r0, [pc, #44]	; (8000578 <MX_DAC1_Init+0x80>)
 800054c:	f000 fdd4 	bl	80010f8 <HAL_DAC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000556:	f000 f965 	bl	8000824 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	2210      	movs	r2, #16
 800055e:	4619      	mov	r1, r3
 8000560:	4805      	ldr	r0, [pc, #20]	; (8000578 <MX_DAC1_Init+0x80>)
 8000562:	f000 fdc9 	bl	80010f8 <HAL_DAC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800056c:	f000 f95a 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	3730      	adds	r7, #48	; 0x30
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000009c 	.word	0x2000009c
 800057c:	50000800 	.word	0x50000800

08000580 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08c      	sub	sp, #48	; 0x30
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	2224      	movs	r2, #36	; 0x24
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f008 f918 	bl	80087c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <MX_TIM1_Init+0xac>)
 80005a0:	4a23      	ldr	r2, [pc, #140]	; (8000630 <MX_TIM1_Init+0xb0>)
 80005a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005a4:	4b21      	ldr	r3, [pc, #132]	; (800062c <MX_TIM1_Init+0xac>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005aa:	4b20      	ldr	r3, [pc, #128]	; (800062c <MX_TIM1_Init+0xac>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <MX_TIM1_Init+0xac>)
 80005b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_TIM1_Init+0xac>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005be:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_TIM1_Init+0xac>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_TIM1_Init+0xac>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005ca:	2301      	movs	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005d2:	2301      	movs	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005de:	2300      	movs	r3, #0
 80005e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005e2:	2301      	movs	r3, #1
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	4619      	mov	r1, r3
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <MX_TIM1_Init+0xac>)
 80005f6:	f001 ffad 	bl	8002554 <HAL_TIM_Encoder_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000600:	f000 f910 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000604:	2300      	movs	r3, #0
 8000606:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_TIM1_Init+0xac>)
 8000616:	f002 fb5d 	bl	8002cd4 <HAL_TIMEx_MasterConfigSynchronization>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000620:	f000 f900 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3730      	adds	r7, #48	; 0x30
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000b0 	.word	0x200000b0
 8000630:	40012c00 	.word	0x40012c00

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <MX_GPIO_Init+0xcc>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <MX_GPIO_Init+0xcc>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <MX_GPIO_Init+0xcc>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000662:	4b27      	ldr	r3, [pc, #156]	; (8000700 <MX_GPIO_Init+0xcc>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a26      	ldr	r2, [pc, #152]	; (8000700 <MX_GPIO_Init+0xcc>)
 8000668:	f043 0320 	orr.w	r3, r3, #32
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b24      	ldr	r3, [pc, #144]	; (8000700 <MX_GPIO_Init+0xcc>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f003 0320 	and.w	r3, r3, #32
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_GPIO_Init+0xcc>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a20      	ldr	r2, [pc, #128]	; (8000700 <MX_GPIO_Init+0xcc>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_GPIO_Init+0xcc>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_GPIO_Init+0xcc>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <MX_GPIO_Init+0xcc>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_GPIO_Init+0xcc>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4810      	ldr	r0, [pc, #64]	; (8000704 <MX_GPIO_Init+0xd0>)
 80006c2:	f000 fecb 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006c6:	230c      	movs	r3, #12
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80006d6:	230c      	movs	r3, #12
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f000 feba 	bl	800145c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2106      	movs	r1, #6
 80006ec:	2028      	movs	r0, #40	; 0x28
 80006ee:	f000 fbd9 	bl	8000ea4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006f2:	2028      	movs	r0, #40	; 0x28
 80006f4:	f000 fbf0 	bl	8000ed8 <HAL_NVIC_EnableIRQ>

}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	; 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000
 8000704:	48000800 	.word	0x48000800

08000708 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters){
 8000708:	b580      	push	{r7, lr}
 800070a:	b09c      	sub	sp, #112	; 0x70
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

	char msg[100];

	uint16_t analog_out = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	while(1){
		analog_out += 10;
 8000716:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800071a:	330a      	adds	r3, #10
 800071c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		if(analog_out > 0xFFF)
 8000720:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000728:	d302      	bcc.n	8000730 <task1_handler+0x28>
			analog_out = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		snprintf(msg,100,"Analog Out %d\n",(int)analog_out);
 8000730:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000734:	f107 0008 	add.w	r0, r7, #8
 8000738:	4a15      	ldr	r2, [pc, #84]	; (8000790 <task1_handler+0x88>)
 800073a:	2164      	movs	r1, #100	; 0x64
 800073c:	f008 f84a 	bl	80087d4 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	4618      	mov	r0, r3
 8000746:	f007 ff5d 	bl	8008604 <SEGGER_SYSVIEW_PrintfTarget>

		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800074a:	2100      	movs	r1, #0
 800074c:	4811      	ldr	r0, [pc, #68]	; (8000794 <task1_handler+0x8c>)
 800074e:	f000 fbf3 	bl	8000f38 <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, analog_out);
 8000752:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	480e      	ldr	r0, [pc, #56]	; (8000794 <task1_handler+0x8c>)
 800075c:	f000 fc99 	bl	8001092 <HAL_DAC_SetValue>

		HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000760:	2110      	movs	r1, #16
 8000762:	480c      	ldr	r0, [pc, #48]	; (8000794 <task1_handler+0x8c>)
 8000764:	f000 fbe8 	bl	8000f38 <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, analog_out);
 8000768:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800076c:	2200      	movs	r2, #0
 800076e:	2110      	movs	r1, #16
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <task1_handler+0x8c>)
 8000772:	f000 fc8e 	bl	8001092 <HAL_DAC_SetValue>
		vTaskDelay(100);
 8000776:	2064      	movs	r0, #100	; 0x64
 8000778:	f003 fcf6 	bl	8004168 <vTaskDelay>
		taskYIELD();
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <task1_handler+0x90>)
 800077e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	f3bf 8f4f 	dsb	sy
 8000788:	f3bf 8f6f 	isb	sy
		analog_out += 10;
 800078c:	e7c3      	b.n	8000716 <task1_handler+0xe>
 800078e:	bf00      	nop
 8000790:	08009130 	.word	0x08009130
 8000794:	2000009c 	.word	0x2000009c
 8000798:	e000ed04 	.word	0xe000ed04

0800079c <task2_handler>:
	}

}

static void task2_handler(void* parameters){
 800079c:	b580      	push	{r7, lr}
 800079e:	b09c      	sub	sp, #112	; 0x70
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

	char msg[100];

	xSemaphore = xSemaphoreCreateBinary();
 80007a4:	2203      	movs	r2, #3
 80007a6:	2100      	movs	r1, #0
 80007a8:	2001      	movs	r0, #1
 80007aa:	f002 fc83 	bl	80030b4 <xQueueGenericCreate>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <task2_handler+0x58>)
 80007b2:	6013      	str	r3, [r2, #0]
	xSemaphoreTake( xSemaphore, 0 );
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <task2_handler+0x58>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 f8a6 	bl	800390c <xQueueSemaphoreTake>

	while(1){
		if( xSemaphoreTake( xSemaphore, portMAX_DELAY ) == pdTRUE )
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <task2_handler+0x58>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 f89f 	bl	800390c <xQueueSemaphoreTake>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d1f5      	bne.n	80007c0 <task2_handler+0x24>
		{
			snprintf(msg,100,"Counter:%d\n",(int)htim1.Instance->CNT);
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <task2_handler+0x5c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007da:	f107 000c 	add.w	r0, r7, #12
 80007de:	4a07      	ldr	r2, [pc, #28]	; (80007fc <task2_handler+0x60>)
 80007e0:	2164      	movs	r1, #100	; 0x64
 80007e2:	f007 fff7 	bl	80087d4 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(msg);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4618      	mov	r0, r3
 80007ec:	f007 ff0a 	bl	8008604 <SEGGER_SYSVIEW_PrintfTarget>
		if( xSemaphoreTake( xSemaphore, portMAX_DELAY ) == pdTRUE )
 80007f0:	e7e6      	b.n	80007c0 <task2_handler+0x24>
 80007f2:	bf00      	nop
 80007f4:	200000fc 	.word	0x200000fc
 80007f8:	200000b0 	.word	0x200000b0
 80007fc:	08009140 	.word	0x08009140

08000800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000812:	f000 fa03 	bl	8000c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40001000 	.word	0x40001000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <HAL_MspInit+0x48>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <HAL_MspInit+0x48>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6613      	str	r3, [r2, #96]	; 0x60
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_MspInit+0x48>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <HAL_MspInit+0x48>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	4a09      	ldr	r2, [pc, #36]	; (8000878 <HAL_MspInit+0x48>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6593      	str	r3, [r2, #88]	; 0x58
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <HAL_MspInit+0x48>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000866:	f001 f843 	bl	80018f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800086a:	f004 ff7d 	bl	8005768 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <HAL_DAC_MspInit+0x84>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d12c      	bne.n	80008f8 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <HAL_DAC_MspInit+0x88>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <HAL_DAC_MspInit+0x88>)
 80008a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <HAL_DAC_MspInit+0x88>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <HAL_DAC_MspInit+0x88>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <HAL_DAC_MspInit+0x88>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <HAL_DAC_MspInit+0x88>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008ce:	2330      	movs	r3, #48	; 0x30
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d2:	2303      	movs	r3, #3
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f000 fdba 	bl	800145c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	210f      	movs	r1, #15
 80008ec:	2036      	movs	r0, #54	; 0x36
 80008ee:	f000 fad9 	bl	8000ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008f2:	2036      	movs	r0, #54	; 0x36
 80008f4:	f000 faf0 	bl	8000ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	50000800 	.word	0x50000800
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d12f      	bne.n	800098a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <HAL_TIM_Encoder_MspInit+0x90>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092e:	4a1a      	ldr	r2, [pc, #104]	; (8000998 <HAL_TIM_Encoder_MspInit+0x90>)
 8000930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000934:	6613      	str	r3, [r2, #96]	; 0x60
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <HAL_TIM_Encoder_MspInit+0x90>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_TIM_Encoder_MspInit+0x90>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a14      	ldr	r2, [pc, #80]	; (8000998 <HAL_TIM_Encoder_MspInit+0x90>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_TIM_Encoder_MspInit+0x90>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800095a:	2303      	movs	r3, #3
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800096a:	2302      	movs	r3, #2
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <HAL_TIM_Encoder_MspInit+0x94>)
 8000976:	f000 fd71 	bl	800145c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 12, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	210c      	movs	r1, #12
 800097e:	201b      	movs	r0, #27
 8000980:	f000 fa90 	bl	8000ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000984:	201b      	movs	r0, #27
 8000986:	f000 faa7 	bl	8000ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	; 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40012c00 	.word	0x40012c00
 8000998:	40021000 	.word	0x40021000
 800099c:	48000800 	.word	0x48000800

080009a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009b6:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <HAL_InitTick+0xcc>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	4a2c      	ldr	r2, [pc, #176]	; (8000a6c <HAL_InitTick+0xcc>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6593      	str	r3, [r2, #88]	; 0x58
 80009c2:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <HAL_InitTick+0xcc>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ce:	f107 020c 	add.w	r2, r7, #12
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fc71 	bl	80022c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009de:	f001 fc59 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 80009e2:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e6:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <HAL_InitTick+0xd0>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	0c9b      	lsrs	r3, r3, #18
 80009ee:	3b01      	subs	r3, #1
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_InitTick+0xd4>)
 80009f4:	4a20      	ldr	r2, [pc, #128]	; (8000a78 <HAL_InitTick+0xd8>)
 80009f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <HAL_InitTick+0xd4>)
 80009fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a00:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <HAL_InitTick+0xd4>)
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_InitTick+0xd4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_InitTick+0xd4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000a12:	4818      	ldr	r0, [pc, #96]	; (8000a74 <HAL_InitTick+0xd4>)
 8000a14:	f001 fccc 	bl	80023b0 <HAL_TIM_Base_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d11b      	bne.n	8000a5e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a26:	4813      	ldr	r0, [pc, #76]	; (8000a74 <HAL_InitTick+0xd4>)
 8000a28:	f001 fd24 	bl	8002474 <HAL_TIM_Base_Start_IT>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d111      	bne.n	8000a5e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a3a:	2036      	movs	r0, #54	; 0x36
 8000a3c:	f000 fa4c 	bl	8000ed8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b0f      	cmp	r3, #15
 8000a44:	d808      	bhi.n	8000a58 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a46:	2200      	movs	r2, #0
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	2036      	movs	r0, #54	; 0x36
 8000a4c:	f000 fa2a 	bl	8000ea4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_InitTick+0xdc>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e002      	b.n	8000a5e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8000a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3730      	adds	r7, #48	; 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	431bde83 	.word	0x431bde83
 8000a74:	20000100 	.word	0x20000100
 8000a78:	40001000 	.word	0x40001000
 8000a7c:	20000004 	.word	0x20000004

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ab2:	4810      	ldr	r0, [pc, #64]	; (8000af4 <TIM1_CC_IRQHandler+0x48>)
 8000ab4:	f001 fea2 	bl	80027fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  BaseType_t xHigherPriorityTaskWoken;

	xHigherPriorityTaskWoken = pdFALSE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
	xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken );
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <TIM1_CC_IRQHandler+0x4c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	1d3a      	adds	r2, r7, #4
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 fd61 	bl	800358c <xQueueGiveFromISR>


	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00a      	beq.n	8000ae6 <TIM1_CC_IRQHandler+0x3a>
 8000ad0:	f007 fb4e 	bl	8008170 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <TIM1_CC_IRQHandler+0x50>)
 8000ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	f3bf 8f4f 	dsb	sy
 8000ae0:	f3bf 8f6f 	isb	sy
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ae4:	e001      	b.n	8000aea <TIM1_CC_IRQHandler+0x3e>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000ae6:	f007 fb27 	bl	8008138 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000b0 	.word	0x200000b0
 8000af8:	200000fc 	.word	0x200000fc
 8000afc:	e000ed04 	.word	0xe000ed04

08000b00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  SEGGER_SYSVIEW_RecordEnterISR();
 8000b06:	f007 fad5 	bl	80080b4 <SEGGER_SYSVIEW_RecordEnterISR>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b0a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b0e:	f000 fe27 	bl	8001760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  BaseType_t xHigherPriorityTaskWoken;

  xHigherPriorityTaskWoken = pdFALSE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
  xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken );
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <EXTI15_10_IRQHandler+0x50>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	1d3a      	adds	r2, r7, #4
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fd34 	bl	800358c <xQueueGiveFromISR>

  SEGGER_SYSVIEW_RecordExitISR();
 8000b24:	f007 fb08 	bl	8008138 <SEGGER_SYSVIEW_RecordExitISR>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d00a      	beq.n	8000b44 <EXTI15_10_IRQHandler+0x44>
 8000b2e:	f007 fb1f 	bl	8008170 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <EXTI15_10_IRQHandler+0x54>)
 8000b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	f3bf 8f4f 	dsb	sy
 8000b3e:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b42:	e001      	b.n	8000b48 <EXTI15_10_IRQHandler+0x48>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000b44:	f007 faf8 	bl	8008138 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200000fc 	.word	0x200000fc
 8000b54:	e000ed04 	.word	0xe000ed04

08000b58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <TIM6_DAC_IRQHandler+0x14>)
 8000b5e:	f001 fe4d 	bl	80027fc <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <TIM6_DAC_IRQHandler+0x18>)
 8000b64:	f000 fa3b 	bl	8000fde <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000100 	.word	0x20000100
 8000b70:	2000009c 	.word	0x2000009c

08000b74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9e:	490e      	ldr	r1, [pc, #56]	; (8000bd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba0:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <LoopForever+0xe>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb4:	4c0b      	ldr	r4, [pc, #44]	; (8000be4 <LoopForever+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bc2:	f7ff ffd7 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f007 fdbb 	bl	8008740 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bca:	f7ff fbc9 	bl	8000360 <main>

08000bce <LoopForever>:

LoopForever:
    b LoopForever
 8000bce:	e7fe      	b.n	8000bce <LoopForever>
  ldr   r0, =_estack
 8000bd0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000bdc:	08009294 	.word	0x08009294
  ldr r2, =_sbss
 8000be0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000be4:	2001458c 	.word	0x2001458c

08000be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC1_2_IRQHandler>

08000bea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f94a 	bl	8000e8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfa:	200f      	movs	r0, #15
 8000bfc:	f7ff fed0 	bl	80009a0 <HAL_InitTick>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	71fb      	strb	r3, [r7, #7]
 8000c0a:	e001      	b.n	8000c10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c0c:	f7ff fe10 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c10:	79fb      	ldrb	r3, [r7, #7]

}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_IncTick+0x1c>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_IncTick+0x20>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a03      	ldr	r2, [pc, #12]	; (8000c38 <HAL_IncTick+0x1c>)
 8000c2c:	6013      	str	r3, [r2, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	2000014c 	.word	0x2000014c
 8000c3c:	20000008 	.word	0x20000008

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	2000014c 	.word	0x2000014c

08000c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c60:	f7ff ffee 	bl	8000c40 <HAL_GetTick>
 8000c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c70:	d004      	beq.n	8000c7c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_Delay+0x40>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	4413      	add	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c7c:	bf00      	nop
 8000c7e:	f7ff ffdf 	bl	8000c40 <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d8f7      	bhi.n	8000c7e <HAL_Delay+0x26>
  {
  }
}
 8000c8e:	bf00      	nop
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000008 	.word	0x20000008

08000c9c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8000cac:	4904      	ldr	r1, [pc, #16]	; (8000cc0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	600b      	str	r3, [r1, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	40010030 	.word	0x40010030

08000cc4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f023 0202 	bic.w	r2, r3, #2
 8000cd4:	4904      	ldr	r1, [pc, #16]	; (8000ce8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	600b      	str	r3, [r1, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40010030 	.word	0x40010030

08000cec <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000cfe:	f7ff ff9f 	bl	8000c40 <HAL_GetTick>
 8000d02:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000d04:	e008      	b.n	8000d18 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000d06:	f7ff ff9b 	bl	8000c40 <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	2b0a      	cmp	r3, #10
 8000d12:	d901      	bls.n	8000d18 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e006      	b.n	8000d26 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f0      	beq.n	8000d06 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40010030 	.word	0x40010030

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ff4c 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb2:	f7ff ff63 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000eb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	68b9      	ldr	r1, [r7, #8]
 8000ebc:	6978      	ldr	r0, [r7, #20]
 8000ebe:	f7ff ffb3 	bl	8000e28 <NVIC_EncodePriority>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff82 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff56 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e014      	b.n	8000f30 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d105      	bne.n	8000f1c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fcb0 	bl	800087c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2202      	movs	r2, #2
 8000f20:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	795b      	ldrb	r3, [r3, #5]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d101      	bne.n	8000f4e <HAL_DAC_Start+0x16>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e043      	b.n	8000fd6 <HAL_DAC_Start+0x9e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2202      	movs	r2, #2
 8000f58:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6819      	ldr	r1, [r3, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	2201      	movs	r2, #1
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f7ff fe70 	bl	8000c58 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10f      	bne.n	8000f9e <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d11d      	bne.n	8000fc8 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0201 	orr.w	r2, r2, #1
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	e014      	b.n	8000fc8 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	2102      	movs	r1, #2
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d107      	bne.n	8000fc8 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f042 0202 	orr.w	r2, r2, #2
 8000fc6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff4:	d120      	bne.n	8001038 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001004:	d118      	bne.n	8001038 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2204      	movs	r2, #4
 800100a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	f043 0201 	orr.w	r2, r3, #1
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001020:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001030:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f855 	bl	80010e2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001046:	d120      	bne.n	800108a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001056:	d118      	bne.n	800108a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2204      	movs	r2, #4
 800105c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	f043 0202 	orr.w	r2, r3, #2
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001072:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001082:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f9df 	bl	8001448 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001092:	b480      	push	{r7}
 8001094:	b087      	sub	sp, #28
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d105      	bne.n	80010c2 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	3308      	adds	r3, #8
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e004      	b.n	80010cc <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	3314      	adds	r3, #20
 80010ca:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	461a      	mov	r2, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	371c      	adds	r7, #28
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	795b      	ldrb	r3, [r3, #5]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d101      	bne.n	8001110 <HAL_DAC_ConfigChannel+0x18>
 800110c:	2302      	movs	r3, #2
 800110e:	e192      	b.n	8001436 <HAL_DAC_ConfigChannel+0x33e>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2201      	movs	r2, #1
 8001114:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2202      	movs	r2, #2
 800111a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2b04      	cmp	r3, #4
 8001122:	d174      	bne.n	800120e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001124:	f7ff fd8c 	bl	8000c40 <HAL_GetTick>
 8001128:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d134      	bne.n	800119a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001130:	e011      	b.n	8001156 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001132:	f7ff fd85 	bl	8000c40 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d90a      	bls.n	8001156 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	f043 0208 	orr.w	r2, r3, #8
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2203      	movs	r2, #3
 8001150:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e16f      	b.n	8001436 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1e6      	bne.n	8001132 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001164:	2001      	movs	r0, #1
 8001166:	f7ff fd77 	bl	8000c58 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001172:	641a      	str	r2, [r3, #64]	; 0x40
 8001174:	e01e      	b.n	80011b4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001176:	f7ff fd63 	bl	8000c40 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b01      	cmp	r3, #1
 8001182:	d90a      	bls.n	800119a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	f043 0208 	orr.w	r2, r3, #8
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2203      	movs	r2, #3
 8001194:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e14d      	b.n	8001436 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	dbe8      	blt.n	8001176 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f7ff fd57 	bl	8000c58 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011b2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	ea02 0103 	and.w	r1, r2, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	409a      	lsls	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0310 	and.w	r3, r3, #16
 80011ee:	21ff      	movs	r1, #255	; 0xff
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	ea02 0103 	and.w	r1, r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	409a      	lsls	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d11d      	bne.n	8001252 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	221f      	movs	r2, #31
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800122e:	4013      	ands	r3, r2
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001246:	4313      	orrs	r3, r2
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001250:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	2207      	movs	r2, #7
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126a:	4013      	ands	r3, r2
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
 800127a:	e00f      	b.n	800129c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d102      	bne.n	800128a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001284:	2301      	movs	r3, #1
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	e008      	b.n	800129c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d102      	bne.n	8001298 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001292:	2301      	movs	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
 8001296:	e001      	b.n	800129c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	6a3a      	ldr	r2, [r7, #32]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012be:	4013      	ands	r3, r2
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	791b      	ldrb	r3, [r3, #4]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d102      	bne.n	80012d0 <HAL_DAC_ConfigChannel+0x1d8>
 80012ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ce:	e000      	b.n	80012d2 <HAL_DAC_ConfigChannel+0x1da>
 80012d0:	2300      	movs	r3, #0
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ea:	4013      	ands	r3, r2
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	795b      	ldrb	r3, [r3, #5]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <HAL_DAC_ConfigChannel+0x204>
 80012f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fa:	e000      	b.n	80012fe <HAL_DAC_ConfigChannel+0x206>
 80012fc:	2300      	movs	r3, #0
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d114      	bne.n	800133e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001314:	f000 ffb2 	bl	800227c <HAL_RCC_GetHCLKFreq>
 8001318:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	4a48      	ldr	r2, [pc, #288]	; (8001440 <HAL_DAC_ConfigChannel+0x348>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d904      	bls.n	800132c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
 800132a:	e00f      	b.n	800134c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	4a45      	ldr	r2, [pc, #276]	; (8001444 <HAL_DAC_ConfigChannel+0x34c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d90a      	bls.n	800134a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
 800133c:	e006      	b.n	800134c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001344:	4313      	orrs	r3, r2
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
 8001348:	e000      	b.n	800134c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800134a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135a:	4313      	orrs	r3, r2
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001364:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6819      	ldr	r1, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	400a      	ands	r2, r1
 8001382:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139e:	4013      	ands	r3, r2
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b6:	4313      	orrs	r3, r2
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6819      	ldr	r1, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	22c0      	movs	r2, #192	; 0xc0
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43da      	mvns	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	400a      	ands	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	f640 710f 	movw	r1, #3855	; 0xf0f
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	ea02 0103 	and.w	r1, r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	409a      	lsls	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2201      	movs	r2, #1
 800142c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	09896800 	.word	0x09896800
 8001444:	04c4b400 	.word	0x04c4b400

08001448 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800146a:	e15a      	b.n	8001722 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	2101      	movs	r1, #1
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	4013      	ands	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 814c 	beq.w	800171c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d005      	beq.n	800149c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001498:	2b02      	cmp	r3, #2
 800149a:	d130      	bne.n	80014fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014d2:	2201      	movs	r2, #1
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	f003 0201 	and.w	r2, r3, #1
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b03      	cmp	r3, #3
 8001508:	d017      	beq.n	800153a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d123      	bne.n	800158e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	220f      	movs	r2, #15
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	08da      	lsrs	r2, r3, #3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3208      	adds	r2, #8
 8001588:	6939      	ldr	r1, [r7, #16]
 800158a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0203 	and.w	r2, r3, #3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80a6 	beq.w	800171c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d0:	4b5b      	ldr	r3, [pc, #364]	; (8001740 <HAL_GPIO_Init+0x2e4>)
 80015d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d4:	4a5a      	ldr	r2, [pc, #360]	; (8001740 <HAL_GPIO_Init+0x2e4>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6613      	str	r3, [r2, #96]	; 0x60
 80015dc:	4b58      	ldr	r3, [pc, #352]	; (8001740 <HAL_GPIO_Init+0x2e4>)
 80015de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e8:	4a56      	ldr	r2, [pc, #344]	; (8001744 <HAL_GPIO_Init+0x2e8>)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001612:	d01f      	beq.n	8001654 <HAL_GPIO_Init+0x1f8>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a4c      	ldr	r2, [pc, #304]	; (8001748 <HAL_GPIO_Init+0x2ec>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d019      	beq.n	8001650 <HAL_GPIO_Init+0x1f4>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a4b      	ldr	r2, [pc, #300]	; (800174c <HAL_GPIO_Init+0x2f0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d013      	beq.n	800164c <HAL_GPIO_Init+0x1f0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a4a      	ldr	r2, [pc, #296]	; (8001750 <HAL_GPIO_Init+0x2f4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d00d      	beq.n	8001648 <HAL_GPIO_Init+0x1ec>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a49      	ldr	r2, [pc, #292]	; (8001754 <HAL_GPIO_Init+0x2f8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d007      	beq.n	8001644 <HAL_GPIO_Init+0x1e8>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a48      	ldr	r2, [pc, #288]	; (8001758 <HAL_GPIO_Init+0x2fc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_GPIO_Init+0x1e4>
 800163c:	2305      	movs	r3, #5
 800163e:	e00a      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001640:	2306      	movs	r3, #6
 8001642:	e008      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001644:	2304      	movs	r3, #4
 8001646:	e006      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001648:	2303      	movs	r3, #3
 800164a:	e004      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 800164c:	2302      	movs	r3, #2
 800164e:	e002      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001654:	2300      	movs	r3, #0
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	f002 0203 	and.w	r2, r2, #3
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	4093      	lsls	r3, r2
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001666:	4937      	ldr	r1, [pc, #220]	; (8001744 <HAL_GPIO_Init+0x2e8>)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001674:	4b39      	ldr	r3, [pc, #228]	; (800175c <HAL_GPIO_Init+0x300>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001698:	4a30      	ldr	r2, [pc, #192]	; (800175c <HAL_GPIO_Init+0x300>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800169e:	4b2f      	ldr	r3, [pc, #188]	; (800175c <HAL_GPIO_Init+0x300>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016c2:	4a26      	ldr	r2, [pc, #152]	; (800175c <HAL_GPIO_Init+0x300>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_GPIO_Init+0x300>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ec:	4a1b      	ldr	r2, [pc, #108]	; (800175c <HAL_GPIO_Init+0x300>)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_GPIO_Init+0x300>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001716:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_GPIO_Init+0x300>)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	f47f ae9d 	bne.w	800146c <HAL_GPIO_Init+0x10>
  }
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000
 8001748:	48000400 	.word	0x48000400
 800174c:	48000800 	.word	0x48000800
 8001750:	48000c00 	.word	0x48000c00
 8001754:	48001000 	.word	0x48001000
 8001758:	48001400 	.word	0x48001400
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d006      	beq.n	8001784 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f806 	bl	8001790 <HAL_GPIO_EXTI_Callback>
  }
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40010400 	.word	0x40010400

08001790 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d141      	bne.n	800183a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017b6:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c2:	d131      	bne.n	8001828 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017c4:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ca:	4a46      	ldr	r2, [pc, #280]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d4:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017dc:	4a41      	ldr	r2, [pc, #260]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017e4:	4b40      	ldr	r3, [pc, #256]	; (80018e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2232      	movs	r2, #50	; 0x32
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	4a3f      	ldr	r2, [pc, #252]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	0c9b      	lsrs	r3, r3, #18
 80017f6:	3301      	adds	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017fa:	e002      	b.n	8001802 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3b01      	subs	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001802:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800180e:	d102      	bne.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f2      	bne.n	80017fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001816:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001822:	d158      	bne.n	80018d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e057      	b.n	80018d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001828:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800182e:	4a2d      	ldr	r2, [pc, #180]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001838:	e04d      	b.n	80018d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001840:	d141      	bne.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001842:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800184a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184e:	d131      	bne.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001850:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001856:	4a23      	ldr	r2, [pc, #140]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001868:	4a1e      	ldr	r2, [pc, #120]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2232      	movs	r2, #50	; 0x32
 8001876:	fb02 f303 	mul.w	r3, r2, r3
 800187a:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	3301      	adds	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001886:	e002      	b.n	800188e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3b01      	subs	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189a:	d102      	bne.n	80018a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f2      	bne.n	8001888 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ae:	d112      	bne.n	80018d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e011      	b.n	80018d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018c4:	e007      	b.n	80018d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40007000 	.word	0x40007000
 80018e8:	20000000 	.word	0x20000000
 80018ec:	431bde83 	.word	0x431bde83

080018f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fe:	6093      	str	r3, [r2, #8]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40007000 	.word	0x40007000

08001910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e306      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d075      	beq.n	8001a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800192e:	4b97      	ldr	r3, [pc, #604]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001938:	4b94      	ldr	r3, [pc, #592]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b0c      	cmp	r3, #12
 8001946:	d102      	bne.n	800194e <HAL_RCC_OscConfig+0x3e>
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d002      	beq.n	8001954 <HAL_RCC_OscConfig+0x44>
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b08      	cmp	r3, #8
 8001952:	d10b      	bne.n	800196c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	4b8d      	ldr	r3, [pc, #564]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d05b      	beq.n	8001a18 <HAL_RCC_OscConfig+0x108>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d157      	bne.n	8001a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e2e1      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	d106      	bne.n	8001984 <HAL_RCC_OscConfig+0x74>
 8001976:	4b85      	ldr	r3, [pc, #532]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a84      	ldr	r2, [pc, #528]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e01d      	b.n	80019c0 <HAL_RCC_OscConfig+0xb0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x98>
 800198e:	4b7f      	ldr	r3, [pc, #508]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a7e      	ldr	r2, [pc, #504]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b7c      	ldr	r3, [pc, #496]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a7b      	ldr	r2, [pc, #492]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xb0>
 80019a8:	4b78      	ldr	r3, [pc, #480]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a77      	ldr	r2, [pc, #476]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 80019ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b75      	ldr	r3, [pc, #468]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a74      	ldr	r2, [pc, #464]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f93a 	bl	8000c40 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff f936 	bl	8000c40 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e2a6      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e2:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0xc0>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff f926 	bl	8000c40 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff f922 	bl	8000c40 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e292      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a0a:	4b60      	ldr	r3, [pc, #384]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0xe8>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d075      	beq.n	8001b12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a26:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a30:	4b56      	ldr	r3, [pc, #344]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b0c      	cmp	r3, #12
 8001a3e:	d102      	bne.n	8001a46 <HAL_RCC_OscConfig+0x136>
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d002      	beq.n	8001a4c <HAL_RCC_OscConfig+0x13c>
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d11f      	bne.n	8001a8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4c:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_OscConfig+0x154>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e265      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b49      	ldr	r3, [pc, #292]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	4946      	ldr	r1, [pc, #280]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a78:	4b45      	ldr	r3, [pc, #276]	; (8001b90 <HAL_RCC_OscConfig+0x280>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe ff8f 	bl	80009a0 <HAL_InitTick>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d043      	beq.n	8001b10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e251      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d023      	beq.n	8001adc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a94:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a3c      	ldr	r2, [pc, #240]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f8ce 	bl	8000c40 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa8:	f7ff f8ca 	bl	8000c40 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e23a      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aba:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	061b      	lsls	r3, r3, #24
 8001ad4:	492d      	ldr	r1, [pc, #180]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
 8001ada:	e01a      	b.n	8001b12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a2a      	ldr	r2, [pc, #168]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f8aa 	bl	8000c40 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af0:	f7ff f8a6 	bl	8000c40 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e216      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x1e0>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d041      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01c      	beq.n	8001b60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2c:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b36:	f7ff f883 	bl	8000c40 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3e:	f7ff f87f 	bl	8000c40 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e1ef      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0ef      	beq.n	8001b3e <HAL_RCC_OscConfig+0x22e>
 8001b5e:	e020      	b.n	8001ba2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_RCC_OscConfig+0x27c>)
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7ff f866 	bl	8000c40 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b76:	e00d      	b.n	8001b94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff f862 	bl	8000c40 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d906      	bls.n	8001b94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1d2      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b94:	4b8c      	ldr	r3, [pc, #560]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1ea      	bne.n	8001b78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80a6 	beq.w	8001cfc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001bb4:	4b84      	ldr	r3, [pc, #528]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x2b4>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x2b6>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00d      	beq.n	8001be6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b7f      	ldr	r3, [pc, #508]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	4a7e      	ldr	r2, [pc, #504]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd6:	4b7c      	ldr	r3, [pc, #496]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001be2:	2301      	movs	r3, #1
 8001be4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be6:	4b79      	ldr	r3, [pc, #484]	; (8001dcc <HAL_RCC_OscConfig+0x4bc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d118      	bne.n	8001c24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bf2:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <HAL_RCC_OscConfig+0x4bc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a75      	ldr	r2, [pc, #468]	; (8001dcc <HAL_RCC_OscConfig+0x4bc>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff f81f 	bl	8000c40 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7ff f81b 	bl	8000c40 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e18b      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c18:	4b6c      	ldr	r3, [pc, #432]	; (8001dcc <HAL_RCC_OscConfig+0x4bc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d108      	bne.n	8001c3e <HAL_RCC_OscConfig+0x32e>
 8001c2c:	4b66      	ldr	r3, [pc, #408]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	4a65      	ldr	r2, [pc, #404]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3c:	e024      	b.n	8001c88 <HAL_RCC_OscConfig+0x378>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d110      	bne.n	8001c68 <HAL_RCC_OscConfig+0x358>
 8001c46:	4b60      	ldr	r3, [pc, #384]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4c:	4a5e      	ldr	r2, [pc, #376]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c56:	4b5c      	ldr	r3, [pc, #368]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5c:	4a5a      	ldr	r2, [pc, #360]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c66:	e00f      	b.n	8001c88 <HAL_RCC_OscConfig+0x378>
 8001c68:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a56      	ldr	r2, [pc, #344]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	4a52      	ldr	r2, [pc, #328]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001c80:	f023 0304 	bic.w	r3, r3, #4
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d016      	beq.n	8001cbe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7fe ffd6 	bl	8000c40 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c98:	f7fe ffd2 	bl	8000c40 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e140      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cae:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0ed      	beq.n	8001c98 <HAL_RCC_OscConfig+0x388>
 8001cbc:	e015      	b.n	8001cea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7fe ffbf 	bl	8000c40 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7fe ffbb 	bl	8000c40 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e129      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cdc:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1ed      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cea:	7ffb      	ldrb	r3, [r7, #31]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf0:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	4a34      	ldr	r2, [pc, #208]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d03c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d01c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d16:	4a2c      	ldr	r2, [pc, #176]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d20:	f7fe ff8e 	bl	8000c40 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d28:	f7fe ff8a 	bl	8000c40 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0fa      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ef      	beq.n	8001d28 <HAL_RCC_OscConfig+0x418>
 8001d48:	e01b      	b.n	8001d82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d50:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7fe ff71 	bl	8000c40 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d62:	f7fe ff6d 	bl	8000c40 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0dd      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d74:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1ef      	bne.n	8001d62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80d1 	beq.w	8001f2e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b0c      	cmp	r3, #12
 8001d96:	f000 808b 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d15e      	bne.n	8001e60 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <HAL_RCC_OscConfig+0x4b8>)
 8001da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dae:	f7fe ff47 	bl	8000c40 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db4:	e00c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db6:	f7fe ff43 	bl	8000c40 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d905      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e0b3      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd0:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1ec      	bne.n	8001db6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ddc:	4b56      	ldr	r3, [pc, #344]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	4b56      	ldr	r3, [pc, #344]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6a11      	ldr	r1, [r2, #32]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dec:	3a01      	subs	r2, #1
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	4311      	orrs	r1, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001df6:	0212      	lsls	r2, r2, #8
 8001df8:	4311      	orrs	r1, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dfe:	0852      	lsrs	r2, r2, #1
 8001e00:	3a01      	subs	r2, #1
 8001e02:	0552      	lsls	r2, r2, #21
 8001e04:	4311      	orrs	r1, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e0a:	0852      	lsrs	r2, r2, #1
 8001e0c:	3a01      	subs	r2, #1
 8001e0e:	0652      	lsls	r2, r2, #25
 8001e10:	4311      	orrs	r1, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e16:	06d2      	lsls	r2, r2, #27
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	4947      	ldr	r1, [pc, #284]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e20:	4b45      	ldr	r3, [pc, #276]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a44      	ldr	r2, [pc, #272]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e2c:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4a41      	ldr	r2, [pc, #260]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7fe ff02 	bl	8000c40 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7fe fefe 	bl	8000c40 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e06e      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e52:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x530>
 8001e5e:	e066      	b.n	8001f2e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a34      	ldr	r2, [pc, #208]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e6c:	4b32      	ldr	r3, [pc, #200]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a31      	ldr	r2, [pc, #196]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001e72:	f023 0303 	bic.w	r3, r3, #3
 8001e76:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e78:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001e7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7fe feda 	bl	8000c40 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7fe fed6 	bl	8000c40 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e046      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x580>
 8001eae:	e03e      	b.n	8001f2e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e039      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <HAL_RCC_OscConfig+0x628>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 0203 	and.w	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d12c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	3b01      	subs	r3, #1
 8001edc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d123      	bne.n	8001f2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d11b      	bne.n	8001f2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d113      	bne.n	8001f2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d109      	bne.n	8001f2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f20:	085b      	lsrs	r3, r3, #1
 8001f22:	3b01      	subs	r3, #1
 8001f24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	019f800c 	.word	0x019f800c

08001f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e11e      	b.n	8002196 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b91      	ldr	r3, [pc, #580]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d910      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b8e      	ldr	r3, [pc, #568]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 020f 	bic.w	r2, r3, #15
 8001f6e:	498c      	ldr	r1, [pc, #560]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b8a      	ldr	r3, [pc, #552]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e106      	b.n	8002196 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d073      	beq.n	800207c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d129      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9c:	4b81      	ldr	r3, [pc, #516]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0f4      	b.n	8002196 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fac:	f000 f9ba 	bl	8002324 <RCC_GetSysClockFreqFromPLLSource>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4a7c      	ldr	r2, [pc, #496]	; (80021a8 <HAL_RCC_ClockConfig+0x268>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d93f      	bls.n	800203a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fba:	4b7a      	ldr	r3, [pc, #488]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d033      	beq.n	800203a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d12f      	bne.n	800203a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fda:	4b72      	ldr	r3, [pc, #456]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fe2:	4a70      	ldr	r2, [pc, #448]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 8001fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	e024      	b.n	800203a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0c6      	b.n	8002196 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002008:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0be      	b.n	8002196 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002018:	f000 f8ce 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 800201c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4a61      	ldr	r2, [pc, #388]	; (80021a8 <HAL_RCC_ClockConfig+0x268>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d909      	bls.n	800203a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002026:	4b5f      	ldr	r3, [pc, #380]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800202e:	4a5d      	ldr	r2, [pc, #372]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 8002030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002034:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800203a:	4b5a      	ldr	r3, [pc, #360]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f023 0203 	bic.w	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4957      	ldr	r1, [pc, #348]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 8002048:	4313      	orrs	r3, r2
 800204a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800204c:	f7fe fdf8 	bl	8000c40 <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	e00a      	b.n	800206a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002054:	f7fe fdf4 	bl	8000c40 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e095      	b.n	8002196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	4b4e      	ldr	r3, [pc, #312]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 020c 	and.w	r2, r3, #12
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	429a      	cmp	r2, r3
 800207a:	d1eb      	bne.n	8002054 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d023      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002094:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a42      	ldr	r2, [pc, #264]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 800209a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800209e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d007      	beq.n	80020bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020ac:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020b4:	4a3b      	ldr	r2, [pc, #236]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 80020b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020bc:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4936      	ldr	r1, [pc, #216]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b80      	cmp	r3, #128	; 0x80
 80020d4:	d105      	bne.n	80020e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020d6:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4a32      	ldr	r2, [pc, #200]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 80020dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d21d      	bcs.n	800212c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 020f 	bic.w	r2, r3, #15
 80020f8:	4929      	ldr	r1, [pc, #164]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002100:	f7fe fd9e 	bl	8000c40 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	e00a      	b.n	800211e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002108:	f7fe fd9a 	bl	8000c40 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e03b      	b.n	8002196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d1ed      	bne.n	8002108 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4917      	ldr	r1, [pc, #92]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	490f      	ldr	r1, [pc, #60]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800216a:	f000 f825 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 800216e:	4602      	mov	r2, r0
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_RCC_ClockConfig+0x264>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	490c      	ldr	r1, [pc, #48]	; (80021ac <HAL_RCC_ClockConfig+0x26c>)
 800217c:	5ccb      	ldrb	r3, [r1, r3]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x270>)
 8002188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_RCC_ClockConfig+0x274>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fc06 	bl	80009a0 <HAL_InitTick>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40022000 	.word	0x40022000
 80021a4:	40021000 	.word	0x40021000
 80021a8:	04c4b400 	.word	0x04c4b400
 80021ac:	08009218 	.word	0x08009218
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021be:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d102      	bne.n	80021d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021ca:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	e047      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d102      	bne.n	80021e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021dc:	4b26      	ldr	r3, [pc, #152]	; (8002278 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	e03e      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021e2:	4b23      	ldr	r3, [pc, #140]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d136      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ee:	4b20      	ldr	r3, [pc, #128]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	3301      	adds	r3, #1
 8002204:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d10c      	bne.n	8002226 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800220c:	4a1a      	ldr	r2, [pc, #104]	; (8002278 <HAL_RCC_GetSysClockFreq+0xc0>)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	fbb2 f3f3 	udiv	r3, r2, r3
 8002214:	4a16      	ldr	r2, [pc, #88]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002216:	68d2      	ldr	r2, [r2, #12]
 8002218:	0a12      	lsrs	r2, r2, #8
 800221a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800221e:	fb02 f303 	mul.w	r3, r2, r3
 8002222:	617b      	str	r3, [r7, #20]
      break;
 8002224:	e00c      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002226:	4a13      	ldr	r2, [pc, #76]	; (8002274 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	4a10      	ldr	r2, [pc, #64]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002230:	68d2      	ldr	r2, [r2, #12]
 8002232:	0a12      	lsrs	r2, r2, #8
 8002234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002238:	fb02 f303 	mul.w	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
      break;
 800223e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0e5b      	lsrs	r3, r3, #25
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	3301      	adds	r3, #1
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	e001      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002260:	693b      	ldr	r3, [r7, #16]
}
 8002262:	4618      	mov	r0, r3
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	00f42400 	.word	0x00f42400
 8002278:	016e3600 	.word	0x016e3600

0800227c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_RCC_GetHCLKFreq+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000000 	.word	0x20000000

08002294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002298:	f7ff fff0 	bl	800227c <HAL_RCC_GetHCLKFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	4904      	ldr	r1, [pc, #16]	; (80022bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	08009228 	.word	0x08009228

080022c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	220f      	movs	r2, #15
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_RCC_GetClockConfig+0x5c>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0203 	and.w	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_RCC_GetClockConfig+0x5c>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_RCC_GetClockConfig+0x5c>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_RCC_GetClockConfig+0x5c>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	08db      	lsrs	r3, r3, #3
 80022fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_RCC_GetClockConfig+0x60>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 020f 	and.w	r2, r3, #15
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	601a      	str	r2, [r3, #0]
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	40022000 	.word	0x40022000

08002324 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232a:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3301      	adds	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d10c      	bne.n	8002362 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002348:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	4a14      	ldr	r2, [pc, #80]	; (80023a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002352:	68d2      	ldr	r2, [r2, #12]
 8002354:	0a12      	lsrs	r2, r2, #8
 8002356:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	617b      	str	r3, [r7, #20]
    break;
 8002360:	e00c      	b.n	800237c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	fbb2 f3f3 	udiv	r3, r2, r3
 800236a:	4a0e      	ldr	r2, [pc, #56]	; (80023a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800236c:	68d2      	ldr	r2, [r2, #12]
 800236e:	0a12      	lsrs	r2, r2, #8
 8002370:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002374:	fb02 f303 	mul.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
    break;
 800237a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0e5b      	lsrs	r3, r3, #25
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	3301      	adds	r3, #1
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	fbb2 f3f3 	udiv	r3, r2, r3
 8002394:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002396:	687b      	ldr	r3, [r7, #4]
}
 8002398:	4618      	mov	r0, r3
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40021000 	.word	0x40021000
 80023a8:	016e3600 	.word	0x016e3600
 80023ac:	00f42400 	.word	0x00f42400

080023b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e049      	b.n	8002456 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f841 	bl	800245e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3304      	adds	r3, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	4610      	mov	r0, r2
 80023f0:	f000 fbac 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d001      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e04f      	b.n	800252c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a23      	ldr	r2, [pc, #140]	; (8002538 <HAL_TIM_Base_Start_IT+0xc4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d01d      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x76>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b6:	d018      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x76>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1f      	ldr	r2, [pc, #124]	; (800253c <HAL_TIM_Base_Start_IT+0xc8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d013      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x76>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <HAL_TIM_Base_Start_IT+0xcc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00e      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x76>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <HAL_TIM_Base_Start_IT+0xd0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d009      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x76>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <HAL_TIM_Base_Start_IT+0xd4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d004      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x76>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <HAL_TIM_Base_Start_IT+0xd8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d115      	bne.n	8002516 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	4b17      	ldr	r3, [pc, #92]	; (8002550 <HAL_TIM_Base_Start_IT+0xdc>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b06      	cmp	r3, #6
 80024fa:	d015      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0xb4>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002502:	d011      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002514:	e008      	b.n	8002528 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e000      	b.n	800252a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002528:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40000400 	.word	0x40000400
 8002540:	40000800 	.word	0x40000800
 8002544:	40013400 	.word	0x40013400
 8002548:	40014000 	.word	0x40014000
 800254c:	40015000 	.word	0x40015000
 8002550:	00010007 	.word	0x00010007

08002554 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e097      	b.n	8002698 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fe f9c3 	bl	8000908 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002598:	f023 0307 	bic.w	r3, r3, #7
 800259c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	4619      	mov	r1, r3
 80025a8:	4610      	mov	r0, r2
 80025aa:	f000 facf 	bl	8002b4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d6:	f023 0303 	bic.w	r3, r3, #3
 80025da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	021b      	lsls	r3, r3, #8
 80025e6:	4313      	orrs	r3, r2
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80025f4:	f023 030c 	bic.w	r3, r3, #12
 80025f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	4313      	orrs	r3, r2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	011a      	lsls	r2, r3, #4
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	031b      	lsls	r3, r3, #12
 8002624:	4313      	orrs	r3, r2
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002632:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800263a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	4313      	orrs	r3, r2
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d110      	bne.n	80026f2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d102      	bne.n	80026dc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80026d6:	7b7b      	ldrb	r3, [r7, #13]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d001      	beq.n	80026e0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e089      	b.n	80027f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f0:	e031      	b.n	8002756 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d110      	bne.n	800271a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80026f8:	7bbb      	ldrb	r3, [r7, #14]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d102      	bne.n	8002704 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80026fe:	7b3b      	ldrb	r3, [r7, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d001      	beq.n	8002708 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e075      	b.n	80027f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002718:	e01d      	b.n	8002756 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d108      	bne.n	8002732 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002720:	7bbb      	ldrb	r3, [r7, #14]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d105      	bne.n	8002732 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002726:	7b7b      	ldrb	r3, [r7, #13]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d102      	bne.n	8002732 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800272c:	7b3b      	ldrb	r3, [r7, #12]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d001      	beq.n	8002736 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e05e      	b.n	80027f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_TIM_Encoder_Start_IT+0xc4>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b04      	cmp	r3, #4
 8002760:	d010      	beq.n	8002784 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002762:	e01f      	b.n	80027a4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2201      	movs	r2, #1
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fa8b 	bl	8002c88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0202 	orr.w	r2, r2, #2
 8002780:	60da      	str	r2, [r3, #12]
      break;
 8002782:	e02e      	b.n	80027e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2201      	movs	r2, #1
 800278a:	2104      	movs	r1, #4
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fa7b 	bl	8002c88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0204 	orr.w	r2, r2, #4
 80027a0:	60da      	str	r2, [r3, #12]
      break;
 80027a2:	e01e      	b.n	80027e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2201      	movs	r2, #1
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fa6b 	bl	8002c88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2201      	movs	r2, #1
 80027b8:	2104      	movs	r1, #4
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fa64 	bl	8002c88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0202 	orr.w	r2, r2, #2
 80027ce:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0204 	orr.w	r2, r2, #4
 80027de:	60da      	str	r2, [r3, #12]
      break;
 80027e0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b02      	cmp	r3, #2
 8002810:	d122      	bne.n	8002858 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b02      	cmp	r3, #2
 800281e:	d11b      	bne.n	8002858 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0202 	mvn.w	r2, #2
 8002828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f965 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002844:	e005      	b.n	8002852 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f957 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f968 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b04      	cmp	r3, #4
 8002864:	d122      	bne.n	80028ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b04      	cmp	r3, #4
 8002872:	d11b      	bne.n	80028ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0204 	mvn.w	r2, #4
 800287c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f93b 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002898:	e005      	b.n	80028a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f92d 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f93e 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d122      	bne.n	8002900 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d11b      	bne.n	8002900 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0208 	mvn.w	r2, #8
 80028d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2204      	movs	r2, #4
 80028d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f911 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 80028ec:	e005      	b.n	80028fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f903 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f914 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b10      	cmp	r3, #16
 800290c:	d122      	bne.n	8002954 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b10      	cmp	r3, #16
 800291a:	d11b      	bne.n	8002954 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0210 	mvn.w	r2, #16
 8002924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2208      	movs	r2, #8
 800292a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8e7 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002940:	e005      	b.n	800294e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f8d9 	bl	8002afa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f8ea 	bl	8002b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10e      	bne.n	8002980 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d107      	bne.n	8002980 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0201 	mvn.w	r2, #1
 8002978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fd ff40 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298a:	2b80      	cmp	r3, #128	; 0x80
 800298c:	d10e      	bne.n	80029ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d107      	bne.n	80029ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fa2c 	bl	8002e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ba:	d10e      	bne.n	80029da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c6:	2b80      	cmp	r3, #128	; 0x80
 80029c8:	d107      	bne.n	80029da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fa1f 	bl	8002e18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d10e      	bne.n	8002a06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	d107      	bne.n	8002a06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f898 	bl	8002b36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d10e      	bne.n	8002a32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	d107      	bne.n	8002a32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f06f 0220 	mvn.w	r2, #32
 8002a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f9df 	bl	8002df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a40:	d10f      	bne.n	8002a62 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a50:	d107      	bne.n	8002a62 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f9e5 	bl	8002e2c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a70:	d10f      	bne.n	8002a92 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a80:	d107      	bne.n	8002a92 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f9d7 	bl	8002e40 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ab0:	d107      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f9c9 	bl	8002e54 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002acc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ad0:	d10f      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002adc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ae0:	d107      	bne.n	8002af2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f9bb 	bl	8002e68 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a42      	ldr	r2, [pc, #264]	; (8002c68 <TIM_Base_SetConfig+0x11c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d013      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6a:	d00f      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a3f      	ldr	r2, [pc, #252]	; (8002c6c <TIM_Base_SetConfig+0x120>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00b      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a3e      	ldr	r2, [pc, #248]	; (8002c70 <TIM_Base_SetConfig+0x124>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d007      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a3d      	ldr	r2, [pc, #244]	; (8002c74 <TIM_Base_SetConfig+0x128>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d003      	beq.n	8002b8c <TIM_Base_SetConfig+0x40>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a3c      	ldr	r2, [pc, #240]	; (8002c78 <TIM_Base_SetConfig+0x12c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d108      	bne.n	8002b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a31      	ldr	r2, [pc, #196]	; (8002c68 <TIM_Base_SetConfig+0x11c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01f      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d01b      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a2e      	ldr	r2, [pc, #184]	; (8002c6c <TIM_Base_SetConfig+0x120>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d017      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2d      	ldr	r2, [pc, #180]	; (8002c70 <TIM_Base_SetConfig+0x124>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a2c      	ldr	r2, [pc, #176]	; (8002c74 <TIM_Base_SetConfig+0x128>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00f      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a2c      	ldr	r2, [pc, #176]	; (8002c7c <TIM_Base_SetConfig+0x130>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00b      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a2b      	ldr	r2, [pc, #172]	; (8002c80 <TIM_Base_SetConfig+0x134>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a2a      	ldr	r2, [pc, #168]	; (8002c84 <TIM_Base_SetConfig+0x138>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d003      	beq.n	8002be6 <TIM_Base_SetConfig+0x9a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <TIM_Base_SetConfig+0x12c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d108      	bne.n	8002bf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <TIM_Base_SetConfig+0x11c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d013      	beq.n	8002c4c <TIM_Base_SetConfig+0x100>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a13      	ldr	r2, [pc, #76]	; (8002c74 <TIM_Base_SetConfig+0x128>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00f      	beq.n	8002c4c <TIM_Base_SetConfig+0x100>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <TIM_Base_SetConfig+0x130>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00b      	beq.n	8002c4c <TIM_Base_SetConfig+0x100>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <TIM_Base_SetConfig+0x134>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d007      	beq.n	8002c4c <TIM_Base_SetConfig+0x100>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a11      	ldr	r2, [pc, #68]	; (8002c84 <TIM_Base_SetConfig+0x138>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d003      	beq.n	8002c4c <TIM_Base_SetConfig+0x100>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <TIM_Base_SetConfig+0x12c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d103      	bne.n	8002c54 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	615a      	str	r2, [r3, #20]
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40013400 	.word	0x40013400
 8002c78:	40015000 	.word	0x40015000
 8002c7c:	40014000 	.word	0x40014000
 8002c80:	40014400 	.word	0x40014400
 8002c84:	40014800 	.word	0x40014800

08002c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1a      	ldr	r2, [r3, #32]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	401a      	ands	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a1a      	ldr	r2, [r3, #32]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	621a      	str	r2, [r3, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e06f      	b.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a31      	ldr	r2, [pc, #196]	; (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d009      	beq.n	8002d2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d004      	beq.n	8002d2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2e      	ldr	r2, [pc, #184]	; (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d108      	bne.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d01d      	beq.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6c:	d018      	beq.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1c      	ldr	r2, [pc, #112]	; (8002de4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d013      	beq.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00e      	beq.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d009      	beq.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a16      	ldr	r2, [pc, #88]	; (8002dec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a11      	ldr	r2, [pc, #68]	; (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d10c      	bne.n	8002dba <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002da6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	40012c00 	.word	0x40012c00
 8002ddc:	40013400 	.word	0x40013400
 8002de0:	40015000 	.word	0x40015000
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800
 8002dec:	40014000 	.word	0x40014000

08002df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f103 0208 	add.w	r2, r3, #8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f103 0208 	add.w	r2, r3, #8
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f103 0208 	add.w	r2, r3, #8
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	601a      	str	r2, [r3, #0]
}
 8002f12:	bf00      	nop
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d103      	bne.n	8002f3e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e00c      	b.n	8002f58 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3308      	adds	r3, #8
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	e002      	b.n	8002f4c <vListInsert+0x2e>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d2f6      	bcs.n	8002f46 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	601a      	str	r2, [r3, #0]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6892      	ldr	r2, [r2, #8]
 8002fa6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6852      	ldr	r2, [r2, #4]
 8002fb0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d103      	bne.n	8002fc4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	1e5a      	subs	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <xQueueGenericReset+0x2a>
        __asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	60bb      	str	r3, [r7, #8]
    }
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800300e:	f002 fc29 	bl	8005864 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	68f9      	ldr	r1, [r7, #12]
 800301c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	441a      	add	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303e:	3b01      	subs	r3, #1
 8003040:	68f9      	ldr	r1, [r7, #12]
 8003042:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	441a      	add	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	22ff      	movs	r2, #255	; 0xff
 8003052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	22ff      	movs	r2, #255	; 0xff
 800305a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d114      	bne.n	800308e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01a      	beq.n	80030a2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3310      	adds	r3, #16
 8003070:	4618      	mov	r0, r3
 8003072:	f001 fb5b 	bl	800472c <xTaskRemoveFromEventList>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d012      	beq.n	80030a2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <xQueueGenericReset+0xcc>)
 800307e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	e009      	b.n	80030a2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3310      	adds	r3, #16
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fef2 	bl	8002e7c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3324      	adds	r3, #36	; 0x24
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff feed 	bl	8002e7c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80030a2:	f002 fc0f 	bl	80058c4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80030a6:	2301      	movs	r3, #1
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	e000ed04 	.word	0xe000ed04

080030b4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08c      	sub	sp, #48	; 0x30
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	4613      	mov	r3, r2
 80030c0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <xQueueGenericCreate+0x2a>
        __asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	61bb      	str	r3, [r7, #24]
    }
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <xQueueGenericCreate+0x48>
 80030ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d101      	bne.n	8003100 <xQueueGenericCreate+0x4c>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <xQueueGenericCreate+0x4e>
 8003100:	2300      	movs	r3, #0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <xQueueGenericCreate+0x68>
        __asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	617b      	str	r3, [r7, #20]
    }
 8003118:	bf00      	nop
 800311a:	e7fe      	b.n	800311a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003122:	d90a      	bls.n	800313a <xQueueGenericCreate+0x86>
        __asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	613b      	str	r3, [r7, #16]
    }
 8003136:	bf00      	nop
 8003138:	e7fe      	b.n	8003138 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	3350      	adds	r3, #80	; 0x50
 800313e:	4618      	mov	r0, r3
 8003140:	f002 fcbc 	bl	8005abc <pvPortMalloc>
 8003144:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00d      	beq.n	8003168 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	3350      	adds	r3, #80	; 0x50
 8003154:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003156:	79fa      	ldrb	r2, [r7, #7]
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f805 	bl	8003172 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003168:	6a3b      	ldr	r3, [r7, #32]
    }
 800316a:	4618      	mov	r0, r3
 800316c:	3728      	adds	r7, #40	; 0x28
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d103      	bne.n	800318e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e002      	b.n	8003194 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031a0:	2101      	movs	r1, #1
 80031a2:	69b8      	ldr	r0, [r7, #24]
 80031a4:	f7ff ff1e 	bl	8002fe4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	68f9      	ldr	r1, [r7, #12]
 80031b6:	2073      	movs	r0, #115	; 0x73
 80031b8:	f004 fbaa 	bl	8007910 <SEGGER_SYSVIEW_RecordU32x3>
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b090      	sub	sp, #64	; 0x40
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031d2:	2300      	movs	r3, #0
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <xQueueGenericSend+0x32>
        __asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d103      	bne.n	8003204 <xQueueGenericSend+0x40>
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <xQueueGenericSend+0x44>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <xQueueGenericSend+0x46>
 8003208:	2300      	movs	r3, #0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <xQueueGenericSend+0x60>
        __asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003220:	bf00      	nop
 8003222:	e7fe      	b.n	8003222 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d103      	bne.n	8003232 <xQueueGenericSend+0x6e>
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <xQueueGenericSend+0x72>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <xQueueGenericSend+0x74>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <xQueueGenericSend+0x8e>
        __asm volatile
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	623b      	str	r3, [r7, #32]
    }
 800324e:	bf00      	nop
 8003250:	e7fe      	b.n	8003250 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003252:	f001 fc0b 	bl	8004a6c <xTaskGetSchedulerState>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <xQueueGenericSend+0x9e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <xQueueGenericSend+0xa2>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <xQueueGenericSend+0xa4>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xQueueGenericSend+0xbe>
        __asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	61fb      	str	r3, [r7, #28]
    }
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003282:	f002 faef 	bl	8005864 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	429a      	cmp	r2, r3
 8003290:	d302      	bcc.n	8003298 <xQueueGenericSend+0xd4>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d136      	bne.n	8003306 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	4618      	mov	r0, r3
 800329c:	f005 f8c6 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	460b      	mov	r3, r1
 80032aa:	4601      	mov	r1, r0
 80032ac:	205a      	movs	r0, #90	; 0x5a
 80032ae:	f004 fba5 	bl	80079fc <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032b8:	f000 fc7c 	bl	8003bb4 <prvCopyDataToQueue>
 80032bc:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d010      	beq.n	80032e8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	3324      	adds	r3, #36	; 0x24
 80032ca:	4618      	mov	r0, r3
 80032cc:	f001 fa2e 	bl	800472c <xTaskRemoveFromEventList>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d013      	beq.n	80032fe <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80032d6:	4b4d      	ldr	r3, [pc, #308]	; (800340c <xQueueGenericSend+0x248>)
 80032d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	e00a      	b.n	80032fe <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80032ee:	4b47      	ldr	r3, [pc, #284]	; (800340c <xQueueGenericSend+0x248>)
 80032f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80032fe:	f002 fae1 	bl	80058c4 <vPortExitCritical>
                return pdPASS;
 8003302:	2301      	movs	r3, #1
 8003304:	e07d      	b.n	8003402 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d110      	bne.n	800332e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800330c:	f002 fada 	bl	80058c4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	4618      	mov	r0, r3
 8003314:	f005 f88a 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	460b      	mov	r3, r1
 8003322:	4601      	mov	r1, r0
 8003324:	205a      	movs	r0, #90	; 0x5a
 8003326:	f004 fb69 	bl	80079fc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800332a:	2300      	movs	r3, #0
 800332c:	e069      	b.n	8003402 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800332e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003330:	2b00      	cmp	r3, #0
 8003332:	d106      	bne.n	8003342 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4618      	mov	r0, r3
 800333a:	f001 fa5d 	bl	80047f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800333e:	2301      	movs	r3, #1
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003342:	f002 fabf 	bl	80058c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003346:	f000 ffa9 	bl	800429c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800334a:	f002 fa8b 	bl	8005864 <vPortEnterCritical>
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003354:	b25b      	sxtb	r3, r3
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d103      	bne.n	8003364 <xQueueGenericSend+0x1a0>
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800336a:	b25b      	sxtb	r3, r3
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d103      	bne.n	800337a <xQueueGenericSend+0x1b6>
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800337a:	f002 faa3 	bl	80058c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800337e:	1d3a      	adds	r2, r7, #4
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f001 fa4c 	bl	8004824 <xTaskCheckForTimeOut>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d124      	bne.n	80033dc <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003394:	f000 fd06 	bl	8003da4 <prvIsQueueFull>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d018      	beq.n	80033d0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	3310      	adds	r3, #16
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 f96e 	bl	8004688 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80033ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ae:	f000 fc91 	bl	8003cd4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80033b2:	f000 ff81 	bl	80042b8 <xTaskResumeAll>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f af62 	bne.w	8003282 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <xQueueGenericSend+0x248>)
 80033c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	e758      	b.n	8003282 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80033d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033d2:	f000 fc7f 	bl	8003cd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80033d6:	f000 ff6f 	bl	80042b8 <xTaskResumeAll>
 80033da:	e752      	b.n	8003282 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80033dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033de:	f000 fc79 	bl	8003cd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80033e2:	f000 ff69 	bl	80042b8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	4618      	mov	r0, r3
 80033ea:	f005 f81f 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	460b      	mov	r3, r1
 80033f8:	4601      	mov	r1, r0
 80033fa:	205a      	movs	r0, #90	; 0x5a
 80033fc:	f004 fafe 	bl	80079fc <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8003400:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003402:	4618      	mov	r0, r3
 8003404:	3738      	adds	r7, #56	; 0x38
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	e000ed04 	.word	0xe000ed04

08003410 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b090      	sub	sp, #64	; 0x40
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800343a:	bf00      	nop
 800343c:	e7fe      	b.n	800343c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d103      	bne.n	800344c <xQueueGenericSendFromISR+0x3c>
 8003444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <xQueueGenericSendFromISR+0x40>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <xQueueGenericSendFromISR+0x42>
 8003450:	2300      	movs	r3, #0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10a      	bne.n	800346c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003468:	bf00      	nop
 800346a:	e7fe      	b.n	800346a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d103      	bne.n	800347a <xQueueGenericSendFromISR+0x6a>
 8003472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <xQueueGenericSendFromISR+0x6e>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <xQueueGenericSendFromISR+0x70>
 800347e:	2300      	movs	r3, #0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	623b      	str	r3, [r7, #32]
    }
 8003496:	bf00      	nop
 8003498:	e7fe      	b.n	8003498 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800349a:	f002 facf 	bl	8005a3c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800349e:	f3ef 8211 	mrs	r2, BASEPRI
 80034a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	61fa      	str	r2, [r7, #28]
 80034b4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80034b6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034b8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d302      	bcc.n	80034cc <xQueueGenericSendFromISR+0xbc>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d148      	bne.n	800355e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80034cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	4618      	mov	r0, r3
 80034e0:	f004 ffa4 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 80034e4:	4601      	mov	r1, r0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	461a      	mov	r2, r3
 80034ea:	2060      	movs	r0, #96	; 0x60
 80034ec:	f004 f9b6 	bl	800785c <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034f6:	f000 fb5d 	bl	8003bb4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80034fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d112      	bne.n	800352a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d025      	beq.n	8003558 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800350c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350e:	3324      	adds	r3, #36	; 0x24
 8003510:	4618      	mov	r0, r3
 8003512:	f001 f90b 	bl	800472c <xTaskRemoveFromEventList>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01d      	beq.n	8003558 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01a      	beq.n	8003558 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e016      	b.n	8003558 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800352a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800352e:	2b7f      	cmp	r3, #127	; 0x7f
 8003530:	d10a      	bne.n	8003548 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	617b      	str	r3, [r7, #20]
    }
 8003544:	bf00      	nop
 8003546:	e7fe      	b.n	8003546 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003548:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800354c:	3301      	adds	r3, #1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	b25a      	sxtb	r2, r3
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003558:	2301      	movs	r3, #1
 800355a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800355c:	e00b      	b.n	8003576 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800355e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003560:	4618      	mov	r0, r3
 8003562:	f004 ff63 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 8003566:	4601      	mov	r1, r0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	461a      	mov	r2, r3
 800356c:	2060      	movs	r0, #96	; 0x60
 800356e:	f004 f975 	bl	800785c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8003572:	2300      	movs	r3, #0
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003580:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003584:	4618      	mov	r0, r3
 8003586:	3740      	adds	r7, #64	; 0x40
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08e      	sub	sp, #56	; 0x38
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <xQueueGiveFromISR+0x2a>
        __asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	623b      	str	r3, [r7, #32]
    }
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80035b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <xQueueGiveFromISR+0x48>
        __asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	61fb      	str	r3, [r7, #28]
    }
 80035d0:	bf00      	nop
 80035d2:	e7fe      	b.n	80035d2 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <xQueueGiveFromISR+0x58>
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <xQueueGiveFromISR+0x5c>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <xQueueGiveFromISR+0x5e>
 80035e8:	2300      	movs	r3, #0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <xQueueGiveFromISR+0x78>
        __asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	61bb      	str	r3, [r7, #24]
    }
 8003600:	bf00      	nop
 8003602:	e7fe      	b.n	8003602 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003604:	f002 fa1a 	bl	8005a3c <vPortValidateInterruptPriority>
        __asm volatile
 8003608:	f3ef 8211 	mrs	r2, BASEPRI
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	617a      	str	r2, [r7, #20]
 800361e:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8003620:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003630:	429a      	cmp	r2, r3
 8003632:	d244      	bcs.n	80036be <xQueueGiveFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800363a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	4618      	mov	r0, r3
 8003642:	f004 fef3 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 8003646:	4601      	mov	r1, r0
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	2060      	movs	r0, #96	; 0x60
 800364e:	f004 f905 	bl	800785c <SEGGER_SYSVIEW_RecordU32x2>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800365a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800365e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003662:	d112      	bne.n	800368a <xQueueGiveFromISR+0xfe>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	2b00      	cmp	r3, #0
 800366a:	d025      	beq.n	80036b8 <xQueueGiveFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	3324      	adds	r3, #36	; 0x24
 8003670:	4618      	mov	r0, r3
 8003672:	f001 f85b 	bl	800472c <xTaskRemoveFromEventList>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01d      	beq.n	80036b8 <xQueueGiveFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01a      	beq.n	80036b8 <xQueueGiveFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2201      	movs	r2, #1
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e016      	b.n	80036b8 <xQueueGiveFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800368a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800368e:	2b7f      	cmp	r3, #127	; 0x7f
 8003690:	d10a      	bne.n	80036a8 <xQueueGiveFromISR+0x11c>
        __asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	60fb      	str	r3, [r7, #12]
    }
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <xQueueGiveFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ac:	3301      	adds	r3, #1
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	b25a      	sxtb	r2, r3
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80036b8:	2301      	movs	r3, #1
 80036ba:	637b      	str	r3, [r7, #52]	; 0x34
 80036bc:	e00b      	b.n	80036d6 <xQueueGiveFromISR+0x14a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	4618      	mov	r0, r3
 80036c2:	f004 feb3 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 80036c6:	4601      	mov	r1, r0
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	2060      	movs	r0, #96	; 0x60
 80036ce:	f004 f8c5 	bl	800785c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f383 8811 	msr	BASEPRI, r3
    }
 80036e0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80036e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3738      	adds	r7, #56	; 0x38
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b08f      	sub	sp, #60	; 0x3c
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10a      	bne.n	800371c <xQueueReceive+0x30>
        __asm volatile
 8003706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370a:	f383 8811 	msr	BASEPRI, r3
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	623b      	str	r3, [r7, #32]
    }
 8003718:	bf00      	nop
 800371a:	e7fe      	b.n	800371a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d103      	bne.n	800372a <xQueueReceive+0x3e>
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <xQueueReceive+0x42>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <xQueueReceive+0x44>
 800372e:	2300      	movs	r3, #0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <xQueueReceive+0x5e>
        __asm volatile
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	61fb      	str	r3, [r7, #28]
    }
 8003746:	bf00      	nop
 8003748:	e7fe      	b.n	8003748 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800374a:	f001 f98f 	bl	8004a6c <xTaskGetSchedulerState>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <xQueueReceive+0x6e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <xQueueReceive+0x72>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <xQueueReceive+0x74>
 800375e:	2300      	movs	r3, #0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <xQueueReceive+0x8e>
        __asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	61bb      	str	r3, [r7, #24]
    }
 8003776:	bf00      	nop
 8003778:	e7fe      	b.n	8003778 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800377a:	f002 f873 	bl	8005864 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	2b00      	cmp	r3, #0
 8003788:	d02f      	beq.n	80037ea <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800378a:	68b9      	ldr	r1, [r7, #8]
 800378c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800378e:	f000 fa7b 	bl	8003c88 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	4618      	mov	r0, r3
 8003796:	f004 fe49 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 800379a:	4604      	mov	r4, r0
 800379c:	2000      	movs	r0, #0
 800379e:	f004 fe45 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 80037a2:	4602      	mov	r2, r0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2101      	movs	r1, #1
 80037a8:	9100      	str	r1, [sp, #0]
 80037aa:	4621      	mov	r1, r4
 80037ac:	205c      	movs	r0, #92	; 0x5c
 80037ae:	f004 f925 	bl	80079fc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	1e5a      	subs	r2, r3, #1
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00f      	beq.n	80037e2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	3310      	adds	r3, #16
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 ffb0 	bl	800472c <xTaskRemoveFromEventList>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80037d2:	4b4d      	ldr	r3, [pc, #308]	; (8003908 <xQueueReceive+0x21c>)
 80037d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80037e2:	f002 f86f 	bl	80058c4 <vPortExitCritical>
                return pdPASS;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e08a      	b.n	8003900 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d113      	bne.n	8003818 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80037f0:	f002 f868 	bl	80058c4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	4618      	mov	r0, r3
 80037f8:	f004 fe18 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 80037fc:	4604      	mov	r4, r0
 80037fe:	2000      	movs	r0, #0
 8003800:	f004 fe14 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 8003804:	4602      	mov	r2, r0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2101      	movs	r1, #1
 800380a:	9100      	str	r1, [sp, #0]
 800380c:	4621      	mov	r1, r4
 800380e:	205c      	movs	r0, #92	; 0x5c
 8003810:	f004 f8f4 	bl	80079fc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003814:	2300      	movs	r3, #0
 8003816:	e073      	b.n	8003900 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800381e:	f107 0310 	add.w	r3, r7, #16
 8003822:	4618      	mov	r0, r3
 8003824:	f000 ffe8 	bl	80047f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800382c:	f002 f84a 	bl	80058c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003830:	f000 fd34 	bl	800429c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003834:	f002 f816 	bl	8005864 <vPortEnterCritical>
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800383e:	b25b      	sxtb	r3, r3
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d103      	bne.n	800384e <xQueueReceive+0x162>
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003854:	b25b      	sxtb	r3, r3
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d103      	bne.n	8003864 <xQueueReceive+0x178>
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003864:	f002 f82e 	bl	80058c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003868:	1d3a      	adds	r2, r7, #4
 800386a:	f107 0310 	add.w	r3, r7, #16
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f000 ffd7 	bl	8004824 <xTaskCheckForTimeOut>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d124      	bne.n	80038c6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800387c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800387e:	f000 fa7b 	bl	8003d78 <prvIsQueueEmpty>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d018      	beq.n	80038ba <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	3324      	adds	r3, #36	; 0x24
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fef9 	bl	8004688 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003898:	f000 fa1c 	bl	8003cd4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800389c:	f000 fd0c 	bl	80042b8 <xTaskResumeAll>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f47f af69 	bne.w	800377a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80038a8:	4b17      	ldr	r3, [pc, #92]	; (8003908 <xQueueReceive+0x21c>)
 80038aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	e75f      	b.n	800377a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80038ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038bc:	f000 fa0a 	bl	8003cd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80038c0:	f000 fcfa 	bl	80042b8 <xTaskResumeAll>
 80038c4:	e759      	b.n	800377a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80038c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c8:	f000 fa04 	bl	8003cd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80038cc:	f000 fcf4 	bl	80042b8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038d2:	f000 fa51 	bl	8003d78 <prvIsQueueEmpty>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f43f af4e 	beq.w	800377a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	4618      	mov	r0, r3
 80038e2:	f004 fda3 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 80038e6:	4604      	mov	r4, r0
 80038e8:	2000      	movs	r0, #0
 80038ea:	f004 fd9f 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 80038ee:	4602      	mov	r2, r0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2101      	movs	r1, #1
 80038f4:	9100      	str	r1, [sp, #0]
 80038f6:	4621      	mov	r1, r4
 80038f8:	205c      	movs	r0, #92	; 0x5c
 80038fa:	f004 f87f 	bl	80079fc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80038fe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003900:	4618      	mov	r0, r3
 8003902:	3734      	adds	r7, #52	; 0x34
 8003904:	46bd      	mov	sp, r7
 8003906:	bd90      	pop	{r4, r7, pc}
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b091      	sub	sp, #68	; 0x44
 8003910:	af02      	add	r7, sp, #8
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003916:	2300      	movs	r3, #0
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800391e:	2300      	movs	r3, #0
 8003920:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	623b      	str	r3, [r7, #32]
    }
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	61fb      	str	r3, [r7, #28]
    }
 8003958:	bf00      	nop
 800395a:	e7fe      	b.n	800395a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800395c:	f001 f886 	bl	8004a6c <xTaskGetSchedulerState>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <xQueueSemaphoreTake+0x60>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <xQueueSemaphoreTake+0x64>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <xQueueSemaphoreTake+0x66>
 8003970:	2300      	movs	r3, #0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	61bb      	str	r3, [r7, #24]
    }
 8003988:	bf00      	nop
 800398a:	e7fe      	b.n	800398a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800398c:	f001 ff6a 	bl	8005864 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	d034      	beq.n	8003a06 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800399c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399e:	4618      	mov	r0, r3
 80039a0:	f004 fd44 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 80039a4:	4604      	mov	r4, r0
 80039a6:	2000      	movs	r0, #0
 80039a8:	f004 fd40 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 80039ac:	4602      	mov	r2, r0
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2101      	movs	r1, #1
 80039b2:	9100      	str	r1, [sp, #0]
 80039b4:	4621      	mov	r1, r4
 80039b6:	205c      	movs	r0, #92	; 0x5c
 80039b8:	f004 f820 	bl	80079fc <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	1e5a      	subs	r2, r3, #1
 80039c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80039cc:	f001 f9fe 	bl	8004dcc <pvTaskIncrementMutexHeldCount>
 80039d0:	4602      	mov	r2, r0
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00f      	beq.n	80039fe <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	3310      	adds	r3, #16
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fea2 	bl	800472c <xTaskRemoveFromEventList>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80039ee:	4b64      	ldr	r3, [pc, #400]	; (8003b80 <xQueueSemaphoreTake+0x274>)
 80039f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80039fe:	f001 ff61 	bl	80058c4 <vPortExitCritical>
                return pdPASS;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0b7      	b.n	8003b76 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d121      	bne.n	8003a50 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	617b      	str	r3, [r7, #20]
    }
 8003a24:	bf00      	nop
 8003a26:	e7fe      	b.n	8003a26 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003a28:	f001 ff4c 	bl	80058c4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f004 fcfc 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 8003a34:	4604      	mov	r4, r0
 8003a36:	2000      	movs	r0, #0
 8003a38:	f004 fcf8 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2101      	movs	r1, #1
 8003a42:	9100      	str	r1, [sp, #0]
 8003a44:	4621      	mov	r1, r4
 8003a46:	205c      	movs	r0, #92	; 0x5c
 8003a48:	f003 ffd8 	bl	80079fc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e092      	b.n	8003b76 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003a56:	f107 030c 	add.w	r3, r7, #12
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fecc 	bl	80047f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003a64:	f001 ff2e 	bl	80058c4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003a68:	f000 fc18 	bl	800429c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003a6c:	f001 fefa 	bl	8005864 <vPortEnterCritical>
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a76:	b25b      	sxtb	r3, r3
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d103      	bne.n	8003a86 <xQueueSemaphoreTake+0x17a>
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d103      	bne.n	8003a9c <xQueueSemaphoreTake+0x190>
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a9c:	f001 ff12 	bl	80058c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aa0:	463a      	mov	r2, r7
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 febb 	bl	8004824 <xTaskCheckForTimeOut>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d132      	bne.n	8003b1a <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ab6:	f000 f95f 	bl	8003d78 <prvIsQueueEmpty>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d026      	beq.n	8003b0e <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8003ac8:	f001 fecc 	bl	8005864 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 ffe9 	bl	8004aa8 <xTaskPriorityInherit>
 8003ad6:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003ad8:	f001 fef4 	bl	80058c4 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ade:	3324      	adds	r3, #36	; 0x24
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fdcf 	bl	8004688 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003aea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003aec:	f000 f8f2 	bl	8003cd4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003af0:	f000 fbe2 	bl	80042b8 <xTaskResumeAll>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f47f af48 	bne.w	800398c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8003afc:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <xQueueSemaphoreTake+0x274>)
 8003afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	e73e      	b.n	800398c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003b0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b10:	f000 f8e0 	bl	8003cd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003b14:	f000 fbd0 	bl	80042b8 <xTaskResumeAll>
 8003b18:	e738      	b.n	800398c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b1c:	f000 f8da 	bl	8003cd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003b20:	f000 fbca 	bl	80042b8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b26:	f000 f927 	bl	8003d78 <prvIsQueueEmpty>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f43f af2d 	beq.w	800398c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00d      	beq.n	8003b54 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8003b38:	f001 fe94 	bl	8005864 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b3e:	f000 f821 	bl	8003b84 <prvGetDisinheritPriorityAfterTimeout>
 8003b42:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 f8a6 	bl	8004c9c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003b50:	f001 feb8 	bl	80058c4 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b56:	4618      	mov	r0, r3
 8003b58:	f004 fc68 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	2000      	movs	r0, #0
 8003b60:	f004 fc64 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 8003b64:	4602      	mov	r2, r0
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2101      	movs	r1, #1
 8003b6a:	9100      	str	r1, [sp, #0]
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	205c      	movs	r0, #92	; 0x5c
 8003b70:	f003 ff44 	bl	80079fc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003b74:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	373c      	adds	r7, #60	; 0x3c
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd90      	pop	{r4, r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	e000ed04 	.word	0xe000ed04

08003b84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d006      	beq.n	8003ba2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1c3 0305 	rsb	r3, r3, #5
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	e001      	b.n	8003ba6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
    }
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d14d      	bne.n	8003c76 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 ffdc 	bl	8004b9c <xTaskPriorityDisinherit>
 8003be4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	e043      	b.n	8003c76 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d119      	bne.n	8003c28 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6858      	ldr	r0, [r3, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	f004 fdd2 	bl	80087a8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	441a      	add	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d32b      	bcc.n	8003c76 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	e026      	b.n	8003c76 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	68d8      	ldr	r0, [r3, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	461a      	mov	r2, r3
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	f004 fdb8 	bl	80087a8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	425b      	negs	r3, r3
 8003c42:	441a      	add	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d207      	bcs.n	8003c64 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	425b      	negs	r3, r3
 8003c5e:	441a      	add	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d105      	bne.n	8003c76 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003c7e:	697b      	ldr	r3, [r7, #20]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d018      	beq.n	8003ccc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	441a      	add	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d303      	bcc.n	8003cbc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68d9      	ldr	r1, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6838      	ldr	r0, [r7, #0]
 8003cc8:	f004 fd6e 	bl	80087a8 <memcpy>
    }
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003cdc:	f001 fdc2 	bl	8005864 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ce6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ce8:	e011      	b.n	8003d0e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d012      	beq.n	8003d18 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3324      	adds	r3, #36	; 0x24
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fd18 	bl	800472c <xTaskRemoveFromEventList>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003d02:	f000 fdf5 	bl	80048f0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	dce9      	bgt.n	8003cea <prvUnlockQueue+0x16>
 8003d16:	e000      	b.n	8003d1a <prvUnlockQueue+0x46>
                        break;
 8003d18:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	22ff      	movs	r2, #255	; 0xff
 8003d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003d22:	f001 fdcf 	bl	80058c4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003d26:	f001 fd9d 	bl	8005864 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d30:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d32:	e011      	b.n	8003d58 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d012      	beq.n	8003d62 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3310      	adds	r3, #16
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fcf3 	bl	800472c <xTaskRemoveFromEventList>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003d4c:	f000 fdd0 	bl	80048f0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003d50:	7bbb      	ldrb	r3, [r7, #14]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	dce9      	bgt.n	8003d34 <prvUnlockQueue+0x60>
 8003d60:	e000      	b.n	8003d64 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003d62:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	22ff      	movs	r2, #255	; 0xff
 8003d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003d6c:	f001 fdaa 	bl	80058c4 <vPortExitCritical>
}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003d80:	f001 fd70 	bl	8005864 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d102      	bne.n	8003d92 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e001      	b.n	8003d96 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003d96:	f001 fd95 	bl	80058c4 <vPortExitCritical>

    return xReturn;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003dac:	f001 fd5a 	bl	8005864 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d102      	bne.n	8003dc2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	e001      	b.n	8003dc6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003dc6:	f001 fd7d 	bl	80058c4 <vPortExitCritical>

    return xReturn;
 8003dca:	68fb      	ldr	r3, [r7, #12]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	e01e      	b.n	8003e22 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003de4:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <vQueueAddToRegistry+0x60>)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d115      	bne.n	8003e1c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003df0:	4910      	ldr	r1, [pc, #64]	; (8003e34 <vQueueAddToRegistry+0x60>)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003dfa:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <vQueueAddToRegistry+0x60>)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f004 fb0f 	bl	800842c <SEGGER_SYSVIEW_ShrinkId>
 8003e0e:	4601      	mov	r1, r0
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	2071      	movs	r0, #113	; 0x71
 8003e16:	f003 fd21 	bl	800785c <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003e1a:	e006      	b.n	8003e2a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b07      	cmp	r3, #7
 8003e26:	d9dd      	bls.n	8003de4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000150 	.word	0x20000150

08003e38 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003e48:	f001 fd0c 	bl	8005864 <vPortEnterCritical>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e52:	b25b      	sxtb	r3, r3
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d103      	bne.n	8003e62 <vQueueWaitForMessageRestricted+0x2a>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e68:	b25b      	sxtb	r3, r3
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d103      	bne.n	8003e78 <vQueueWaitForMessageRestricted+0x40>
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e78:	f001 fd24 	bl	80058c4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	3324      	adds	r3, #36	; 0x24
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fc1f 	bl	80046d0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003e92:	6978      	ldr	r0, [r7, #20]
 8003e94:	f7ff ff1e 	bl	8003cd4 <prvUnlockQueue>
    }
 8003e98:	bf00      	nop
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08c      	sub	sp, #48	; 0x30
 8003ea4:	af04      	add	r7, sp, #16
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 fe01 	bl	8005abc <pvPortMalloc>
 8003eba:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00e      	beq.n	8003ee0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ec2:	2058      	movs	r0, #88	; 0x58
 8003ec4:	f001 fdfa 	bl	8005abc <pvPortMalloc>
 8003ec8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ed6:	e005      	b.n	8003ee4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003ed8:	6978      	ldr	r0, [r7, #20]
 8003eda:	f001 fecf 	bl	8005c7c <vPortFree>
 8003ede:	e001      	b.n	8003ee4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d013      	beq.n	8003f12 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	2300      	movs	r3, #0
 8003eee:	9303      	str	r3, [sp, #12]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	9302      	str	r3, [sp, #8]
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f80e 	bl	8003f22 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003f06:	69f8      	ldr	r0, [r7, #28]
 8003f08:	f000 f8a2 	bl	8004050 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	e002      	b.n	8003f18 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295
 8003f16:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003f18:	69bb      	ldr	r3, [r7, #24]
    }
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3720      	adds	r7, #32
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b088      	sub	sp, #32
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	21a5      	movs	r1, #165	; 0xa5
 8003f3c:	f004 fc42 	bl	80087c4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f023 0307 	bic.w	r3, r3, #7
 8003f58:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <prvInitialiseNewTask+0x58>
        __asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	617b      	str	r3, [r7, #20]
    }
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01f      	beq.n	8003fc0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	e012      	b.n	8003fac <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	7819      	ldrb	r1, [r3, #0]
 8003f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	4413      	add	r3, r2
 8003f94:	3334      	adds	r3, #52	; 0x34
 8003f96:	460a      	mov	r2, r1
 8003f98:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d006      	beq.n	8003fb4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b09      	cmp	r3, #9
 8003fb0:	d9e9      	bls.n	8003f86 <prvInitialiseNewTask+0x64>
 8003fb2:	e000      	b.n	8003fb6 <prvInitialiseNewTask+0x94>
            {
                break;
 8003fb4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003fbe:	e003      	b.n	8003fc8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d901      	bls.n	8003fd2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fce:	2304      	movs	r3, #4
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fdc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe ff67 	bl	8002ebc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	3318      	adds	r3, #24
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe ff62 	bl	8002ebc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	f1c3 0205 	rsb	r2, r3, #5
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	3350      	adds	r3, #80	; 0x50
 8004012:	2204      	movs	r2, #4
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f004 fbd4 	bl	80087c4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	3354      	adds	r3, #84	; 0x54
 8004020:	2201      	movs	r2, #1
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f004 fbcd 	bl	80087c4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	68f9      	ldr	r1, [r7, #12]
 800402e:	69b8      	ldr	r0, [r7, #24]
 8004030:	f001 fa6a 	bl	8005508 <pxPortInitialiseStack>
 8004034:	4602      	mov	r2, r0
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004044:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004046:	bf00      	nop
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004050:	b5b0      	push	{r4, r5, r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af02      	add	r7, sp, #8
 8004056:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004058:	f001 fc04 	bl	8005864 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800405c:	4b3b      	ldr	r3, [pc, #236]	; (800414c <prvAddNewTaskToReadyList+0xfc>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3301      	adds	r3, #1
 8004062:	4a3a      	ldr	r2, [pc, #232]	; (800414c <prvAddNewTaskToReadyList+0xfc>)
 8004064:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004066:	4b3a      	ldr	r3, [pc, #232]	; (8004150 <prvAddNewTaskToReadyList+0x100>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800406e:	4a38      	ldr	r2, [pc, #224]	; (8004150 <prvAddNewTaskToReadyList+0x100>)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004074:	4b35      	ldr	r3, [pc, #212]	; (800414c <prvAddNewTaskToReadyList+0xfc>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d110      	bne.n	800409e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800407c:	f000 fc5c 	bl	8004938 <prvInitialiseTaskLists>
 8004080:	e00d      	b.n	800409e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004082:	4b34      	ldr	r3, [pc, #208]	; (8004154 <prvAddNewTaskToReadyList+0x104>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800408a:	4b31      	ldr	r3, [pc, #196]	; (8004150 <prvAddNewTaskToReadyList+0x100>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	429a      	cmp	r2, r3
 8004096:	d802      	bhi.n	800409e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004098:	4a2d      	ldr	r2, [pc, #180]	; (8004150 <prvAddNewTaskToReadyList+0x100>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800409e:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <prvAddNewTaskToReadyList+0x108>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3301      	adds	r3, #1
 80040a4:	4a2c      	ldr	r2, [pc, #176]	; (8004158 <prvAddNewTaskToReadyList+0x108>)
 80040a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80040a8:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <prvAddNewTaskToReadyList+0x108>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d016      	beq.n	80040e4 <prvAddNewTaskToReadyList+0x94>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f004 f891 	bl	80081e0 <SEGGER_SYSVIEW_OnTaskCreate>
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	461d      	mov	r5, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461c      	mov	r4, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	1ae3      	subs	r3, r4, r3
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	462b      	mov	r3, r5
 80040e0:	f001 ff9a 	bl	8006018 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f004 f8fe 	bl	80082e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	2201      	movs	r2, #1
 80040f2:	409a      	lsls	r2, r3
 80040f4:	4b19      	ldr	r3, [pc, #100]	; (800415c <prvAddNewTaskToReadyList+0x10c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	4a18      	ldr	r2, [pc, #96]	; (800415c <prvAddNewTaskToReadyList+0x10c>)
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4a15      	ldr	r2, [pc, #84]	; (8004160 <prvAddNewTaskToReadyList+0x110>)
 800410c:	441a      	add	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3304      	adds	r3, #4
 8004112:	4619      	mov	r1, r3
 8004114:	4610      	mov	r0, r2
 8004116:	f7fe fede 	bl	8002ed6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800411a:	f001 fbd3 	bl	80058c4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800411e:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <prvAddNewTaskToReadyList+0x104>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00e      	beq.n	8004144 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <prvAddNewTaskToReadyList+0x100>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	429a      	cmp	r2, r3
 8004132:	d207      	bcs.n	8004144 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <prvAddNewTaskToReadyList+0x114>)
 8004136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bdb0      	pop	{r4, r5, r7, pc}
 800414c:	20000268 	.word	0x20000268
 8004150:	20000190 	.word	0x20000190
 8004154:	20000274 	.word	0x20000274
 8004158:	20000284 	.word	0x20000284
 800415c:	20000270 	.word	0x20000270
 8004160:	20000194 	.word	0x20000194
 8004164:	e000ed04 	.word	0xe000ed04

08004168 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01b      	beq.n	80041b2 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800417a:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <vTaskDelay+0x68>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <vTaskDelay+0x30>
        __asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	60bb      	str	r3, [r7, #8]
    }
 8004194:	bf00      	nop
 8004196:	e7fe      	b.n	8004196 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004198:	f000 f880 	bl	800429c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	2023      	movs	r0, #35	; 0x23
 80041a0:	f003 fb20 	bl	80077e4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041a4:	2100      	movs	r1, #0
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fe24 	bl	8004df4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80041ac:	f000 f884 	bl	80042b8 <xTaskResumeAll>
 80041b0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <vTaskDelay+0x6c>)
 80041ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000290 	.word	0x20000290
 80041d4:	e000ed04 	.word	0xe000ed04

080041d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80041de:	4b27      	ldr	r3, [pc, #156]	; (800427c <vTaskStartScheduler+0xa4>)
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	2300      	movs	r3, #0
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	2300      	movs	r3, #0
 80041e8:	2282      	movs	r2, #130	; 0x82
 80041ea:	4925      	ldr	r1, [pc, #148]	; (8004280 <vTaskStartScheduler+0xa8>)
 80041ec:	4825      	ldr	r0, [pc, #148]	; (8004284 <vTaskStartScheduler+0xac>)
 80041ee:	f7ff fe57 	bl	8003ea0 <xTaskCreate>
 80041f2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d102      	bne.n	8004200 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80041fa:	f000 fe73 	bl	8004ee4 <xTimerCreateTimerTask>
 80041fe:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d124      	bne.n	8004250 <vTaskStartScheduler+0x78>
        __asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	60bb      	str	r3, [r7, #8]
    }
 8004218:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800421a:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <vTaskStartScheduler+0xb0>)
 800421c:	f04f 32ff 	mov.w	r2, #4294967295
 8004220:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004222:	4b1a      	ldr	r3, [pc, #104]	; (800428c <vTaskStartScheduler+0xb4>)
 8004224:	2201      	movs	r2, #1
 8004226:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004228:	4b19      	ldr	r3, [pc, #100]	; (8004290 <vTaskStartScheduler+0xb8>)
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800422e:	4b19      	ldr	r3, [pc, #100]	; (8004294 <vTaskStartScheduler+0xbc>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <vTaskStartScheduler+0xa4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d102      	bne.n	8004240 <vTaskStartScheduler+0x68>
 800423a:	f003 ffb5 	bl	80081a8 <SEGGER_SYSVIEW_OnIdle>
 800423e:	e004      	b.n	800424a <vTaskStartScheduler+0x72>
 8004240:	4b14      	ldr	r3, [pc, #80]	; (8004294 <vTaskStartScheduler+0xbc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f004 f80d 	bl	8008264 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800424a:	f001 f9eb 	bl	8005624 <xPortStartScheduler>
 800424e:	e00e      	b.n	800426e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d10a      	bne.n	800426e <vTaskStartScheduler+0x96>
        __asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	607b      	str	r3, [r7, #4]
    }
 800426a:	bf00      	nop
 800426c:	e7fe      	b.n	800426c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <vTaskStartScheduler+0xc0>)
 8004270:	681b      	ldr	r3, [r3, #0]
}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	2000028c 	.word	0x2000028c
 8004280:	0800914c 	.word	0x0800914c
 8004284:	08004909 	.word	0x08004909
 8004288:	20000288 	.word	0x20000288
 800428c:	20000274 	.word	0x20000274
 8004290:	2000026c 	.word	0x2000026c
 8004294:	20000190 	.word	0x20000190
 8004298:	2000000c 	.word	0x2000000c

0800429c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <vTaskSuspendAll+0x18>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3301      	adds	r3, #1
 80042a6:	4a03      	ldr	r2, [pc, #12]	; (80042b4 <vTaskSuspendAll+0x18>)
 80042a8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80042aa:	bf00      	nop
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	20000290 	.word	0x20000290

080042b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80042c6:	4b43      	ldr	r3, [pc, #268]	; (80043d4 <xTaskResumeAll+0x11c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10a      	bne.n	80042e4 <xTaskResumeAll+0x2c>
        __asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	603b      	str	r3, [r7, #0]
    }
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80042e4:	f001 fabe 	bl	8005864 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80042e8:	4b3a      	ldr	r3, [pc, #232]	; (80043d4 <xTaskResumeAll+0x11c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	4a39      	ldr	r2, [pc, #228]	; (80043d4 <xTaskResumeAll+0x11c>)
 80042f0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042f2:	4b38      	ldr	r3, [pc, #224]	; (80043d4 <xTaskResumeAll+0x11c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d165      	bne.n	80043c6 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042fa:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <xTaskResumeAll+0x120>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d061      	beq.n	80043c6 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004302:	e032      	b.n	800436a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004304:	4b35      	ldr	r3, [pc, #212]	; (80043dc <xTaskResumeAll+0x124>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3318      	adds	r3, #24
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe fe3d 	bl	8002f90 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3304      	adds	r3, #4
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe fe38 	bl	8002f90 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4618      	mov	r0, r3
 8004324:	f003 ffe0 	bl	80082e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	2201      	movs	r2, #1
 800432e:	409a      	lsls	r2, r3
 8004330:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <xTaskResumeAll+0x128>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4313      	orrs	r3, r2
 8004336:	4a2a      	ldr	r2, [pc, #168]	; (80043e0 <xTaskResumeAll+0x128>)
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <xTaskResumeAll+0x12c>)
 8004348:	441a      	add	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3304      	adds	r3, #4
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f7fe fdc0 	bl	8002ed6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435a:	4b23      	ldr	r3, [pc, #140]	; (80043e8 <xTaskResumeAll+0x130>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	429a      	cmp	r2, r3
 8004362:	d302      	bcc.n	800436a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8004364:	4b21      	ldr	r3, [pc, #132]	; (80043ec <xTaskResumeAll+0x134>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800436a:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <xTaskResumeAll+0x124>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1c8      	bne.n	8004304 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004378:	f000 fb5c 	bl	8004a34 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800437c:	4b1c      	ldr	r3, [pc, #112]	; (80043f0 <xTaskResumeAll+0x138>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d010      	beq.n	80043aa <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004388:	f000 f858 	bl	800443c <xTaskIncrementTick>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8004392:	4b16      	ldr	r3, [pc, #88]	; (80043ec <xTaskResumeAll+0x134>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3b01      	subs	r3, #1
 800439c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f1      	bne.n	8004388 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80043a4:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <xTaskResumeAll+0x138>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80043aa:	4b10      	ldr	r3, [pc, #64]	; (80043ec <xTaskResumeAll+0x134>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80043b2:	2301      	movs	r3, #1
 80043b4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <xTaskResumeAll+0x13c>)
 80043b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80043c6:	f001 fa7d 	bl	80058c4 <vPortExitCritical>

    return xAlreadyYielded;
 80043ca:	68bb      	ldr	r3, [r7, #8]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20000290 	.word	0x20000290
 80043d8:	20000268 	.word	0x20000268
 80043dc:	20000228 	.word	0x20000228
 80043e0:	20000270 	.word	0x20000270
 80043e4:	20000194 	.word	0x20000194
 80043e8:	20000190 	.word	0x20000190
 80043ec:	2000027c 	.word	0x2000027c
 80043f0:	20000278 	.word	0x20000278
 80043f4:	e000ed04 	.word	0xe000ed04

080043f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <xTaskGetTickCount+0x1c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004404:	687b      	ldr	r3, [r7, #4]
}
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	2000026c 	.word	0x2000026c

08004418 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800441e:	f001 fb0d 	bl	8005a3c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004422:	2300      	movs	r3, #0
 8004424:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8004426:	4b04      	ldr	r3, [pc, #16]	; (8004438 <xTaskGetTickCountFromISR+0x20>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800442c:	683b      	ldr	r3, [r7, #0]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	2000026c 	.word	0x2000026c

0800443c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004446:	4b50      	ldr	r3, [pc, #320]	; (8004588 <xTaskIncrementTick+0x14c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f040 8092 	bne.w	8004574 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004450:	4b4e      	ldr	r3, [pc, #312]	; (800458c <xTaskIncrementTick+0x150>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3301      	adds	r3, #1
 8004456:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004458:	4a4c      	ldr	r2, [pc, #304]	; (800458c <xTaskIncrementTick+0x150>)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d120      	bne.n	80044a6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004464:	4b4a      	ldr	r3, [pc, #296]	; (8004590 <xTaskIncrementTick+0x154>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <xTaskIncrementTick+0x48>
        __asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	603b      	str	r3, [r7, #0]
    }
 8004480:	bf00      	nop
 8004482:	e7fe      	b.n	8004482 <xTaskIncrementTick+0x46>
 8004484:	4b42      	ldr	r3, [pc, #264]	; (8004590 <xTaskIncrementTick+0x154>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	4b42      	ldr	r3, [pc, #264]	; (8004594 <xTaskIncrementTick+0x158>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a40      	ldr	r2, [pc, #256]	; (8004590 <xTaskIncrementTick+0x154>)
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4a40      	ldr	r2, [pc, #256]	; (8004594 <xTaskIncrementTick+0x158>)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	4b3f      	ldr	r3, [pc, #252]	; (8004598 <xTaskIncrementTick+0x15c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	4a3e      	ldr	r2, [pc, #248]	; (8004598 <xTaskIncrementTick+0x15c>)
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	f000 fac7 	bl	8004a34 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80044a6:	4b3d      	ldr	r3, [pc, #244]	; (800459c <xTaskIncrementTick+0x160>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d34c      	bcc.n	800454a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044b0:	4b37      	ldr	r3, [pc, #220]	; (8004590 <xTaskIncrementTick+0x154>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d104      	bne.n	80044c4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ba:	4b38      	ldr	r3, [pc, #224]	; (800459c <xTaskIncrementTick+0x160>)
 80044bc:	f04f 32ff 	mov.w	r2, #4294967295
 80044c0:	601a      	str	r2, [r3, #0]
                    break;
 80044c2:	e042      	b.n	800454a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c4:	4b32      	ldr	r3, [pc, #200]	; (8004590 <xTaskIncrementTick+0x154>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d203      	bcs.n	80044e4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80044dc:	4a2f      	ldr	r2, [pc, #188]	; (800459c <xTaskIncrementTick+0x160>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044e2:	e032      	b.n	800454a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe fd51 	bl	8002f90 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d004      	beq.n	8004500 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	3318      	adds	r3, #24
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe fd48 	bl	8002f90 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4618      	mov	r0, r3
 8004504:	f003 fef0 	bl	80082e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	2201      	movs	r2, #1
 800450e:	409a      	lsls	r2, r3
 8004510:	4b23      	ldr	r3, [pc, #140]	; (80045a0 <xTaskIncrementTick+0x164>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4313      	orrs	r3, r2
 8004516:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <xTaskIncrementTick+0x164>)
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <xTaskIncrementTick+0x168>)
 8004528:	441a      	add	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	3304      	adds	r3, #4
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f7fe fcd0 	bl	8002ed6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453a:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <xTaskIncrementTick+0x16c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	429a      	cmp	r2, r3
 8004542:	d3b5      	bcc.n	80044b0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004548:	e7b2      	b.n	80044b0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800454a:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <xTaskIncrementTick+0x16c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004550:	4914      	ldr	r1, [pc, #80]	; (80045a4 <xTaskIncrementTick+0x168>)
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d901      	bls.n	8004566 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8004562:	2301      	movs	r3, #1
 8004564:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004566:	4b11      	ldr	r3, [pc, #68]	; (80045ac <xTaskIncrementTick+0x170>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d007      	beq.n	800457e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800456e:	2301      	movs	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	e004      	b.n	800457e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <xTaskIncrementTick+0x174>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3301      	adds	r3, #1
 800457a:	4a0d      	ldr	r2, [pc, #52]	; (80045b0 <xTaskIncrementTick+0x174>)
 800457c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800457e:	697b      	ldr	r3, [r7, #20]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000290 	.word	0x20000290
 800458c:	2000026c 	.word	0x2000026c
 8004590:	20000220 	.word	0x20000220
 8004594:	20000224 	.word	0x20000224
 8004598:	20000280 	.word	0x20000280
 800459c:	20000288 	.word	0x20000288
 80045a0:	20000270 	.word	0x20000270
 80045a4:	20000194 	.word	0x20000194
 80045a8:	20000190 	.word	0x20000190
 80045ac:	2000027c 	.word	0x2000027c
 80045b0:	20000278 	.word	0x20000278

080045b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045ba:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <vTaskSwitchContext+0xbc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80045c2:	4b2c      	ldr	r3, [pc, #176]	; (8004674 <vTaskSwitchContext+0xc0>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80045c8:	e04d      	b.n	8004666 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80045ca:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <vTaskSwitchContext+0xc0>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d0:	4b29      	ldr	r3, [pc, #164]	; (8004678 <vTaskSwitchContext+0xc4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	fab3 f383 	clz	r3, r3
 80045dc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80045de:	7afb      	ldrb	r3, [r7, #11]
 80045e0:	f1c3 031f 	rsb	r3, r3, #31
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	4925      	ldr	r1, [pc, #148]	; (800467c <vTaskSwitchContext+0xc8>)
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <vTaskSwitchContext+0x5c>
        __asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	607b      	str	r3, [r7, #4]
    }
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <vTaskSwitchContext+0x5a>
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4a18      	ldr	r2, [pc, #96]	; (800467c <vTaskSwitchContext+0xc8>)
 800461c:	4413      	add	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	3308      	adds	r3, #8
 8004632:	429a      	cmp	r2, r3
 8004634:	d104      	bne.n	8004640 <vTaskSwitchContext+0x8c>
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	605a      	str	r2, [r3, #4]
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	4a0e      	ldr	r2, [pc, #56]	; (8004680 <vTaskSwitchContext+0xcc>)
 8004648:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800464a:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <vTaskSwitchContext+0xcc>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <vTaskSwitchContext+0xd0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d102      	bne.n	800465c <vTaskSwitchContext+0xa8>
 8004656:	f003 fda7 	bl	80081a8 <SEGGER_SYSVIEW_OnIdle>
}
 800465a:	e004      	b.n	8004666 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800465c:	4b08      	ldr	r3, [pc, #32]	; (8004680 <vTaskSwitchContext+0xcc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f003 fdff 	bl	8008264 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004666:	bf00      	nop
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000290 	.word	0x20000290
 8004674:	2000027c 	.word	0x2000027c
 8004678:	20000270 	.word	0x20000270
 800467c:	20000194 	.word	0x20000194
 8004680:	20000190 	.word	0x20000190
 8004684:	2000028c 	.word	0x2000028c

08004688 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	60fb      	str	r3, [r7, #12]
    }
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <vTaskPlaceOnEventList+0x44>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3318      	adds	r3, #24
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fe fc31 	bl	8002f1e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046bc:	2101      	movs	r1, #1
 80046be:	6838      	ldr	r0, [r7, #0]
 80046c0:	f000 fb98 	bl	8004df4 <prvAddCurrentTaskToDelayedList>
}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20000190 	.word	0x20000190

080046d0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	617b      	str	r3, [r7, #20]
    }
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <vTaskPlaceOnEventListRestricted+0x58>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3318      	adds	r3, #24
 80046fe:	4619      	mov	r1, r3
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7fe fbe8 	bl	8002ed6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800470c:	f04f 33ff 	mov.w	r3, #4294967295
 8004710:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004712:	2024      	movs	r0, #36	; 0x24
 8004714:	f003 f848 	bl	80077a8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	68b8      	ldr	r0, [r7, #8]
 800471c:	f000 fb6a 	bl	8004df4 <prvAddCurrentTaskToDelayedList>
    }
 8004720:	bf00      	nop
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20000190 	.word	0x20000190

0800472c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60fb      	str	r3, [r7, #12]
    }
 8004754:	bf00      	nop
 8004756:	e7fe      	b.n	8004756 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	3318      	adds	r3, #24
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe fc17 	bl	8002f90 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004762:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <xTaskRemoveFromEventList+0xb4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d120      	bne.n	80047ac <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	3304      	adds	r3, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe fc0e 	bl	8002f90 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4618      	mov	r0, r3
 8004778:	f003 fdb6 	bl	80082e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	2201      	movs	r2, #1
 8004782:	409a      	lsls	r2, r3
 8004784:	4b17      	ldr	r3, [pc, #92]	; (80047e4 <xTaskRemoveFromEventList+0xb8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4313      	orrs	r3, r2
 800478a:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <xTaskRemoveFromEventList+0xb8>)
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4a13      	ldr	r2, [pc, #76]	; (80047e8 <xTaskRemoveFromEventList+0xbc>)
 800479c:	441a      	add	r2, r3
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7fe fb96 	bl	8002ed6 <vListInsertEnd>
 80047aa:	e005      	b.n	80047b8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	3318      	adds	r3, #24
 80047b0:	4619      	mov	r1, r3
 80047b2:	480e      	ldr	r0, [pc, #56]	; (80047ec <xTaskRemoveFromEventList+0xc0>)
 80047b4:	f7fe fb8f 	bl	8002ed6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <xTaskRemoveFromEventList+0xc4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d905      	bls.n	80047d2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80047c6:	2301      	movs	r3, #1
 80047c8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <xTaskRemoveFromEventList+0xc8>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e001      	b.n	80047d6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80047d6:	697b      	ldr	r3, [r7, #20]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000290 	.word	0x20000290
 80047e4:	20000270 	.word	0x20000270
 80047e8:	20000194 	.word	0x20000194
 80047ec:	20000228 	.word	0x20000228
 80047f0:	20000190 	.word	0x20000190
 80047f4:	2000027c 	.word	0x2000027c

080047f8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <vTaskInternalSetTimeOutState+0x24>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <vTaskInternalSetTimeOutState+0x28>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	605a      	str	r2, [r3, #4]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	20000280 	.word	0x20000280
 8004820:	2000026c 	.word	0x2000026c

08004824 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	613b      	str	r3, [r7, #16]
    }
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10a      	bne.n	8004866 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	60fb      	str	r3, [r7, #12]
    }
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004866:	f000 fffd 	bl	8005864 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800486a:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <xTaskCheckForTimeOut+0xc4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d102      	bne.n	800488a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004884:	2300      	movs	r3, #0
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	e026      	b.n	80048d8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4b17      	ldr	r3, [pc, #92]	; (80048ec <xTaskCheckForTimeOut+0xc8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d00a      	beq.n	80048ac <xTaskCheckForTimeOut+0x88>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	429a      	cmp	r2, r3
 800489e:	d305      	bcc.n	80048ac <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80048a0:	2301      	movs	r3, #1
 80048a2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	e015      	b.n	80048d8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d20b      	bcs.n	80048ce <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	1ad2      	subs	r2, r2, r3
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff ff98 	bl	80047f8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	e004      	b.n	80048d8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80048d4:	2301      	movs	r3, #1
 80048d6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80048d8:	f000 fff4 	bl	80058c4 <vPortExitCritical>

    return xReturn;
 80048dc:	69fb      	ldr	r3, [r7, #28]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	2000026c 	.word	0x2000026c
 80048ec:	20000280 	.word	0x20000280

080048f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80048f4:	4b03      	ldr	r3, [pc, #12]	; (8004904 <vTaskMissedYield+0x14>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
}
 80048fa:	bf00      	nop
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	2000027c 	.word	0x2000027c

08004908 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004910:	f000 f852 	bl	80049b8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <prvIdleTask+0x28>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d9f9      	bls.n	8004910 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <prvIdleTask+0x2c>)
 800491e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800492c:	e7f0      	b.n	8004910 <prvIdleTask+0x8>
 800492e:	bf00      	nop
 8004930:	20000194 	.word	0x20000194
 8004934:	e000ed04 	.word	0xe000ed04

08004938 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800493e:	2300      	movs	r3, #0
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	e00c      	b.n	800495e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4a12      	ldr	r2, [pc, #72]	; (8004998 <prvInitialiseTaskLists+0x60>)
 8004950:	4413      	add	r3, r2
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe fa92 	bl	8002e7c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3301      	adds	r3, #1
 800495c:	607b      	str	r3, [r7, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d9ef      	bls.n	8004944 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004964:	480d      	ldr	r0, [pc, #52]	; (800499c <prvInitialiseTaskLists+0x64>)
 8004966:	f7fe fa89 	bl	8002e7c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800496a:	480d      	ldr	r0, [pc, #52]	; (80049a0 <prvInitialiseTaskLists+0x68>)
 800496c:	f7fe fa86 	bl	8002e7c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004970:	480c      	ldr	r0, [pc, #48]	; (80049a4 <prvInitialiseTaskLists+0x6c>)
 8004972:	f7fe fa83 	bl	8002e7c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004976:	480c      	ldr	r0, [pc, #48]	; (80049a8 <prvInitialiseTaskLists+0x70>)
 8004978:	f7fe fa80 	bl	8002e7c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800497c:	480b      	ldr	r0, [pc, #44]	; (80049ac <prvInitialiseTaskLists+0x74>)
 800497e:	f7fe fa7d 	bl	8002e7c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004982:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <prvInitialiseTaskLists+0x78>)
 8004984:	4a05      	ldr	r2, [pc, #20]	; (800499c <prvInitialiseTaskLists+0x64>)
 8004986:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <prvInitialiseTaskLists+0x7c>)
 800498a:	4a05      	ldr	r2, [pc, #20]	; (80049a0 <prvInitialiseTaskLists+0x68>)
 800498c:	601a      	str	r2, [r3, #0]
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000194 	.word	0x20000194
 800499c:	200001f8 	.word	0x200001f8
 80049a0:	2000020c 	.word	0x2000020c
 80049a4:	20000228 	.word	0x20000228
 80049a8:	2000023c 	.word	0x2000023c
 80049ac:	20000254 	.word	0x20000254
 80049b0:	20000220 	.word	0x20000220
 80049b4:	20000224 	.word	0x20000224

080049b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049be:	e019      	b.n	80049f4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80049c0:	f000 ff50 	bl	8005864 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c4:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <prvCheckTasksWaitingTermination+0x50>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fe fadd 	bl	8002f90 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <prvCheckTasksWaitingTermination+0x54>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3b01      	subs	r3, #1
 80049dc:	4a0b      	ldr	r2, [pc, #44]	; (8004a0c <prvCheckTasksWaitingTermination+0x54>)
 80049de:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <prvCheckTasksWaitingTermination+0x58>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <prvCheckTasksWaitingTermination+0x58>)
 80049e8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80049ea:	f000 ff6b 	bl	80058c4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f810 	bl	8004a14 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <prvCheckTasksWaitingTermination+0x58>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e1      	bne.n	80049c0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	2000023c 	.word	0x2000023c
 8004a0c:	20000268 	.word	0x20000268
 8004a10:	20000250 	.word	0x20000250

08004a14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 f92b 	bl	8005c7c <vPortFree>
                vPortFree( pxTCB );
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f001 f928 	bl	8005c7c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <prvResetNextTaskUnblockTime+0x30>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004a42:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <prvResetNextTaskUnblockTime+0x34>)
 8004a44:	f04f 32ff 	mov.w	r2, #4294967295
 8004a48:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004a4a:	e005      	b.n	8004a58 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <prvResetNextTaskUnblockTime+0x30>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <prvResetNextTaskUnblockTime+0x34>)
 8004a56:	6013      	str	r3, [r2, #0]
}
 8004a58:	bf00      	nop
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20000220 	.word	0x20000220
 8004a68:	20000288 	.word	0x20000288

08004a6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <xTaskGetSchedulerState+0x34>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d102      	bne.n	8004a80 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	607b      	str	r3, [r7, #4]
 8004a7e:	e008      	b.n	8004a92 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a80:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <xTaskGetSchedulerState+0x38>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	607b      	str	r3, [r7, #4]
 8004a8c:	e001      	b.n	8004a92 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004a92:	687b      	ldr	r3, [r7, #4]
    }
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	20000274 	.word	0x20000274
 8004aa4:	20000290 	.word	0x20000290

08004aa8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d063      	beq.n	8004b86 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac2:	4b33      	ldr	r3, [pc, #204]	; (8004b90 <xTaskPriorityInherit+0xe8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d253      	bcs.n	8004b74 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	db06      	blt.n	8004ae2 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad4:	4b2e      	ldr	r3, [pc, #184]	; (8004b90 <xTaskPriorityInherit+0xe8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	f1c3 0205 	rsb	r2, r3, #5
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6959      	ldr	r1, [r3, #20]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4a28      	ldr	r2, [pc, #160]	; (8004b94 <xTaskPriorityInherit+0xec>)
 8004af4:	4413      	add	r3, r2
 8004af6:	4299      	cmp	r1, r3
 8004af8:	d12f      	bne.n	8004b5a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	3304      	adds	r3, #4
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe fa46 	bl	8002f90 <uxListRemove>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	2201      	movs	r2, #1
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43da      	mvns	r2, r3
 8004b16:	4b20      	ldr	r3, [pc, #128]	; (8004b98 <xTaskPriorityInherit+0xf0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	4a1e      	ldr	r2, [pc, #120]	; (8004b98 <xTaskPriorityInherit+0xf0>)
 8004b1e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <xTaskPriorityInherit+0xe8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	2201      	movs	r2, #1
 8004b30:	409a      	lsls	r2, r3
 8004b32:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <xTaskPriorityInherit+0xf0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	4a17      	ldr	r2, [pc, #92]	; (8004b98 <xTaskPriorityInherit+0xf0>)
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4a12      	ldr	r2, [pc, #72]	; (8004b94 <xTaskPriorityInherit+0xec>)
 8004b4a:	441a      	add	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4619      	mov	r1, r3
 8004b52:	4610      	mov	r0, r2
 8004b54:	f7fe f9bf 	bl	8002ed6 <vListInsertEnd>
 8004b58:	e004      	b.n	8004b64 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b5a:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <xTaskPriorityInherit+0xe8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4619      	mov	r1, r3
 8004b68:	2049      	movs	r0, #73	; 0x49
 8004b6a:	f002 fe3b 	bl	80077e4 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	e008      	b.n	8004b86 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <xTaskPriorityInherit+0xe8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d201      	bcs.n	8004b86 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004b86:	68fb      	ldr	r3, [r7, #12]
    }
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000190 	.word	0x20000190
 8004b94:	20000194 	.word	0x20000194
 8004b98:	20000270 	.word	0x20000270

08004b9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d068      	beq.n	8004c84 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004bb2:	4b37      	ldr	r3, [pc, #220]	; (8004c90 <xTaskPriorityDisinherit+0xf4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d00a      	beq.n	8004bd2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	60fb      	str	r3, [r7, #12]
    }
 8004bce:	bf00      	nop
 8004bd0:	e7fe      	b.n	8004bd0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10a      	bne.n	8004bf0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	60bb      	str	r3, [r7, #8]
    }
 8004bec:	bf00      	nop
 8004bee:	e7fe      	b.n	8004bee <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf4:	1e5a      	subs	r2, r3, #1
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d03e      	beq.n	8004c84 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d13a      	bne.n	8004c84 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	3304      	adds	r3, #4
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe f9bc 	bl	8002f90 <uxListRemove>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	2201      	movs	r2, #1
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43da      	mvns	r2, r3
 8004c2a:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <xTaskPriorityDisinherit+0xf8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <xTaskPriorityDisinherit+0xf8>)
 8004c32:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4619      	mov	r1, r3
 8004c38:	204a      	movs	r0, #74	; 0x4a
 8004c3a:	f002 fdd3 	bl	80077e4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	f1c3 0205 	rsb	r2, r3, #5
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	2201      	movs	r2, #1
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	4b0e      	ldr	r3, [pc, #56]	; (8004c94 <xTaskPriorityDisinherit+0xf8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	4a0c      	ldr	r2, [pc, #48]	; (8004c94 <xTaskPriorityDisinherit+0xf8>)
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <xTaskPriorityDisinherit+0xfc>)
 8004c72:	441a      	add	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f7fe f92b 	bl	8002ed6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004c80:	2301      	movs	r3, #1
 8004c82:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004c84:	697b      	ldr	r3, [r7, #20]
    }
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000190 	.word	0x20000190
 8004c94:	20000270 	.word	0x20000270
 8004c98:	20000194 	.word	0x20000194

08004c9c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004caa:	2301      	movs	r3, #1
 8004cac:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8081 	beq.w	8004db8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	60fb      	str	r3, [r7, #12]
    }
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d902      	bls.n	8004ce4 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	61fb      	str	r3, [r7, #28]
 8004ce2:	e002      	b.n	8004cea <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce8:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d061      	beq.n	8004db8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d15c      	bne.n	8004db8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004cfe:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d10a      	bne.n	8004d1e <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	60bb      	str	r3, [r7, #8]
    }
 8004d1a:	bf00      	nop
 8004d1c:	e7fe      	b.n	8004d1c <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4619      	mov	r1, r3
 8004d22:	204a      	movs	r0, #74	; 0x4a
 8004d24:	f002 fd5e 	bl	80077e4 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	db04      	blt.n	8004d46 <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f1c3 0205 	rsb	r2, r3, #5
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	6959      	ldr	r1, [r3, #20]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004d56:	4413      	add	r3, r2
 8004d58:	4299      	cmp	r1, r3
 8004d5a:	d12d      	bne.n	8004db8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fe f915 	bl	8002f90 <uxListRemove>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	2201      	movs	r2, #1
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	43da      	mvns	r2, r3
 8004d78:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004d80:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f003 faaf 	bl	80082e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	2201      	movs	r2, #1
 8004d90:	409a      	lsls	r2, r3
 8004d92:	4b0d      	ldr	r3, [pc, #52]	; (8004dc8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	4a0b      	ldr	r2, [pc, #44]	; (8004dc8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4a06      	ldr	r2, [pc, #24]	; (8004dc4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004daa:	441a      	add	r2, r3
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f7fe f88f 	bl	8002ed6 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004db8:	bf00      	nop
 8004dba:	3720      	adds	r7, #32
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000190 	.word	0x20000190
 8004dc4:	20000194 	.word	0x20000194
 8004dc8:	20000270 	.word	0x20000270

08004dcc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dde:	3201      	adds	r2, #1
 8004de0:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004de2:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004de4:	681b      	ldr	r3, [r3, #0]
    }
 8004de6:	4618      	mov	r0, r3
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	20000190 	.word	0x20000190

08004df4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004dfe:	4b32      	ldr	r3, [pc, #200]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e04:	4b31      	ldr	r3, [pc, #196]	; (8004ecc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe f8c0 	bl	8002f90 <uxListRemove>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e16:	4b2d      	ldr	r3, [pc, #180]	; (8004ecc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43da      	mvns	r2, r3
 8004e24:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004e2c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d110      	bne.n	8004e58 <prvAddCurrentTaskToDelayedList+0x64>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00d      	beq.n	8004e58 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004e3c:	4b23      	ldr	r3, [pc, #140]	; (8004ecc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	211b      	movs	r1, #27
 8004e42:	4618      	mov	r0, r3
 8004e44:	f003 fa92 	bl	800836c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e48:	4b20      	ldr	r3, [pc, #128]	; (8004ecc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4820      	ldr	r0, [pc, #128]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004e52:	f7fe f840 	bl	8002ed6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004e56:	e032      	b.n	8004ebe <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e60:	4b1a      	ldr	r3, [pc, #104]	; (8004ecc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d20f      	bcs.n	8004e90 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004e70:	4b16      	ldr	r3, [pc, #88]	; (8004ecc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2104      	movs	r1, #4
 8004e76:	4618      	mov	r0, r3
 8004e78:	f003 fa78 	bl	800836c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e7c:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3304      	adds	r3, #4
 8004e86:	4619      	mov	r1, r3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	f7fe f848 	bl	8002f1e <vListInsert>
}
 8004e8e:	e016      	b.n	8004ebe <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004e90:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2104      	movs	r1, #4
 8004e96:	4618      	mov	r0, r3
 8004e98:	f003 fa68 	bl	800836c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f7fe f838 	bl	8002f1e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004eae:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0xec>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d202      	bcs.n	8004ebe <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004eb8:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <prvAddCurrentTaskToDelayedList+0xec>)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	6013      	str	r3, [r2, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	2000026c 	.word	0x2000026c
 8004ecc:	20000190 	.word	0x20000190
 8004ed0:	20000270 	.word	0x20000270
 8004ed4:	20000254 	.word	0x20000254
 8004ed8:	20000224 	.word	0x20000224
 8004edc:	20000220 	.word	0x20000220
 8004ee0:	20000288 	.word	0x20000288

08004ee4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004eee:	f000 fad5 	bl	800549c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004ef2:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <xTimerCreateTimerTask+0x54>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004efa:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <xTimerCreateTimerTask+0x58>)
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	2302      	movs	r3, #2
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2300      	movs	r3, #0
 8004f04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f08:	490d      	ldr	r1, [pc, #52]	; (8004f40 <xTimerCreateTimerTask+0x5c>)
 8004f0a:	480e      	ldr	r0, [pc, #56]	; (8004f44 <xTimerCreateTimerTask+0x60>)
 8004f0c:	f7fe ffc8 	bl	8003ea0 <xTaskCreate>
 8004f10:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	603b      	str	r3, [r7, #0]
    }
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004f2e:	687b      	ldr	r3, [r7, #4]
    }
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	200002c4 	.word	0x200002c4
 8004f3c:	200002c8 	.word	0x200002c8
 8004f40:	08009154 	.word	0x08009154
 8004f44:	0800507d 	.word	0x0800507d

08004f48 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	623b      	str	r3, [r7, #32]
    }
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004f76:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <xTimerGenericCommand+0x98>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d02a      	beq.n	8004fd4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b05      	cmp	r3, #5
 8004f8e:	dc18      	bgt.n	8004fc2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f90:	f7ff fd6c 	bl	8004a6c <xTaskGetSchedulerState>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d109      	bne.n	8004fae <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f9a:	4b11      	ldr	r3, [pc, #68]	; (8004fe0 <xTimerGenericCommand+0x98>)
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	f107 0114 	add.w	r1, r7, #20
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa6:	f7fe f90d 	bl	80031c4 <xQueueGenericSend>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24
 8004fac:	e012      	b.n	8004fd4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fae:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <xTimerGenericCommand+0x98>)
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	f107 0114 	add.w	r1, r7, #20
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f7fe f903 	bl	80031c4 <xQueueGenericSend>
 8004fbe:	6278      	str	r0, [r7, #36]	; 0x24
 8004fc0:	e008      	b.n	8004fd4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fc2:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <xTimerGenericCommand+0x98>)
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	f107 0114 	add.w	r1, r7, #20
 8004fca:	2300      	movs	r3, #0
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	f7fe fa1f 	bl	8003410 <xQueueGenericSendFromISR>
 8004fd2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3728      	adds	r7, #40	; 0x28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	200002c4 	.word	0x200002c4

08004fe4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fee:	4b22      	ldr	r3, [pc, #136]	; (8005078 <prvProcessExpiredTimer+0x94>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fd ffc7 	bl	8002f90 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d022      	beq.n	8005056 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	699a      	ldr	r2, [r3, #24]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	18d1      	adds	r1, r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	6978      	ldr	r0, [r7, #20]
 800501e:	f000 f8d1 	bl	80051c4 <prvInsertTimerInActiveList>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01f      	beq.n	8005068 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005028:	2300      	movs	r3, #0
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	2300      	movs	r3, #0
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	2100      	movs	r1, #0
 8005032:	6978      	ldr	r0, [r7, #20]
 8005034:	f7ff ff88 	bl	8004f48 <xTimerGenericCommand>
 8005038:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d113      	bne.n	8005068 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	60fb      	str	r3, [r7, #12]
    }
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	b2da      	uxtb	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	6978      	ldr	r0, [r7, #20]
 800506e:	4798      	blx	r3
    }
 8005070:	bf00      	nop
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	200002bc 	.word	0x200002bc

0800507c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005084:	f107 0308 	add.w	r3, r7, #8
 8005088:	4618      	mov	r0, r3
 800508a:	f000 f857 	bl	800513c <prvGetNextExpireTime>
 800508e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4619      	mov	r1, r3
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f803 	bl	80050a0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800509a:	f000 f8d5 	bl	8005248 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800509e:	e7f1      	b.n	8005084 <prvTimerTask+0x8>

080050a0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80050aa:	f7ff f8f7 	bl	800429c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050ae:	f107 0308 	add.w	r3, r7, #8
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f866 	bl	8005184 <prvSampleTimeNow>
 80050b8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d130      	bne.n	8005122 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <prvProcessTimerOrBlockTask+0x3c>
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d806      	bhi.n	80050dc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80050ce:	f7ff f8f3 	bl	80042b8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050d2:	68f9      	ldr	r1, [r7, #12]
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff ff85 	bl	8004fe4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80050da:	e024      	b.n	8005126 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050e2:	4b13      	ldr	r3, [pc, #76]	; (8005130 <prvProcessTimerOrBlockTask+0x90>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <prvProcessTimerOrBlockTask+0x50>
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <prvProcessTimerOrBlockTask+0x52>
 80050f0:	2300      	movs	r3, #0
 80050f2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050f4:	4b0f      	ldr	r3, [pc, #60]	; (8005134 <prvProcessTimerOrBlockTask+0x94>)
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	4619      	mov	r1, r3
 8005102:	f7fe fe99 	bl	8003e38 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005106:	f7ff f8d7 	bl	80042b8 <xTaskResumeAll>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005110:	4b09      	ldr	r3, [pc, #36]	; (8005138 <prvProcessTimerOrBlockTask+0x98>)
 8005112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
    }
 8005120:	e001      	b.n	8005126 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005122:	f7ff f8c9 	bl	80042b8 <xTaskResumeAll>
    }
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	200002c0 	.word	0x200002c0
 8005134:	200002c4 	.word	0x200002c4
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <prvGetNextExpireTime+0x44>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <prvGetNextExpireTime+0x16>
 800514e:	2201      	movs	r2, #1
 8005150:	e000      	b.n	8005154 <prvGetNextExpireTime+0x18>
 8005152:	2200      	movs	r2, #0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d105      	bne.n	800516c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <prvGetNextExpireTime+0x44>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e001      	b.n	8005170 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005170:	68fb      	ldr	r3, [r7, #12]
    }
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	200002bc 	.word	0x200002bc

08005184 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800518c:	f7ff f934 	bl	80043f8 <xTaskGetTickCount>
 8005190:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005192:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <prvSampleTimeNow+0x3c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	429a      	cmp	r2, r3
 800519a:	d205      	bcs.n	80051a8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800519c:	f000 f91a 	bl	80053d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	e002      	b.n	80051ae <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80051ae:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <prvSampleTimeNow+0x3c>)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80051b4:	68fb      	ldr	r3, [r7, #12]
    }
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	200002cc 	.word	0x200002cc

080051c4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d812      	bhi.n	8005210 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	1ad2      	subs	r2, r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d302      	bcc.n	80051fe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80051f8:	2301      	movs	r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e01b      	b.n	8005236 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051fe:	4b10      	ldr	r3, [pc, #64]	; (8005240 <prvInsertTimerInActiveList+0x7c>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3304      	adds	r3, #4
 8005206:	4619      	mov	r1, r3
 8005208:	4610      	mov	r0, r2
 800520a:	f7fd fe88 	bl	8002f1e <vListInsert>
 800520e:	e012      	b.n	8005236 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d206      	bcs.n	8005226 <prvInsertTimerInActiveList+0x62>
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d302      	bcc.n	8005226 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005220:	2301      	movs	r3, #1
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e007      	b.n	8005236 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005226:	4b07      	ldr	r3, [pc, #28]	; (8005244 <prvInsertTimerInActiveList+0x80>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3304      	adds	r3, #4
 800522e:	4619      	mov	r1, r3
 8005230:	4610      	mov	r0, r2
 8005232:	f7fd fe74 	bl	8002f1e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005236:	697b      	ldr	r3, [r7, #20]
    }
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	200002c0 	.word	0x200002c0
 8005244:	200002bc 	.word	0x200002bc

08005248 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005248:	b580      	push	{r7, lr}
 800524a:	b08c      	sub	sp, #48	; 0x30
 800524c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800524e:	e0ae      	b.n	80053ae <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	f2c0 80aa 	blt.w	80053ac <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d004      	beq.n	800526e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	3304      	adds	r3, #4
 8005268:	4618      	mov	r0, r3
 800526a:	f7fd fe91 	bl	8002f90 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800526e:	1d3b      	adds	r3, r7, #4
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff ff87 	bl	8005184 <prvSampleTimeNow>
 8005276:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b09      	cmp	r3, #9
 800527c:	f200 8097 	bhi.w	80053ae <prvProcessReceivedCommands+0x166>
 8005280:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <prvProcessReceivedCommands+0x40>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080052b1 	.word	0x080052b1
 8005294:	08005325 	.word	0x08005325
 8005298:	08005339 	.word	0x08005339
 800529c:	08005383 	.word	0x08005383
 80052a0:	080052b1 	.word	0x080052b1
 80052a4:	080052b1 	.word	0x080052b1
 80052a8:	08005325 	.word	0x08005325
 80052ac:	08005339 	.word	0x08005339
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	18d1      	adds	r1, r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a3a      	ldr	r2, [r7, #32]
 80052ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052d0:	f7ff ff78 	bl	80051c4 <prvInsertTimerInActiveList>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d069      	beq.n	80053ae <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052e0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d05e      	beq.n	80053ae <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	441a      	add	r2, r3
 80052f8:	2300      	movs	r3, #0
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	2300      	movs	r3, #0
 80052fe:	2100      	movs	r1, #0
 8005300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005302:	f7ff fe21 	bl	8004f48 <xTimerGenericCommand>
 8005306:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d14f      	bne.n	80053ae <prvProcessReceivedCommands+0x166>
        __asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	61bb      	str	r3, [r7, #24]
    }
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	b2da      	uxtb	r2, r3
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005336:	e03a      	b.n	80053ae <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	b2da      	uxtb	r2, r3
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	617b      	str	r3, [r7, #20]
    }
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	18d1      	adds	r1, r2, r3
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	6a3a      	ldr	r2, [r7, #32]
 800537a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800537c:	f7ff ff22 	bl	80051c4 <prvInsertTimerInActiveList>
                        break;
 8005380:	e015      	b.n	80053ae <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005392:	f000 fc73 	bl	8005c7c <vPortFree>
 8005396:	e00a      	b.n	80053ae <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800539e:	f023 0301 	bic.w	r3, r3, #1
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80053aa:	e000      	b.n	80053ae <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80053ac:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053ae:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <prvProcessReceivedCommands+0x188>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f107 0108 	add.w	r1, r7, #8
 80053b6:	2200      	movs	r2, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fe f997 	bl	80036ec <xQueueReceive>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f47f af45 	bne.w	8005250 <prvProcessReceivedCommands+0x8>
        }
    }
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	3728      	adds	r7, #40	; 0x28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	200002c4 	.word	0x200002c4

080053d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053da:	e048      	b.n	800546e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053dc:	4b2d      	ldr	r3, [pc, #180]	; (8005494 <prvSwitchTimerLists+0xc0>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e6:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <prvSwitchTimerLists+0xc0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fd fdcb 	bl	8002f90 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d02e      	beq.n	800546e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4413      	add	r3, r2
 8005418:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	429a      	cmp	r2, r3
 8005420:	d90e      	bls.n	8005440 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800542e:	4b19      	ldr	r3, [pc, #100]	; (8005494 <prvSwitchTimerLists+0xc0>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3304      	adds	r3, #4
 8005436:	4619      	mov	r1, r3
 8005438:	4610      	mov	r0, r2
 800543a:	f7fd fd70 	bl	8002f1e <vListInsert>
 800543e:	e016      	b.n	800546e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005440:	2300      	movs	r3, #0
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	2300      	movs	r3, #0
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	2100      	movs	r1, #0
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f7ff fd7c 	bl	8004f48 <xTimerGenericCommand>
 8005450:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	603b      	str	r3, [r7, #0]
    }
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800546e:	4b09      	ldr	r3, [pc, #36]	; (8005494 <prvSwitchTimerLists+0xc0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1b1      	bne.n	80053dc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005478:	4b06      	ldr	r3, [pc, #24]	; (8005494 <prvSwitchTimerLists+0xc0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <prvSwitchTimerLists+0xc4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a04      	ldr	r2, [pc, #16]	; (8005494 <prvSwitchTimerLists+0xc0>)
 8005484:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005486:	4a04      	ldr	r2, [pc, #16]	; (8005498 <prvSwitchTimerLists+0xc4>)
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	6013      	str	r3, [r2, #0]
    }
 800548c:	bf00      	nop
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	200002bc 	.word	0x200002bc
 8005498:	200002c0 	.word	0x200002c0

0800549c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80054a0:	f000 f9e0 	bl	8005864 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80054a4:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <prvCheckForValidListAndQueue+0x54>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d11d      	bne.n	80054e8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80054ac:	4811      	ldr	r0, [pc, #68]	; (80054f4 <prvCheckForValidListAndQueue+0x58>)
 80054ae:	f7fd fce5 	bl	8002e7c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80054b2:	4811      	ldr	r0, [pc, #68]	; (80054f8 <prvCheckForValidListAndQueue+0x5c>)
 80054b4:	f7fd fce2 	bl	8002e7c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80054b8:	4b10      	ldr	r3, [pc, #64]	; (80054fc <prvCheckForValidListAndQueue+0x60>)
 80054ba:	4a0e      	ldr	r2, [pc, #56]	; (80054f4 <prvCheckForValidListAndQueue+0x58>)
 80054bc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80054be:	4b10      	ldr	r3, [pc, #64]	; (8005500 <prvCheckForValidListAndQueue+0x64>)
 80054c0:	4a0d      	ldr	r2, [pc, #52]	; (80054f8 <prvCheckForValidListAndQueue+0x5c>)
 80054c2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80054c4:	2200      	movs	r2, #0
 80054c6:	210c      	movs	r1, #12
 80054c8:	200a      	movs	r0, #10
 80054ca:	f7fd fdf3 	bl	80030b4 <xQueueGenericCreate>
 80054ce:	4603      	mov	r3, r0
 80054d0:	4a07      	ldr	r2, [pc, #28]	; (80054f0 <prvCheckForValidListAndQueue+0x54>)
 80054d2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80054d4:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <prvCheckForValidListAndQueue+0x54>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054dc:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <prvCheckForValidListAndQueue+0x54>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4908      	ldr	r1, [pc, #32]	; (8005504 <prvCheckForValidListAndQueue+0x68>)
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fe fc76 	bl	8003dd4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80054e8:	f000 f9ec 	bl	80058c4 <vPortExitCritical>
    }
 80054ec:	bf00      	nop
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	200002c4 	.word	0x200002c4
 80054f4:	20000294 	.word	0x20000294
 80054f8:	200002a8 	.word	0x200002a8
 80054fc:	200002bc 	.word	0x200002bc
 8005500:	200002c0 	.word	0x200002c0
 8005504:	0800915c 	.word	0x0800915c

08005508 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3b04      	subs	r3, #4
 8005518:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005520:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3b04      	subs	r3, #4
 8005526:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f023 0201 	bic.w	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3b04      	subs	r3, #4
 8005536:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005538:	4a0c      	ldr	r2, [pc, #48]	; (800556c <pxPortInitialiseStack+0x64>)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3b14      	subs	r3, #20
 8005542:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3b04      	subs	r3, #4
 800554e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f06f 0202 	mvn.w	r2, #2
 8005556:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	3b20      	subs	r3, #32
 800555c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800555e:	68fb      	ldr	r3, [r7, #12]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	08005571 	.word	0x08005571

08005570 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800557a:	4b12      	ldr	r3, [pc, #72]	; (80055c4 <prvTaskExitError+0x54>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	d00a      	beq.n	800559a <prvTaskExitError+0x2a>
        __asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	60fb      	str	r3, [r7, #12]
    }
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <prvTaskExitError+0x28>
        __asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	60bb      	str	r3, [r7, #8]
    }
 80055ac:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80055ae:	bf00      	nop
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0fc      	beq.n	80055b0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80055b6:	bf00      	nop
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	20000010 	.word	0x20000010
	...

080055d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80055d0:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <pxCurrentTCBConst2>)
 80055d2:	6819      	ldr	r1, [r3, #0]
 80055d4:	6808      	ldr	r0, [r1, #0]
 80055d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055da:	f380 8809 	msr	PSP, r0
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f04f 0000 	mov.w	r0, #0
 80055e6:	f380 8811 	msr	BASEPRI, r0
 80055ea:	4770      	bx	lr
 80055ec:	f3af 8000 	nop.w

080055f0 <pxCurrentTCBConst2>:
 80055f0:	20000190 	.word	0x20000190
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop

080055f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80055f8:	4808      	ldr	r0, [pc, #32]	; (800561c <prvPortStartFirstTask+0x24>)
 80055fa:	6800      	ldr	r0, [r0, #0]
 80055fc:	6800      	ldr	r0, [r0, #0]
 80055fe:	f380 8808 	msr	MSP, r0
 8005602:	f04f 0000 	mov.w	r0, #0
 8005606:	f380 8814 	msr	CONTROL, r0
 800560a:	b662      	cpsie	i
 800560c:	b661      	cpsie	f
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	df00      	svc	0
 8005618:	bf00      	nop
 800561a:	0000      	.short	0x0000
 800561c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop

08005624 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800562a:	4b46      	ldr	r3, [pc, #280]	; (8005744 <xPortStartScheduler+0x120>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a46      	ldr	r2, [pc, #280]	; (8005748 <xPortStartScheduler+0x124>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d10a      	bne.n	800564a <xPortStartScheduler+0x26>
        __asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	613b      	str	r3, [r7, #16]
    }
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800564a:	4b3e      	ldr	r3, [pc, #248]	; (8005744 <xPortStartScheduler+0x120>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a3f      	ldr	r2, [pc, #252]	; (800574c <xPortStartScheduler+0x128>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d10a      	bne.n	800566a <xPortStartScheduler+0x46>
        __asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	60fb      	str	r3, [r7, #12]
    }
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800566a:	4b39      	ldr	r3, [pc, #228]	; (8005750 <xPortStartScheduler+0x12c>)
 800566c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	22ff      	movs	r2, #255	; 0xff
 800567a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	b2db      	uxtb	r3, r3
 8005682:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800568c:	b2da      	uxtb	r2, r3
 800568e:	4b31      	ldr	r3, [pc, #196]	; (8005754 <xPortStartScheduler+0x130>)
 8005690:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005692:	4b31      	ldr	r3, [pc, #196]	; (8005758 <xPortStartScheduler+0x134>)
 8005694:	2207      	movs	r2, #7
 8005696:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005698:	e009      	b.n	80056ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800569a:	4b2f      	ldr	r3, [pc, #188]	; (8005758 <xPortStartScheduler+0x134>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3b01      	subs	r3, #1
 80056a0:	4a2d      	ldr	r2, [pc, #180]	; (8005758 <xPortStartScheduler+0x134>)
 80056a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b6:	2b80      	cmp	r3, #128	; 0x80
 80056b8:	d0ef      	beq.n	800569a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056ba:	4b27      	ldr	r3, [pc, #156]	; (8005758 <xPortStartScheduler+0x134>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f1c3 0307 	rsb	r3, r3, #7
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d00a      	beq.n	80056dc <xPortStartScheduler+0xb8>
        __asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	60bb      	str	r3, [r7, #8]
    }
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056dc:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <xPortStartScheduler+0x134>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <xPortStartScheduler+0x134>)
 80056e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056e6:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <xPortStartScheduler+0x134>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056ee:	4a1a      	ldr	r2, [pc, #104]	; (8005758 <xPortStartScheduler+0x134>)
 80056f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80056fa:	4b18      	ldr	r3, [pc, #96]	; (800575c <xPortStartScheduler+0x138>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a17      	ldr	r2, [pc, #92]	; (800575c <xPortStartScheduler+0x138>)
 8005700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005704:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005706:	4b15      	ldr	r3, [pc, #84]	; (800575c <xPortStartScheduler+0x138>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a14      	ldr	r2, [pc, #80]	; (800575c <xPortStartScheduler+0x138>)
 800570c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005710:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005712:	f000 f963 	bl	80059dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005716:	4b12      	ldr	r3, [pc, #72]	; (8005760 <xPortStartScheduler+0x13c>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800571c:	f000 f982 	bl	8005a24 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005720:	4b10      	ldr	r3, [pc, #64]	; (8005764 <xPortStartScheduler+0x140>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a0f      	ldr	r2, [pc, #60]	; (8005764 <xPortStartScheduler+0x140>)
 8005726:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800572a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800572c:	f7ff ff64 	bl	80055f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005730:	f7fe ff40 	bl	80045b4 <vTaskSwitchContext>
    prvTaskExitError();
 8005734:	f7ff ff1c 	bl	8005570 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	e000ed00 	.word	0xe000ed00
 8005748:	410fc271 	.word	0x410fc271
 800574c:	410fc270 	.word	0x410fc270
 8005750:	e000e400 	.word	0xe000e400
 8005754:	200002d0 	.word	0x200002d0
 8005758:	200002d4 	.word	0x200002d4
 800575c:	e000ed20 	.word	0xe000ed20
 8005760:	20000010 	.word	0x20000010
 8005764:	e000ef34 	.word	0xe000ef34

08005768 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800576e:	4b37      	ldr	r3, [pc, #220]	; (800584c <vInitPrioGroupValue+0xe4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a37      	ldr	r2, [pc, #220]	; (8005850 <vInitPrioGroupValue+0xe8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d10a      	bne.n	800578e <vInitPrioGroupValue+0x26>
        __asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	613b      	str	r3, [r7, #16]
    }
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800578e:	4b2f      	ldr	r3, [pc, #188]	; (800584c <vInitPrioGroupValue+0xe4>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a30      	ldr	r2, [pc, #192]	; (8005854 <vInitPrioGroupValue+0xec>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d10a      	bne.n	80057ae <vInitPrioGroupValue+0x46>
        __asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	60fb      	str	r3, [r7, #12]
    }
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057ae:	4b2a      	ldr	r3, [pc, #168]	; (8005858 <vInitPrioGroupValue+0xf0>)
 80057b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	22ff      	movs	r2, #255	; 0xff
 80057be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	4b22      	ldr	r3, [pc, #136]	; (800585c <vInitPrioGroupValue+0xf4>)
 80057d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057d6:	4b22      	ldr	r3, [pc, #136]	; (8005860 <vInitPrioGroupValue+0xf8>)
 80057d8:	2207      	movs	r2, #7
 80057da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057dc:	e009      	b.n	80057f2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80057de:	4b20      	ldr	r3, [pc, #128]	; (8005860 <vInitPrioGroupValue+0xf8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	4a1e      	ldr	r2, [pc, #120]	; (8005860 <vInitPrioGroupValue+0xf8>)
 80057e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fa:	2b80      	cmp	r3, #128	; 0x80
 80057fc:	d0ef      	beq.n	80057de <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057fe:	4b18      	ldr	r3, [pc, #96]	; (8005860 <vInitPrioGroupValue+0xf8>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f1c3 0307 	rsb	r3, r3, #7
 8005806:	2b04      	cmp	r3, #4
 8005808:	d00a      	beq.n	8005820 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	60bb      	str	r3, [r7, #8]
    }
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005820:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <vInitPrioGroupValue+0xf8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	4a0e      	ldr	r2, [pc, #56]	; (8005860 <vInitPrioGroupValue+0xf8>)
 8005828:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800582a:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <vInitPrioGroupValue+0xf8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005832:	4a0b      	ldr	r2, [pc, #44]	; (8005860 <vInitPrioGroupValue+0xf8>)
 8005834:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	b2da      	uxtb	r2, r3
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	e000ed00 	.word	0xe000ed00
 8005850:	410fc271 	.word	0x410fc271
 8005854:	410fc270 	.word	0x410fc270
 8005858:	e000e400 	.word	0xe000e400
 800585c:	200002d0 	.word	0x200002d0
 8005860:	200002d4 	.word	0x200002d4

08005864 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
        __asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	607b      	str	r3, [r7, #4]
    }
 800587c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <vPortEnterCritical+0x58>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3301      	adds	r3, #1
 8005884:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <vPortEnterCritical+0x58>)
 8005886:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005888:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <vPortEnterCritical+0x58>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d10f      	bne.n	80058b0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <vPortEnterCritical+0x5c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <vPortEnterCritical+0x4c>
        __asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	603b      	str	r3, [r7, #0]
    }
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <vPortEnterCritical+0x4a>
    }
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	20000010 	.word	0x20000010
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <vPortExitCritical+0x50>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <vPortExitCritical+0x24>
        __asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	607b      	str	r3, [r7, #4]
    }
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <vPortExitCritical+0x50>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <vPortExitCritical+0x50>)
 80058f0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <vPortExitCritical+0x50>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <vPortExitCritical+0x42>
 80058fa:	2300      	movs	r3, #0
 80058fc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f383 8811 	msr	BASEPRI, r3
    }
 8005904:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20000010 	.word	0x20000010
	...

08005920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005920:	f3ef 8009 	mrs	r0, PSP
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	4b15      	ldr	r3, [pc, #84]	; (8005980 <pxCurrentTCBConst>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	f01e 0f10 	tst.w	lr, #16
 8005930:	bf08      	it	eq
 8005932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593a:	6010      	str	r0, [r2, #0]
 800593c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005944:	f380 8811 	msr	BASEPRI, r0
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f7fe fe30 	bl	80045b4 <vTaskSwitchContext>
 8005954:	f04f 0000 	mov.w	r0, #0
 8005958:	f380 8811 	msr	BASEPRI, r0
 800595c:	bc09      	pop	{r0, r3}
 800595e:	6819      	ldr	r1, [r3, #0]
 8005960:	6808      	ldr	r0, [r1, #0]
 8005962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005966:	f01e 0f10 	tst.w	lr, #16
 800596a:	bf08      	it	eq
 800596c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005970:	f380 8809 	msr	PSP, r0
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	f3af 8000 	nop.w

08005980 <pxCurrentTCBConst>:
 8005980:	20000190 	.word	0x20000190
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop

08005988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
        __asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
    }
 80059a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80059a2:	f002 fb87 	bl	80080b4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80059a6:	f7fe fd49 	bl	800443c <xTaskIncrementTick>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d006      	beq.n	80059be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80059b0:	f002 fbde 	bl	8008170 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059b4:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <SysTick_Handler+0x50>)
 80059b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	e001      	b.n	80059c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80059be:	f002 fbbb 	bl	8008138 <SEGGER_SYSVIEW_RecordExitISR>
 80059c2:	2300      	movs	r3, #0
 80059c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	f383 8811 	msr	BASEPRI, r3
    }
 80059cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80059ce:	bf00      	nop
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	e000ed04 	.word	0xe000ed04

080059dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059e0:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <vPortSetupTimerInterrupt+0x34>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <vPortSetupTimerInterrupt+0x38>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <vPortSetupTimerInterrupt+0x3c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <vPortSetupTimerInterrupt+0x40>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	099b      	lsrs	r3, r3, #6
 80059f8:	4a09      	ldr	r2, [pc, #36]	; (8005a20 <vPortSetupTimerInterrupt+0x44>)
 80059fa:	3b01      	subs	r3, #1
 80059fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059fe:	4b04      	ldr	r3, [pc, #16]	; (8005a10 <vPortSetupTimerInterrupt+0x34>)
 8005a00:	2207      	movs	r2, #7
 8005a02:	601a      	str	r2, [r3, #0]
}
 8005a04:	bf00      	nop
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	e000e010 	.word	0xe000e010
 8005a14:	e000e018 	.word	0xe000e018
 8005a18:	20000000 	.word	0x20000000
 8005a1c:	10624dd3 	.word	0x10624dd3
 8005a20:	e000e014 	.word	0xe000e014

08005a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005a24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a34 <vPortEnableVFP+0x10>
 8005a28:	6801      	ldr	r1, [r0, #0]
 8005a2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a2e:	6001      	str	r1, [r0, #0]
 8005a30:	4770      	bx	lr
 8005a32:	0000      	.short	0x0000
 8005a34:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005a38:	bf00      	nop
 8005a3a:	bf00      	nop

08005a3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005a42:	f3ef 8305 	mrs	r3, IPSR
 8005a46:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b0f      	cmp	r3, #15
 8005a4c:	d914      	bls.n	8005a78 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a4e:	4a17      	ldr	r2, [pc, #92]	; (8005aac <vPortValidateInterruptPriority+0x70>)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4413      	add	r3, r2
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a58:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <vPortValidateInterruptPriority+0x74>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	7afa      	ldrb	r2, [r7, #11]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d20a      	bcs.n	8005a78 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	607b      	str	r3, [r7, #4]
    }
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a78:	4b0e      	ldr	r3, [pc, #56]	; (8005ab4 <vPortValidateInterruptPriority+0x78>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a80:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <vPortValidateInterruptPriority+0x7c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d90a      	bls.n	8005a9e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	603b      	str	r3, [r7, #0]
    }
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <vPortValidateInterruptPriority+0x60>
    }
 8005a9e:	bf00      	nop
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	e000e3f0 	.word	0xe000e3f0
 8005ab0:	200002d0 	.word	0x200002d0
 8005ab4:	e000ed0c 	.word	0xe000ed0c
 8005ab8:	200002d4 	.word	0x200002d4

08005abc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	; 0x28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005ac8:	f7fe fbe8 	bl	800429c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005acc:	4b65      	ldr	r3, [pc, #404]	; (8005c64 <pvPortMalloc+0x1a8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005ad4:	f000 f934 	bl	8005d40 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ad8:	4b63      	ldr	r3, [pc, #396]	; (8005c68 <pvPortMalloc+0x1ac>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f040 80a7 	bne.w	8005c34 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d02d      	beq.n	8005b48 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005aec:	2208      	movs	r2, #8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d227      	bcs.n	8005b48 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005af8:	2208      	movs	r2, #8
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4413      	add	r3, r2
 8005afe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d021      	beq.n	8005b4e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f023 0307 	bic.w	r3, r3, #7
 8005b10:	3308      	adds	r3, #8
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d214      	bcs.n	8005b42 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f023 0307 	bic.w	r3, r3, #7
 8005b1e:	3308      	adds	r3, #8
 8005b20:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d010      	beq.n	8005b4e <pvPortMalloc+0x92>
        __asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	617b      	str	r3, [r7, #20]
    }
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b46:	e002      	b.n	8005b4e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	607b      	str	r3, [r7, #4]
 8005b4c:	e000      	b.n	8005b50 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b4e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d06e      	beq.n	8005c34 <pvPortMalloc+0x178>
 8005b56:	4b45      	ldr	r3, [pc, #276]	; (8005c6c <pvPortMalloc+0x1b0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d869      	bhi.n	8005c34 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005b60:	4b43      	ldr	r3, [pc, #268]	; (8005c70 <pvPortMalloc+0x1b4>)
 8005b62:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005b64:	4b42      	ldr	r3, [pc, #264]	; (8005c70 <pvPortMalloc+0x1b4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b6a:	e004      	b.n	8005b76 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d903      	bls.n	8005b88 <pvPortMalloc+0xcc>
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1f1      	bne.n	8005b6c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005b88:	4b36      	ldr	r3, [pc, #216]	; (8005c64 <pvPortMalloc+0x1a8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d050      	beq.n	8005c34 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2208      	movs	r2, #8
 8005b98:	4413      	add	r3, r2
 8005b9a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	1ad2      	subs	r2, r2, r3
 8005bac:	2308      	movs	r3, #8
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d91f      	bls.n	8005bf4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4413      	add	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <pvPortMalloc+0x120>
        __asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	613b      	str	r3, [r7, #16]
    }
 8005bd8:	bf00      	nop
 8005bda:	e7fe      	b.n	8005bda <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005bee:	69b8      	ldr	r0, [r7, #24]
 8005bf0:	f000 f908 	bl	8005e04 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005bf4:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <pvPortMalloc+0x1b0>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	4a1b      	ldr	r2, [pc, #108]	; (8005c6c <pvPortMalloc+0x1b0>)
 8005c00:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c02:	4b1a      	ldr	r3, [pc, #104]	; (8005c6c <pvPortMalloc+0x1b0>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <pvPortMalloc+0x1b8>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d203      	bcs.n	8005c16 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c0e:	4b17      	ldr	r3, [pc, #92]	; (8005c6c <pvPortMalloc+0x1b0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a18      	ldr	r2, [pc, #96]	; (8005c74 <pvPortMalloc+0x1b8>)
 8005c14:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <pvPortMalloc+0x1ac>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005c2a:	4b13      	ldr	r3, [pc, #76]	; (8005c78 <pvPortMalloc+0x1bc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	4a11      	ldr	r2, [pc, #68]	; (8005c78 <pvPortMalloc+0x1bc>)
 8005c32:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005c34:	f7fe fb40 	bl	80042b8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <pvPortMalloc+0x19c>
        __asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	60fb      	str	r3, [r7, #12]
    }
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <pvPortMalloc+0x19a>
    return pvReturn;
 8005c58:	69fb      	ldr	r3, [r7, #28]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3728      	adds	r7, #40	; 0x28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20012ee0 	.word	0x20012ee0
 8005c68:	20012ef4 	.word	0x20012ef4
 8005c6c:	20012ee4 	.word	0x20012ee4
 8005c70:	20012ed8 	.word	0x20012ed8
 8005c74:	20012ee8 	.word	0x20012ee8
 8005c78:	20012eec 	.word	0x20012eec

08005c7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d04d      	beq.n	8005d2a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005c8e:	2308      	movs	r3, #8
 8005c90:	425b      	negs	r3, r3
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4413      	add	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	4b24      	ldr	r3, [pc, #144]	; (8005d34 <vPortFree+0xb8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10a      	bne.n	8005cc0 <vPortFree+0x44>
        __asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	60fb      	str	r3, [r7, #12]
    }
 8005cbc:	bf00      	nop
 8005cbe:	e7fe      	b.n	8005cbe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <vPortFree+0x62>
        __asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	60bb      	str	r3, [r7, #8]
    }
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <vPortFree+0xb8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01e      	beq.n	8005d2a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d11a      	bne.n	8005d2a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <vPortFree+0xb8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	401a      	ands	r2, r3
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005d04:	f7fe faca 	bl	800429c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	4b0a      	ldr	r3, [pc, #40]	; (8005d38 <vPortFree+0xbc>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4413      	add	r3, r2
 8005d12:	4a09      	ldr	r2, [pc, #36]	; (8005d38 <vPortFree+0xbc>)
 8005d14:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d16:	6938      	ldr	r0, [r7, #16]
 8005d18:	f000 f874 	bl	8005e04 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005d1c:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <vPortFree+0xc0>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3301      	adds	r3, #1
 8005d22:	4a06      	ldr	r2, [pc, #24]	; (8005d3c <vPortFree+0xc0>)
 8005d24:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005d26:	f7fe fac7 	bl	80042b8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005d2a:	bf00      	nop
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20012ef4 	.word	0x20012ef4
 8005d38:	20012ee4 	.word	0x20012ee4
 8005d3c:	20012ef0 	.word	0x20012ef0

08005d40 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d46:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005d4a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005d4c:	4b27      	ldr	r3, [pc, #156]	; (8005dec <prvHeapInit+0xac>)
 8005d4e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00c      	beq.n	8005d74 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3307      	adds	r3, #7
 8005d5e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0307 	bic.w	r3, r3, #7
 8005d66:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	4a1f      	ldr	r2, [pc, #124]	; (8005dec <prvHeapInit+0xac>)
 8005d70:	4413      	add	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d78:	4a1d      	ldr	r2, [pc, #116]	; (8005df0 <prvHeapInit+0xb0>)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005d7e:	4b1c      	ldr	r3, [pc, #112]	; (8005df0 <prvHeapInit+0xb0>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	4413      	add	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1a9b      	subs	r3, r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0307 	bic.w	r3, r3, #7
 8005d9a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4a15      	ldr	r2, [pc, #84]	; (8005df4 <prvHeapInit+0xb4>)
 8005da0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005da2:	4b14      	ldr	r3, [pc, #80]	; (8005df4 <prvHeapInit+0xb4>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2200      	movs	r2, #0
 8005da8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005daa:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <prvHeapInit+0xb4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2200      	movs	r2, #0
 8005db0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	1ad2      	subs	r2, r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <prvHeapInit+0xb4>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <prvHeapInit+0xb8>)
 8005dce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	4a09      	ldr	r2, [pc, #36]	; (8005dfc <prvHeapInit+0xbc>)
 8005dd6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005dd8:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <prvHeapInit+0xc0>)
 8005dda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005dde:	601a      	str	r2, [r3, #0]
}
 8005de0:	bf00      	nop
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	200002d8 	.word	0x200002d8
 8005df0:	20012ed8 	.word	0x20012ed8
 8005df4:	20012ee0 	.word	0x20012ee0
 8005df8:	20012ee8 	.word	0x20012ee8
 8005dfc:	20012ee4 	.word	0x20012ee4
 8005e00:	20012ef4 	.word	0x20012ef4

08005e04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e0c:	4b28      	ldr	r3, [pc, #160]	; (8005eb0 <prvInsertBlockIntoFreeList+0xac>)
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	e002      	b.n	8005e18 <prvInsertBlockIntoFreeList+0x14>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d8f7      	bhi.n	8005e12 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d108      	bne.n	8005e46 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	441a      	add	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	441a      	add	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d118      	bne.n	8005e8c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4b15      	ldr	r3, [pc, #84]	; (8005eb4 <prvInsertBlockIntoFreeList+0xb0>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d00d      	beq.n	8005e82 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	441a      	add	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	e008      	b.n	8005e94 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e82:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <prvInsertBlockIntoFreeList+0xb0>)
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	e003      	b.n	8005e94 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d002      	beq.n	8005ea2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005ea2:	bf00      	nop
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	20012ed8 	.word	0x20012ed8
 8005eb4:	20012ee0 	.word	0x20012ee0

08005eb8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005ebc:	4803      	ldr	r0, [pc, #12]	; (8005ecc <_cbSendSystemDesc+0x14>)
 8005ebe:	f002 f8a3 	bl	8008008 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005ec2:	4803      	ldr	r0, [pc, #12]	; (8005ed0 <_cbSendSystemDesc+0x18>)
 8005ec4:	f002 f8a0 	bl	8008008 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005ec8:	bf00      	nop
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	08009164 	.word	0x08009164
 8005ed0:	08009190 	.word	0x08009190

08005ed4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005ed8:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <SEGGER_SYSVIEW_Conf+0x20>)
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <SEGGER_SYSVIEW_Conf+0x20>)
 8005ede:	6819      	ldr	r1, [r3, #0]
 8005ee0:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <SEGGER_SYSVIEW_Conf+0x24>)
 8005ee2:	4a06      	ldr	r2, [pc, #24]	; (8005efc <SEGGER_SYSVIEW_Conf+0x28>)
 8005ee4:	f001 fc0c 	bl	8007700 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005ee8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005eec:	f001 fc4c 	bl	8007788 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005ef0:	bf00      	nop
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20000000 	.word	0x20000000
 8005ef8:	08005eb9 	.word	0x08005eb9
 8005efc:	08009230 	.word	0x08009230

08005f00 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005f06:	2300      	movs	r3, #0
 8005f08:	607b      	str	r3, [r7, #4]
 8005f0a:	e033      	b.n	8005f74 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005f0c:	491e      	ldr	r1, [pc, #120]	; (8005f88 <_cbSendTaskList+0x88>)
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	491a      	ldr	r1, [pc, #104]	; (8005f88 <_cbSendTaskList+0x88>)
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	6819      	ldr	r1, [r3, #0]
 8005f2e:	4c16      	ldr	r4, [pc, #88]	; (8005f88 <_cbSendTaskList+0x88>)
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4423      	add	r3, r4
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	681c      	ldr	r4, [r3, #0]
 8005f40:	4d11      	ldr	r5, [pc, #68]	; (8005f88 <_cbSendTaskList+0x88>)
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	442b      	add	r3, r5
 8005f4e:	330c      	adds	r3, #12
 8005f50:	681d      	ldr	r5, [r3, #0]
 8005f52:	4e0d      	ldr	r6, [pc, #52]	; (8005f88 <_cbSendTaskList+0x88>)
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4433      	add	r3, r6
 8005f60:	3310      	adds	r3, #16
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	462b      	mov	r3, r5
 8005f68:	4622      	mov	r2, r4
 8005f6a:	f000 f8bd 	bl	80060e8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3301      	adds	r3, #1
 8005f72:	607b      	str	r3, [r7, #4]
 8005f74:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <_cbSendTaskList+0x8c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d3c6      	bcc.n	8005f0c <_cbSendTaskList+0xc>
  }
}
 8005f7e:	bf00      	nop
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f88:	20012ef8 	.word	0x20012ef8
 8005f8c:	20012f98 	.word	0x20012f98

08005f90 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005f98:	f7fe fa3e 	bl	8004418 <xTaskGetTickCountFromISR>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	469a      	mov	sl, r3
 8005fa2:	4693      	mov	fp, r2
 8005fa4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005fa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	f04f 0a00 	mov.w	sl, #0
 8005fb4:	f04f 0b00 	mov.w	fp, #0
 8005fb8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005fbc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005fc0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005fc4:	4652      	mov	r2, sl
 8005fc6:	465b      	mov	r3, fp
 8005fc8:	1a14      	subs	r4, r2, r0
 8005fca:	eb63 0501 	sbc.w	r5, r3, r1
 8005fce:	f04f 0200 	mov.w	r2, #0
 8005fd2:	f04f 0300 	mov.w	r3, #0
 8005fd6:	00ab      	lsls	r3, r5, #2
 8005fd8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005fdc:	00a2      	lsls	r2, r4, #2
 8005fde:	4614      	mov	r4, r2
 8005fe0:	461d      	mov	r5, r3
 8005fe2:	eb14 0800 	adds.w	r8, r4, r0
 8005fe6:	eb45 0901 	adc.w	r9, r5, r1
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ffe:	4690      	mov	r8, r2
 8006000:	4699      	mov	r9, r3
 8006002:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006006:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800600a:	4610      	mov	r0, r2
 800600c:	4619      	mov	r1, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006018 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006026:	2205      	movs	r2, #5
 8006028:	492b      	ldr	r1, [pc, #172]	; (80060d8 <SYSVIEW_AddTask+0xc0>)
 800602a:	68b8      	ldr	r0, [r7, #8]
 800602c:	f002 fbac 	bl	8008788 <memcmp>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d04b      	beq.n	80060ce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006036:	4b29      	ldr	r3, [pc, #164]	; (80060dc <SYSVIEW_AddTask+0xc4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b07      	cmp	r3, #7
 800603c:	d903      	bls.n	8006046 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800603e:	4828      	ldr	r0, [pc, #160]	; (80060e0 <SYSVIEW_AddTask+0xc8>)
 8006040:	f002 faf4 	bl	800862c <SEGGER_SYSVIEW_Warn>
    return;
 8006044:	e044      	b.n	80060d0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006046:	4b25      	ldr	r3, [pc, #148]	; (80060dc <SYSVIEW_AddTask+0xc4>)
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	4926      	ldr	r1, [pc, #152]	; (80060e4 <SYSVIEW_AddTask+0xcc>)
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800605a:	4b20      	ldr	r3, [pc, #128]	; (80060dc <SYSVIEW_AddTask+0xc4>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4921      	ldr	r1, [pc, #132]	; (80060e4 <SYSVIEW_AddTask+0xcc>)
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	3304      	adds	r3, #4
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006070:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <SYSVIEW_AddTask+0xc4>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	491b      	ldr	r1, [pc, #108]	; (80060e4 <SYSVIEW_AddTask+0xcc>)
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	3308      	adds	r3, #8
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006086:	4b15      	ldr	r3, [pc, #84]	; (80060dc <SYSVIEW_AddTask+0xc4>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4916      	ldr	r1, [pc, #88]	; (80060e4 <SYSVIEW_AddTask+0xcc>)
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	330c      	adds	r3, #12
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800609c:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <SYSVIEW_AddTask+0xc4>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	4910      	ldr	r1, [pc, #64]	; (80060e4 <SYSVIEW_AddTask+0xcc>)
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	3310      	adds	r3, #16
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80060b2:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <SYSVIEW_AddTask+0xc4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3301      	adds	r3, #1
 80060b8:	4a08      	ldr	r2, [pc, #32]	; (80060dc <SYSVIEW_AddTask+0xc4>)
 80060ba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f80e 	bl	80060e8 <SYSVIEW_SendTaskInfo>
 80060cc:	e000      	b.n	80060d0 <SYSVIEW_AddTask+0xb8>
    return;
 80060ce:	bf00      	nop

}
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	080091a0 	.word	0x080091a0
 80060dc:	20012f98 	.word	0x20012f98
 80060e0:	080091a8 	.word	0x080091a8
 80060e4:	20012ef8 	.word	0x20012ef8

080060e8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	; 0x28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80060f6:	f107 0314 	add.w	r3, r7, #20
 80060fa:	2214      	movs	r2, #20
 80060fc:	2100      	movs	r1, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f002 fb60 	bl	80087c4 <memset>
  TaskInfo.TaskID     = TaskID;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006118:	f107 0314 	add.w	r3, r7, #20
 800611c:	4618      	mov	r0, r3
 800611e:	f001 fe7b 	bl	8007e18 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006122:	bf00      	nop
 8006124:	3728      	adds	r7, #40	; 0x28
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <__NVIC_EnableIRQ>:
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800613a:	2b00      	cmp	r3, #0
 800613c:	db0b      	blt.n	8006156 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	f003 021f 	and.w	r2, r3, #31
 8006144:	4907      	ldr	r1, [pc, #28]	; (8006164 <__NVIC_EnableIRQ+0x38>)
 8006146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	2001      	movs	r0, #1
 800614e:	fa00 f202 	lsl.w	r2, r0, r2
 8006152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	e000e100 	.word	0xe000e100

08006168 <__NVIC_SetPriority>:
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	6039      	str	r1, [r7, #0]
 8006172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006178:	2b00      	cmp	r3, #0
 800617a:	db0a      	blt.n	8006192 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	b2da      	uxtb	r2, r3
 8006180:	490c      	ldr	r1, [pc, #48]	; (80061b4 <__NVIC_SetPriority+0x4c>)
 8006182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006186:	0112      	lsls	r2, r2, #4
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	440b      	add	r3, r1
 800618c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006190:	e00a      	b.n	80061a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	b2da      	uxtb	r2, r3
 8006196:	4908      	ldr	r1, [pc, #32]	; (80061b8 <__NVIC_SetPriority+0x50>)
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	3b04      	subs	r3, #4
 80061a0:	0112      	lsls	r2, r2, #4
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	440b      	add	r3, r1
 80061a6:	761a      	strb	r2, [r3, #24]
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	e000e100 	.word	0xe000e100
 80061b8:	e000ed00 	.word	0xe000ed00

080061bc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80061c2:	f002 fa8f 	bl	80086e4 <SEGGER_SYSVIEW_IsStarted>
 80061c6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80061ce:	f001 fca7 	bl	8007b20 <SEGGER_SYSVIEW_Start>
  }
}
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80061e6:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <_cbOnUARTRx+0x3c>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d806      	bhi.n	80061fc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80061ee:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <_cbOnUARTRx+0x3c>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	4b08      	ldr	r3, [pc, #32]	; (8006218 <_cbOnUARTRx+0x3c>)
 80061f8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80061fa:	e009      	b.n	8006210 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80061fc:	f7ff ffde 	bl	80061bc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8006200:	4b05      	ldr	r3, [pc, #20]	; (8006218 <_cbOnUARTRx+0x3c>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	4618      	mov	r0, r3
 8006206:	1dfb      	adds	r3, r7, #7
 8006208:	2201      	movs	r2, #1
 800620a:	4619      	mov	r1, r3
 800620c:	f000 fb9c 	bl	8006948 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8006210:	bf00      	nop
}
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	20000014 	.word	0x20000014

0800621c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8006224:	4b14      	ldr	r3, [pc, #80]	; (8006278 <_cbOnUARTTx+0x5c>)
 8006226:	785b      	ldrb	r3, [r3, #1]
 8006228:	2b03      	cmp	r3, #3
 800622a:	d80f      	bhi.n	800624c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800622c:	4b12      	ldr	r3, [pc, #72]	; (8006278 <_cbOnUARTTx+0x5c>)
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	461a      	mov	r2, r3
 8006232:	4b12      	ldr	r3, [pc, #72]	; (800627c <_cbOnUARTTx+0x60>)
 8006234:	5c9a      	ldrb	r2, [r3, r2]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800623a:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <_cbOnUARTTx+0x5c>)
 800623c:	785b      	ldrb	r3, [r3, #1]
 800623e:	3301      	adds	r3, #1
 8006240:	b2da      	uxtb	r2, r3
 8006242:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <_cbOnUARTTx+0x5c>)
 8006244:	705a      	strb	r2, [r3, #1]
    r = 1;
 8006246:	2301      	movs	r3, #1
 8006248:	60fb      	str	r3, [r7, #12]
    goto Done;
 800624a:	e00f      	b.n	800626c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <_cbOnUARTTx+0x5c>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fa1b 	bl	8006690 <SEGGER_RTT_ReadUpBufferNoLock>
 800625a:	4603      	mov	r3, r0
 800625c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	da02      	bge.n	800626a <_cbOnUARTTx+0x4e>
    r = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	e000      	b.n	800626c <_cbOnUARTTx+0x50>
  }
Done:
 800626a:	bf00      	nop
  return r;
 800626c:	68fb      	ldr	r3, [r7, #12]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000014 	.word	0x20000014
 800627c:	08009238 	.word	0x08009238

08006280 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8006288:	4a04      	ldr	r2, [pc, #16]	; (800629c <SEGGER_UART_init+0x1c>)
 800628a:	4905      	ldr	r1, [pc, #20]	; (80062a0 <SEGGER_UART_init+0x20>)
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f865 	bl	800635c <HIF_UART_Init>
}
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	080061dd 	.word	0x080061dd
 80062a0:	0800621d 	.word	0x0800621d

080062a4 <USART1_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART1_IRQHandler(void);
void USART1_IRQHandler(void) {int UsartStatus;
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80062aa:	4b1e      	ldr	r3, [pc, #120]	; (8006324 <USART1_IRQHandler+0x80>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d011      	beq.n	80062de <USART1_IRQHandler+0x3a>
    v = USART_RDR;                                      // Read data
 80062ba:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <USART1_IRQHandler+0x84>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f003 030b 	and.w	r3, r3, #11
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d108      	bne.n	80062de <USART1_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80062cc:	4b17      	ldr	r3, [pc, #92]	; (800632c <USART1_IRQHandler+0x88>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d004      	beq.n	80062de <USART1_IRQHandler+0x3a>
        _cbOnRx(v);
 80062d4:	4b15      	ldr	r3, [pc, #84]	; (800632c <USART1_IRQHandler+0x88>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	79fa      	ldrb	r2, [r7, #7]
 80062da:	4610      	mov	r0, r2
 80062dc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01a      	beq.n	800631e <USART1_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80062e8:	4b11      	ldr	r3, [pc, #68]	; (8006330 <USART1_IRQHandler+0x8c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d015      	beq.n	800631c <USART1_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80062f0:	4b0f      	ldr	r3, [pc, #60]	; (8006330 <USART1_IRQHandler+0x8c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	1dfa      	adds	r2, r7, #7
 80062f6:	4610      	mov	r0, r2
 80062f8:	4798      	blx	r3
 80062fa:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <USART1_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8006302:	4b0c      	ldr	r3, [pc, #48]	; (8006334 <USART1_IRQHandler+0x90>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a0b      	ldr	r2, [pc, #44]	; (8006334 <USART1_IRQHandler+0x90>)
 8006308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	e006      	b.n	800631e <USART1_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8006310:	4b04      	ldr	r3, [pc, #16]	; (8006324 <USART1_IRQHandler+0x80>)
 8006312:	681b      	ldr	r3, [r3, #0]
      USART_TDR = v;  // Start transmission by writing to data register
 8006314:	79fa      	ldrb	r2, [r7, #7]
 8006316:	4b08      	ldr	r3, [pc, #32]	; (8006338 <USART1_IRQHandler+0x94>)
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e000      	b.n	800631e <USART1_IRQHandler+0x7a>
      return;
 800631c:	bf00      	nop
    }
  }
}
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	4001381c 	.word	0x4001381c
 8006328:	40013824 	.word	0x40013824
 800632c:	20012f9c 	.word	0x20012f9c
 8006330:	20012fa0 	.word	0x20012fa0
 8006334:	40013800 	.word	0x40013800
 8006338:	40013828 	.word	0x40013828

0800633c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8006340:	4b05      	ldr	r3, [pc, #20]	; (8006358 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a04      	ldr	r2, [pc, #16]	; (8006358 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634a:	6013      	str	r3, [r2, #0]
}
 800634c:	bf00      	nop
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40013800 	.word	0x40013800

0800635c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB2ENR |= 1 << 14;                // Enable LPUART1 clock
 8006368:	4b2e      	ldr	r3, [pc, #184]	; (8006424 <HIF_UART_Init+0xc8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a2d      	ldr	r2, [pc, #180]	; (8006424 <HIF_UART_Init+0xc8>)
 800636e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006372:	6013      	str	r3, [r2, #0]
  RCC_AHB2ENR |= 1 << 2;                // Enable IO port A clock
 8006374:	4b2c      	ldr	r3, [pc, #176]	; (8006428 <HIF_UART_Init+0xcc>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a2b      	ldr	r2, [pc, #172]	; (8006428 <HIF_UART_Init+0xcc>)
 800637a:	f043 0304 	orr.w	r3, r3, #4
 800637e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8006380:	4b2a      	ldr	r3, [pc, #168]	; (800642c <HIF_UART_Init+0xd0>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800638c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f443 03ee 	orr.w	r3, r3, #7798784	; 0x770000
 8006394:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8006396:	4a25      	ldr	r2, [pc, #148]	; (800642c <HIF_UART_Init+0xd0>)
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800639c:	4b24      	ldr	r3, [pc, #144]	; (8006430 <HIF_UART_Init+0xd4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063a8:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 80063b0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80063b2:	4a1f      	ldr	r2, [pc, #124]	; (8006430 <HIF_UART_Init+0xd4>)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80063b8:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <HIF_UART_Init+0xd8>)
 80063ba:	f248 022d 	movw	r2, #32813	; 0x802d
 80063be:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80063c0:	4b1d      	ldr	r3, [pc, #116]	; (8006438 <HIF_UART_Init+0xdc>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80063c6:	4b1d      	ldr	r3, [pc, #116]	; (800643c <HIF_UART_Init+0xe0>)
 80063c8:	2280      	movs	r2, #128	; 0x80
 80063ca:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80063d2:	4a1b      	ldr	r2, [pc, #108]	; (8006440 <HIF_UART_Init+0xe4>)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063da:	3301      	adds	r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	085b      	lsrs	r3, r3, #1
 80063e2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ea:	d302      	bcc.n	80063f2 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80063ec:	f640 73ff 	movw	r3, #4095	; 0xfff
 80063f0:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d004      	beq.n	8006402 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	4a11      	ldr	r2, [pc, #68]	; (8006444 <HIF_UART_Init+0xe8>)
 80063fe:	b29b      	uxth	r3, r3
 8006400:	6013      	str	r3, [r2, #0]
  }

  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8006402:	4a11      	ldr	r2, [pc, #68]	; (8006448 <HIF_UART_Init+0xec>)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8006408:	4a10      	ldr	r2, [pc, #64]	; (800644c <HIF_UART_Init+0xf0>)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	6013      	str	r3, [r2, #0]

  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800640e:	2106      	movs	r1, #6
 8006410:	2025      	movs	r0, #37	; 0x25
 8006412:	f7ff fea9 	bl	8006168 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8006416:	2025      	movs	r0, #37	; 0x25
 8006418:	f7ff fe88 	bl	800612c <__NVIC_EnableIRQ>
}
 800641c:	bf00      	nop
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40021060 	.word	0x40021060
 8006428:	4002104c 	.word	0x4002104c
 800642c:	48000820 	.word	0x48000820
 8006430:	48000800 	.word	0x48000800
 8006434:	40013800 	.word	0x40013800
 8006438:	40013804 	.word	0x40013804
 800643c:	40013808 	.word	0x40013808
 8006440:	0bebc200 	.word	0x0bebc200
 8006444:	4001380c 	.word	0x4001380c
 8006448:	20012f9c 	.word	0x20012f9c
 800644c:	20012fa0 	.word	0x20012fa0

08006450 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8006456:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <_DoInit+0x98>)
 8006458:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2203      	movs	r2, #3
 800645e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2203      	movs	r2, #3
 8006464:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a20      	ldr	r2, [pc, #128]	; (80064ec <_DoInit+0x9c>)
 800646a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a20      	ldr	r2, [pc, #128]	; (80064f0 <_DoInit+0xa0>)
 8006470:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006478:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a17      	ldr	r2, [pc, #92]	; (80064ec <_DoInit+0x9c>)
 8006490:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a17      	ldr	r2, [pc, #92]	; (80064f4 <_DoInit+0xa4>)
 8006496:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2210      	movs	r2, #16
 800649c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3307      	adds	r3, #7
 80064b4:	4a10      	ldr	r2, [pc, #64]	; (80064f8 <_DoInit+0xa8>)
 80064b6:	6810      	ldr	r0, [r2, #0]
 80064b8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80064ba:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a0e      	ldr	r2, [pc, #56]	; (80064fc <_DoInit+0xac>)
 80064c2:	6810      	ldr	r0, [r2, #0]
 80064c4:	6018      	str	r0, [r3, #0]
 80064c6:	8891      	ldrh	r1, [r2, #4]
 80064c8:	7992      	ldrb	r2, [r2, #6]
 80064ca:	8099      	strh	r1, [r3, #4]
 80064cc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80064ce:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80064d8:	f3bf 8f5f 	dmb	sy
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	20012fa4 	.word	0x20012fa4
 80064ec:	080091f8 	.word	0x080091f8
 80064f0:	2001304c 	.word	0x2001304c
 80064f4:	2001344c 	.word	0x2001344c
 80064f8:	08009204 	.word	0x08009204
 80064fc:	08009208 	.word	0x08009208

08006500 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b08a      	sub	sp, #40	; 0x28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800650c:	2300      	movs	r3, #0
 800650e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	429a      	cmp	r2, r3
 8006522:	d905      	bls.n	8006530 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
 800652e:	e007      	b.n	8006540 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	69b9      	ldr	r1, [r7, #24]
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	1acb      	subs	r3, r1, r3
 800653a:	4413      	add	r3, r2
 800653c:	3b01      	subs	r3, #1
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654a:	4293      	cmp	r3, r2
 800654c:	bf28      	it	cs
 800654e:	4613      	movcs	r3, r2
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8006552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4293      	cmp	r3, r2
 8006558:	bf28      	it	cs
 800655a:	4613      	movcs	r3, r2
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8006568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	6978      	ldr	r0, [r7, #20]
 800656e:	f002 f91b 	bl	80087a8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8006572:	6a3a      	ldr	r2, [r7, #32]
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	4413      	add	r3, r2
 8006578:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	4413      	add	r3, r2
 8006580:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	4413      	add	r3, r2
 8006590:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	429a      	cmp	r2, r3
 800659a:	d101      	bne.n	80065a0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800659c:	2300      	movs	r3, #0
 800659e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80065a0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1b2      	bne.n	8006516 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80065b0:	6a3b      	ldr	r3, [r7, #32]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3728      	adds	r7, #40	; 0x28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b088      	sub	sp, #32
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d911      	bls.n	8006602 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	4413      	add	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	6938      	ldr	r0, [r7, #16]
 80065ee:	f002 f8db 	bl	80087a8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80065f2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80065f6:	69fa      	ldr	r2, [r7, #28]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	441a      	add	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8006600:	e01f      	b.n	8006642 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	4413      	add	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	6938      	ldr	r0, [r7, #16]
 8006616:	f002 f8c7 	bl	80087a8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	4413      	add	r3, r2
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4619      	mov	r1, r3
 8006632:	6938      	ldr	r0, [r7, #16]
 8006634:	f002 f8b8 	bl	80087a8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006638:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	60da      	str	r2, [r3, #12]
}
 8006642:	bf00      	nop
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800664a:	b480      	push	{r7}
 800664c:	b087      	sub	sp, #28
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	429a      	cmp	r2, r3
 8006664:	d808      	bhi.n	8006678 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	1ad2      	subs	r2, r2, r3
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	4413      	add	r3, r2
 8006672:	3b01      	subs	r3, #1
 8006674:	617b      	str	r3, [r7, #20]
 8006676:	e004      	b.n	8006682 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	3b01      	subs	r3, #1
 8006680:	617b      	str	r3, [r7, #20]
  }
  return r;
 8006682:	697b      	ldr	r3, [r7, #20]
}
 8006684:	4618      	mov	r0, r3
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	; 0x30
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800669c:	4b3e      	ldr	r3, [pc, #248]	; (8006798 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800669e:	623b      	str	r3, [r7, #32]
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80066aa:	f7ff fed1 	bl	8006450 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	4613      	mov	r3, r2
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	4413      	add	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	4a37      	ldr	r2, [pc, #220]	; (8006798 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80066bc:	4413      	add	r3, r2
 80066be:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80066d0:	2300      	movs	r3, #0
 80066d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80066d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d92b      	bls.n	8006734 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4293      	cmp	r3, r2
 80066ec:	bf28      	it	cs
 80066ee:	4613      	movcs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	4413      	add	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	6939      	ldr	r1, [r7, #16]
 8006700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006702:	f002 f851 	bl	80087a8 <memcpy>
    NumBytesRead += NumBytesRem;
 8006706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	4413      	add	r3, r2
 800670c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800670e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	4413      	add	r3, r2
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800671e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	4413      	add	r3, r2
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800672c:	429a      	cmp	r2, r3
 800672e:	d101      	bne.n	8006734 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8006730:	2300      	movs	r3, #0
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4293      	cmp	r3, r2
 8006742:	bf28      	it	cs
 8006744:	4613      	movcs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d019      	beq.n	8006782 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	4413      	add	r3, r2
 8006756:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	6939      	ldr	r1, [r7, #16]
 800675c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800675e:	f002 f823 	bl	80087a8 <memcpy>
    NumBytesRead += NumBytesRem;
 8006762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	4413      	add	r3, r2
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800676a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4413      	add	r3, r2
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800677a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	4413      	add	r3, r2
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800678c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006790:	4618      	mov	r0, r3
 8006792:	3730      	adds	r7, #48	; 0x30
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20012fa4 	.word	0x20012fa4

0800679c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800679c:	b580      	push	{r7, lr}
 800679e:	b08c      	sub	sp, #48	; 0x30
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80067a8:	4b3e      	ldr	r3, [pc, #248]	; (80068a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80067aa:	623b      	str	r3, [r7, #32]
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <SEGGER_RTT_ReadNoLock+0x1e>
 80067b6:	f7ff fe4b 	bl	8006450 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4613      	mov	r3, r2
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	4413      	add	r3, r2
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	3360      	adds	r3, #96	; 0x60
 80067c6:	4a37      	ldr	r2, [pc, #220]	; (80068a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80067c8:	4413      	add	r3, r2
 80067ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80067dc:	2300      	movs	r3, #0
 80067de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80067e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d92b      	bls.n	8006840 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4293      	cmp	r3, r2
 80067f8:	bf28      	it	cs
 80067fa:	4613      	movcs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	4413      	add	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	6939      	ldr	r1, [r7, #16]
 800680c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800680e:	f001 ffcb 	bl	80087a8 <memcpy>
    NumBytesRead += NumBytesRem;
 8006812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	4413      	add	r3, r2
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800681a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	4413      	add	r3, r2
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800682a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	4413      	add	r3, r2
 8006830:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006838:	429a      	cmp	r2, r3
 800683a:	d101      	bne.n	8006840 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800683c:	2300      	movs	r3, #0
 800683e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4293      	cmp	r3, r2
 800684e:	bf28      	it	cs
 8006850:	4613      	movcs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d019      	beq.n	800688e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	4413      	add	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	6939      	ldr	r1, [r7, #16]
 8006868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800686a:	f001 ff9d 	bl	80087a8 <memcpy>
    NumBytesRead += NumBytesRem;
 800686e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	4413      	add	r3, r2
 8006874:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	4413      	add	r3, r2
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	4413      	add	r3, r2
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006898:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800689c:	4618      	mov	r0, r3
 800689e:	3730      	adds	r7, #48	; 0x30
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20012fa4 	.word	0x20012fa4

080068a8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4613      	mov	r3, r2
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	4413      	add	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	3360      	adds	r3, #96	; 0x60
 80068c4:	4a1f      	ldr	r2, [pc, #124]	; (8006944 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80068c6:	4413      	add	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d029      	beq.n	8006926 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d82e      	bhi.n	8006934 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d013      	beq.n	8006906 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80068de:	e029      	b.n	8006934 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80068e0:	6978      	ldr	r0, [r7, #20]
 80068e2:	f7ff feb2 	bl	800664a <_GetAvailWriteSpace>
 80068e6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d202      	bcs.n	80068f6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80068f4:	e021      	b.n	800693a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	69b9      	ldr	r1, [r7, #24]
 80068fe:	6978      	ldr	r0, [r7, #20]
 8006900:	f7ff fe5b 	bl	80065ba <_WriteNoCheck>
    break;
 8006904:	e019      	b.n	800693a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006906:	6978      	ldr	r0, [r7, #20]
 8006908:	f7ff fe9f 	bl	800664a <_GetAvailWriteSpace>
 800690c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4293      	cmp	r3, r2
 8006914:	bf28      	it	cs
 8006916:	4613      	movcs	r3, r2
 8006918:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	69b9      	ldr	r1, [r7, #24]
 800691e:	6978      	ldr	r0, [r7, #20]
 8006920:	f7ff fe4b 	bl	80065ba <_WriteNoCheck>
    break;
 8006924:	e009      	b.n	800693a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	69b9      	ldr	r1, [r7, #24]
 800692a:	6978      	ldr	r0, [r7, #20]
 800692c:	f7ff fde8 	bl	8006500 <_WriteBlocking>
 8006930:	61f8      	str	r0, [r7, #28]
    break;
 8006932:	e002      	b.n	800693a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8006934:	2300      	movs	r3, #0
 8006936:	61fb      	str	r3, [r7, #28]
    break;
 8006938:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800693a:	69fb      	ldr	r3, [r7, #28]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3720      	adds	r7, #32
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20012fa4 	.word	0x20012fa4

08006948 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006954:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8006956:	61fb      	str	r3, [r7, #28]
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8006962:	f7ff fd75 	bl	8006450 <_DoInit>
  SEGGER_RTT_LOCK();
 8006966:	f3ef 8311 	mrs	r3, BASEPRI
 800696a:	f04f 0120 	mov.w	r1, #32
 800696e:	f381 8811 	msr	BASEPRI, r1
 8006972:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f7ff ff95 	bl	80068a8 <SEGGER_RTT_WriteDownBufferNoLock>
 800697e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006986:	697b      	ldr	r3, [r7, #20]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20012fa4 	.word	0x20012fa4

08006994 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80069a2:	4b3d      	ldr	r3, [pc, #244]	; (8006a98 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80069b0:	f7ff fd4e 	bl	8006450 <_DoInit>
  SEGGER_RTT_LOCK();
 80069b4:	f3ef 8311 	mrs	r3, BASEPRI
 80069b8:	f04f 0120 	mov.w	r1, #32
 80069bc:	f381 8811 	msr	BASEPRI, r1
 80069c0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80069c2:	4b35      	ldr	r3, [pc, #212]	; (8006a98 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80069c4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80069ca:	6939      	ldr	r1, [r7, #16]
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	4613      	mov	r3, r2
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	4413      	add	r3, r2
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	440b      	add	r3, r1
 80069da:	3304      	adds	r3, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d008      	beq.n	80069f4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	3301      	adds	r3, #1
 80069e6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	dbeb      	blt.n	80069ca <SEGGER_RTT_AllocUpBuffer+0x36>
 80069f2:	e000      	b.n	80069f6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80069f4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	da3f      	bge.n	8006a80 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006a00:	6939      	ldr	r1, [r7, #16]
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	4613      	mov	r3, r2
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	4413      	add	r3, r2
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	440b      	add	r3, r1
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006a14:	6939      	ldr	r1, [r7, #16]
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	4413      	add	r3, r2
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	440b      	add	r3, r1
 8006a24:	3304      	adds	r3, #4
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006a2a:	6939      	ldr	r1, [r7, #16]
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	4413      	add	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	440b      	add	r3, r1
 8006a38:	3320      	adds	r3, #32
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006a3e:	6939      	ldr	r1, [r7, #16]
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	4613      	mov	r3, r2
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	4413      	add	r3, r2
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	440b      	add	r3, r1
 8006a4c:	3328      	adds	r3, #40	; 0x28
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006a52:	6939      	ldr	r1, [r7, #16]
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	4613      	mov	r3, r2
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	4413      	add	r3, r2
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	440b      	add	r3, r1
 8006a60:	3324      	adds	r3, #36	; 0x24
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006a66:	6939      	ldr	r1, [r7, #16]
 8006a68:	69fa      	ldr	r2, [r7, #28]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	4413      	add	r3, r2
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	440b      	add	r3, r1
 8006a74:	332c      	adds	r3, #44	; 0x2c
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006a7a:	f3bf 8f5f 	dmb	sy
 8006a7e:	e002      	b.n	8006a86 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006a80:	f04f 33ff 	mov.w	r3, #4294967295
 8006a84:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3720      	adds	r7, #32
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20012fa4 	.word	0x20012fa4

08006a9c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006aaa:	4b33      	ldr	r3, [pc, #204]	; (8006b78 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006ab8:	f7ff fcca 	bl	8006450 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006abc:	4b2e      	ldr	r3, [pc, #184]	; (8006b78 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8006abe:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d24d      	bcs.n	8006b68 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8006acc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad0:	f04f 0120 	mov.w	r1, #32
 8006ad4:	f381 8811 	msr	BASEPRI, r1
 8006ad8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d031      	beq.n	8006b44 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8006ae0:	6979      	ldr	r1, [r7, #20]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	4413      	add	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	440b      	add	r3, r1
 8006aee:	3360      	adds	r3, #96	; 0x60
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8006af4:	6979      	ldr	r1, [r7, #20]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4613      	mov	r3, r2
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	4413      	add	r3, r2
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	440b      	add	r3, r1
 8006b02:	3364      	adds	r3, #100	; 0x64
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8006b08:	6979      	ldr	r1, [r7, #20]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	4413      	add	r3, r2
 8006b12:	00db      	lsls	r3, r3, #3
 8006b14:	440b      	add	r3, r1
 8006b16:	3368      	adds	r3, #104	; 0x68
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8006b1c:	6979      	ldr	r1, [r7, #20]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4613      	mov	r3, r2
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	4413      	add	r3, r2
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	440b      	add	r3, r1
 8006b2a:	3370      	adds	r3, #112	; 0x70
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8006b30:	6979      	ldr	r1, [r7, #20]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4613      	mov	r3, r2
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	4413      	add	r3, r2
 8006b3a:	00db      	lsls	r3, r3, #3
 8006b3c:	440b      	add	r3, r1
 8006b3e:	336c      	adds	r3, #108	; 0x6c
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8006b44:	6979      	ldr	r1, [r7, #20]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	4413      	add	r3, r2
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	440b      	add	r3, r1
 8006b52:	3374      	adds	r3, #116	; 0x74
 8006b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b56:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006b58:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	61fb      	str	r3, [r7, #28]
 8006b66:	e002      	b.n	8006b6e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8006b68:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8006b6e:	69fb      	ldr	r3, [r7, #28]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3720      	adds	r7, #32
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20012fa4 	.word	0x20012fa4

08006b7c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006b8c:	e002      	b.n	8006b94 <_EncodeStr+0x18>
    Len++;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3301      	adds	r3, #1
 8006b92:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	4413      	add	r3, r2
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1f6      	bne.n	8006b8e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d901      	bls.n	8006bac <_EncodeStr+0x30>
    Len = Limit;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2bfe      	cmp	r3, #254	; 0xfe
 8006bb0:	d806      	bhi.n	8006bc0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	60fa      	str	r2, [r7, #12]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	e011      	b.n	8006be4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	60fa      	str	r2, [r7, #12]
 8006bc6:	22ff      	movs	r2, #255	; 0xff
 8006bc8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	60fa      	str	r2, [r7, #12]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	0a19      	lsrs	r1, r3, #8
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	60fa      	str	r2, [r7, #12]
 8006be0:	b2ca      	uxtb	r2, r1
 8006be2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006be8:	e00a      	b.n	8006c00 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	1c53      	adds	r3, r2, #1
 8006bee:	60bb      	str	r3, [r7, #8]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	1c59      	adds	r1, r3, #1
 8006bf4:	60f9      	str	r1, [r7, #12]
 8006bf6:	7812      	ldrb	r2, [r2, #0]
 8006bf8:	701a      	strb	r2, [r3, #0]
    n++;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d3f0      	bcc.n	8006bea <_EncodeStr+0x6e>
  }
  return pPayload;
 8006c08:	68fb      	ldr	r3, [r7, #12]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3304      	adds	r3, #4
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
	...

08006c30 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006c36:	4b36      	ldr	r3, [pc, #216]	; (8006d10 <_HandleIncomingPacket+0xe0>)
 8006c38:	7e1b      	ldrb	r3, [r3, #24]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	1cfb      	adds	r3, r7, #3
 8006c3e:	2201      	movs	r2, #1
 8006c40:	4619      	mov	r1, r3
 8006c42:	f7ff fdab 	bl	800679c <SEGGER_RTT_ReadNoLock>
 8006c46:	4603      	mov	r3, r0
 8006c48:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd54      	ble.n	8006cfa <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	2b80      	cmp	r3, #128	; 0x80
 8006c54:	d032      	beq.n	8006cbc <_HandleIncomingPacket+0x8c>
 8006c56:	2b80      	cmp	r3, #128	; 0x80
 8006c58:	dc42      	bgt.n	8006ce0 <_HandleIncomingPacket+0xb0>
 8006c5a:	2b07      	cmp	r3, #7
 8006c5c:	dc16      	bgt.n	8006c8c <_HandleIncomingPacket+0x5c>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	dd3e      	ble.n	8006ce0 <_HandleIncomingPacket+0xb0>
 8006c62:	3b01      	subs	r3, #1
 8006c64:	2b06      	cmp	r3, #6
 8006c66:	d83b      	bhi.n	8006ce0 <_HandleIncomingPacket+0xb0>
 8006c68:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <_HandleIncomingPacket+0x40>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006c93 	.word	0x08006c93
 8006c74:	08006c99 	.word	0x08006c99
 8006c78:	08006c9f 	.word	0x08006c9f
 8006c7c:	08006ca5 	.word	0x08006ca5
 8006c80:	08006cab 	.word	0x08006cab
 8006c84:	08006cb1 	.word	0x08006cb1
 8006c88:	08006cb7 	.word	0x08006cb7
 8006c8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c8e:	d036      	beq.n	8006cfe <_HandleIncomingPacket+0xce>
 8006c90:	e026      	b.n	8006ce0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006c92:	f000 ff45 	bl	8007b20 <SEGGER_SYSVIEW_Start>
      break;
 8006c96:	e037      	b.n	8006d08 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006c98:	f000 fffe 	bl	8007c98 <SEGGER_SYSVIEW_Stop>
      break;
 8006c9c:	e034      	b.n	8006d08 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006c9e:	f001 f9d7 	bl	8008050 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006ca2:	e031      	b.n	8006d08 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006ca4:	f001 f99c 	bl	8007fe0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006ca8:	e02e      	b.n	8006d08 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006caa:	f001 f81b 	bl	8007ce4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006cae:	e02b      	b.n	8006d08 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006cb0:	f001 fc6a 	bl	8008588 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006cb4:	e028      	b.n	8006d08 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006cb6:	f001 fc49 	bl	800854c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006cba:	e025      	b.n	8006d08 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006cbc:	4b14      	ldr	r3, [pc, #80]	; (8006d10 <_HandleIncomingPacket+0xe0>)
 8006cbe:	7e1b      	ldrb	r3, [r3, #24]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	1cfb      	adds	r3, r7, #3
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	f7ff fd68 	bl	800679c <SEGGER_RTT_ReadNoLock>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	dd15      	ble.n	8006d02 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006cd6:	78fb      	ldrb	r3, [r7, #3]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f001 fbb7 	bl	800844c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006cde:	e010      	b.n	8006d02 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	b25b      	sxtb	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	da0e      	bge.n	8006d06 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006ce8:	4b09      	ldr	r3, [pc, #36]	; (8006d10 <_HandleIncomingPacket+0xe0>)
 8006cea:	7e1b      	ldrb	r3, [r3, #24]
 8006cec:	4618      	mov	r0, r3
 8006cee:	1cfb      	adds	r3, r7, #3
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f7ff fd52 	bl	800679c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006cf8:	e005      	b.n	8006d06 <_HandleIncomingPacket+0xd6>
    }
  }
 8006cfa:	bf00      	nop
 8006cfc:	e004      	b.n	8006d08 <_HandleIncomingPacket+0xd8>
      break;
 8006cfe:	bf00      	nop
 8006d00:	e002      	b.n	8006d08 <_HandleIncomingPacket+0xd8>
      break;
 8006d02:	bf00      	nop
 8006d04:	e000      	b.n	8006d08 <_HandleIncomingPacket+0xd8>
      break;
 8006d06:	bf00      	nop
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20014464 	.word	0x20014464

08006d14 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08c      	sub	sp, #48	; 0x30
 8006d18:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006d1e:	1d3b      	adds	r3, r7, #4
 8006d20:	3301      	adds	r3, #1
 8006d22:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d28:	4b32      	ldr	r3, [pc, #200]	; (8006df4 <_TrySendOverflowPacket+0xe0>)
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d2e:	e00b      	b.n	8006d48 <_TrySendOverflowPacket+0x34>
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	1c59      	adds	r1, r3, #1
 8006d38:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	09db      	lsrs	r3, r3, #7
 8006d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d4c:	d8f0      	bhi.n	8006d30 <_TrySendOverflowPacket+0x1c>
 8006d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006d5e:	4b26      	ldr	r3, [pc, #152]	; (8006df8 <_TrySendOverflowPacket+0xe4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006d64:	4b23      	ldr	r3, [pc, #140]	; (8006df4 <_TrySendOverflowPacket+0xe0>)
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	623b      	str	r3, [r7, #32]
 8006d76:	e00b      	b.n	8006d90 <_TrySendOverflowPacket+0x7c>
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	1c59      	adds	r1, r3, #1
 8006d80:	6279      	str	r1, [r7, #36]	; 0x24
 8006d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	09db      	lsrs	r3, r3, #7
 8006d8e:	623b      	str	r3, [r7, #32]
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	2b7f      	cmp	r3, #127	; 0x7f
 8006d94:	d8f0      	bhi.n	8006d78 <_TrySendOverflowPacket+0x64>
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	627a      	str	r2, [r7, #36]	; 0x24
 8006d9c:	6a3a      	ldr	r2, [r7, #32]
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	701a      	strb	r2, [r3, #0]
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006da6:	4b13      	ldr	r3, [pc, #76]	; (8006df4 <_TrySendOverflowPacket+0xe0>)
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	4618      	mov	r0, r3
 8006dac:	1d3b      	adds	r3, r7, #4
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	461a      	mov	r2, r3
 8006db4:	1d3b      	adds	r3, r7, #4
 8006db6:	4619      	mov	r1, r3
 8006db8:	f7f9 fa32 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8006dc0:	f7ff fabc 	bl	800633c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d009      	beq.n	8006dde <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006dca:	4a0a      	ldr	r2, [pc, #40]	; (8006df4 <_TrySendOverflowPacket+0xe0>)
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006dd0:	4b08      	ldr	r3, [pc, #32]	; (8006df4 <_TrySendOverflowPacket+0xe0>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	4b06      	ldr	r3, [pc, #24]	; (8006df4 <_TrySendOverflowPacket+0xe0>)
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	e004      	b.n	8006de8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006dde:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <_TrySendOverflowPacket+0xe0>)
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	3301      	adds	r3, #1
 8006de4:	4a03      	ldr	r2, [pc, #12]	; (8006df4 <_TrySendOverflowPacket+0xe0>)
 8006de6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006de8:	693b      	ldr	r3, [r7, #16]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3730      	adds	r7, #48	; 0x30
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20014464 	.word	0x20014464
 8006df8:	e0001004 	.word	0xe0001004

08006dfc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08a      	sub	sp, #40	; 0x28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006e08:	4b6d      	ldr	r3, [pc, #436]	; (8006fc0 <_SendPacket+0x1c4>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d010      	beq.n	8006e32 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006e10:	4b6b      	ldr	r3, [pc, #428]	; (8006fc0 <_SendPacket+0x1c4>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 80a5 	beq.w	8006f64 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006e1a:	4b69      	ldr	r3, [pc, #420]	; (8006fc0 <_SendPacket+0x1c4>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d109      	bne.n	8006e36 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006e22:	f7ff ff77 	bl	8006d14 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006e26:	4b66      	ldr	r3, [pc, #408]	; (8006fc0 <_SendPacket+0x1c4>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	f040 809c 	bne.w	8006f68 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006e30:	e001      	b.n	8006e36 <_SendPacket+0x3a>
    goto Send;
 8006e32:	bf00      	nop
 8006e34:	e000      	b.n	8006e38 <_SendPacket+0x3c>
Send:
 8006e36:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b1f      	cmp	r3, #31
 8006e3c:	d809      	bhi.n	8006e52 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006e3e:	4b60      	ldr	r3, [pc, #384]	; (8006fc0 <_SendPacket+0x1c4>)
 8006e40:	69da      	ldr	r2, [r3, #28]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	fa22 f303 	lsr.w	r3, r2, r3
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f040 808d 	bne.w	8006f6c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b17      	cmp	r3, #23
 8006e56:	d807      	bhi.n	8006e68 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	e03d      	b.n	8006ee4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	2b7f      	cmp	r3, #127	; 0x7f
 8006e74:	d912      	bls.n	8006e9c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	09da      	lsrs	r2, r3, #7
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	3a01      	subs	r2, #1
 8006e8e:	60fa      	str	r2, [r7, #12]
 8006e90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	e006      	b.n	8006eaa <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b7f      	cmp	r3, #127	; 0x7f
 8006eae:	d912      	bls.n	8006ed6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	09da      	lsrs	r2, r3, #7
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	3a01      	subs	r2, #1
 8006ec8:	60fa      	str	r2, [r7, #12]
 8006eca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	e006      	b.n	8006ee4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006ee4:	4b37      	ldr	r3, [pc, #220]	; (8006fc4 <_SendPacket+0x1c8>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006eea:	4b35      	ldr	r3, [pc, #212]	; (8006fc0 <_SendPacket+0x1c4>)
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	623b      	str	r3, [r7, #32]
 8006efc:	e00b      	b.n	8006f16 <_SendPacket+0x11a>
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	1c59      	adds	r1, r3, #1
 8006f06:	6279      	str	r1, [r7, #36]	; 0x24
 8006f08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	09db      	lsrs	r3, r3, #7
 8006f14:	623b      	str	r3, [r7, #32]
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	2b7f      	cmp	r3, #127	; 0x7f
 8006f1a:	d8f0      	bhi.n	8006efe <_SendPacket+0x102>
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	627a      	str	r2, [r7, #36]	; 0x24
 8006f22:	6a3a      	ldr	r2, [r7, #32]
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006f2c:	4b24      	ldr	r3, [pc, #144]	; (8006fc0 <_SendPacket+0x1c4>)
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	4618      	mov	r0, r3
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	f7f9 f970 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006f40:	4603      	mov	r3, r0
 8006f42:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006f44:	f7ff f9fa 	bl	800633c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006f4e:	4a1c      	ldr	r2, [pc, #112]	; (8006fc0 <_SendPacket+0x1c4>)
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	60d3      	str	r3, [r2, #12]
 8006f54:	e00b      	b.n	8006f6e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006f56:	4b1a      	ldr	r3, [pc, #104]	; (8006fc0 <_SendPacket+0x1c4>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	4b18      	ldr	r3, [pc, #96]	; (8006fc0 <_SendPacket+0x1c4>)
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	e004      	b.n	8006f6e <_SendPacket+0x172>
    goto SendDone;
 8006f64:	bf00      	nop
 8006f66:	e002      	b.n	8006f6e <_SendPacket+0x172>
      goto SendDone;
 8006f68:	bf00      	nop
 8006f6a:	e000      	b.n	8006f6e <_SendPacket+0x172>
      goto SendDone;
 8006f6c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006f6e:	4b14      	ldr	r3, [pc, #80]	; (8006fc0 <_SendPacket+0x1c4>)
 8006f70:	7e1b      	ldrb	r3, [r3, #24]
 8006f72:	4619      	mov	r1, r3
 8006f74:	4a14      	ldr	r2, [pc, #80]	; (8006fc8 <_SendPacket+0x1cc>)
 8006f76:	460b      	mov	r3, r1
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	440b      	add	r3, r1
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	4413      	add	r3, r2
 8006f80:	336c      	adds	r3, #108	; 0x6c
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	4b0e      	ldr	r3, [pc, #56]	; (8006fc0 <_SendPacket+0x1c4>)
 8006f86:	7e1b      	ldrb	r3, [r3, #24]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	490f      	ldr	r1, [pc, #60]	; (8006fc8 <_SendPacket+0x1cc>)
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	4403      	add	r3, r0
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	440b      	add	r3, r1
 8006f96:	3370      	adds	r3, #112	; 0x70
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d00b      	beq.n	8006fb6 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006f9e:	4b08      	ldr	r3, [pc, #32]	; (8006fc0 <_SendPacket+0x1c4>)
 8006fa0:	789b      	ldrb	r3, [r3, #2]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d107      	bne.n	8006fb6 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006fa6:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <_SendPacket+0x1c4>)
 8006fa8:	2201      	movs	r2, #1
 8006faa:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006fac:	f7ff fe40 	bl	8006c30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006fb0:	4b03      	ldr	r3, [pc, #12]	; (8006fc0 <_SendPacket+0x1c4>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006fb6:	bf00      	nop
 8006fb8:	3728      	adds	r7, #40	; 0x28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20014464 	.word	0x20014464
 8006fc4:	e0001004 	.word	0xe0001004
 8006fc8:	20012fa4 	.word	0x20012fa4

08006fcc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08a      	sub	sp, #40	; 0x28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	d80a      	bhi.n	8006ffc <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	1c59      	adds	r1, r3, #1
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6051      	str	r1, [r2, #4]
 8006ff0:	78fa      	ldrb	r2, [r7, #3]
 8006ff2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	2b80      	cmp	r3, #128	; 0x80
 8007002:	d15a      	bne.n	80070ba <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691a      	ldr	r2, [r3, #16]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	623b      	str	r3, [r7, #32]
 8007024:	e00b      	b.n	800703e <_StoreChar+0x72>
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	b2da      	uxtb	r2, r3
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	1c59      	adds	r1, r3, #1
 800702e:	6279      	str	r1, [r7, #36]	; 0x24
 8007030:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	09db      	lsrs	r3, r3, #7
 800703c:	623b      	str	r3, [r7, #32]
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	2b7f      	cmp	r3, #127	; 0x7f
 8007042:	d8f0      	bhi.n	8007026 <_StoreChar+0x5a>
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	627a      	str	r2, [r7, #36]	; 0x24
 800704a:	6a3a      	ldr	r2, [r7, #32]
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	61fb      	str	r3, [r7, #28]
 8007058:	2300      	movs	r3, #0
 800705a:	61bb      	str	r3, [r7, #24]
 800705c:	e00b      	b.n	8007076 <_StoreChar+0xaa>
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	b2da      	uxtb	r2, r3
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	1c59      	adds	r1, r3, #1
 8007066:	61f9      	str	r1, [r7, #28]
 8007068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	701a      	strb	r2, [r3, #0]
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	09db      	lsrs	r3, r3, #7
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b7f      	cmp	r3, #127	; 0x7f
 800707a:	d8f0      	bhi.n	800705e <_StoreChar+0x92>
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	61fa      	str	r2, [r7, #28]
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	221a      	movs	r2, #26
 8007092:	6939      	ldr	r1, [r7, #16]
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff feb1 	bl	8006dfc <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4618      	mov	r0, r3
 80070a0:	f7ff fdb9 	bl	8006c16 <_PreparePacket>
 80070a4:	4602      	mov	r2, r0
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	611a      	str	r2, [r3, #16]
  }
}
 80070ba:	bf00      	nop
 80070bc:	3728      	adds	r7, #40	; 0x28
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08a      	sub	sp, #40	; 0x28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80070d6:	2301      	movs	r3, #1
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80070da:	2301      	movs	r3, #1
 80070dc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80070de:	e007      	b.n	80070f0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80070e0:	6a3a      	ldr	r2, [r7, #32]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e8:	623b      	str	r3, [r7, #32]
    Width++;
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	3301      	adds	r3, #1
 80070ee:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80070f0:	6a3a      	ldr	r2, [r7, #32]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d2f3      	bcs.n	80070e0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d901      	bls.n	8007104 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8007104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d11f      	bne.n	800714e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	2b00      	cmp	r3, #0
 8007112:	d01c      	beq.n	800714e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8007114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <_PrintUnsigned+0x66>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d102      	bne.n	800712a <_PrintUnsigned+0x66>
        c = '0';
 8007124:	2330      	movs	r3, #48	; 0x30
 8007126:	76fb      	strb	r3, [r7, #27]
 8007128:	e001      	b.n	800712e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800712a:	2320      	movs	r3, #32
 800712c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800712e:	e007      	b.n	8007140 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	3b01      	subs	r3, #1
 8007134:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8007136:	7efb      	ldrb	r3, [r7, #27]
 8007138:	4619      	mov	r1, r3
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f7ff ff46 	bl	8006fcc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <_PrintUnsigned+0x8a>
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	429a      	cmp	r2, r3
 800714c:	d3f0      	bcc.n	8007130 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d903      	bls.n	800715c <_PrintUnsigned+0x98>
      NumDigits--;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	3b01      	subs	r3, #1
 8007158:	603b      	str	r3, [r7, #0]
 800715a:	e009      	b.n	8007170 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	fbb2 f3f3 	udiv	r3, r2, r3
 8007164:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	429a      	cmp	r2, r3
 800716c:	d200      	bcs.n	8007170 <_PrintUnsigned+0xac>
        break;
 800716e:	e005      	b.n	800717c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	fb02 f303 	mul.w	r3, r2, r3
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800717a:	e7e8      	b.n	800714e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	fbb2 f3f3 	udiv	r3, r2, r3
 8007184:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718a:	fb02 f303 	mul.w	r3, r2, r3
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8007194:	4a15      	ldr	r2, [pc, #84]	; (80071ec <_PrintUnsigned+0x128>)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	4413      	add	r3, r2
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	4619      	mov	r1, r3
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7ff ff14 	bl	8006fcc <_StoreChar>
    Digit /= Base;
 80071a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e3      	bne.n	800717c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80071b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d011      	beq.n	80071e2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80071be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00e      	beq.n	80071e2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80071c4:	e006      	b.n	80071d4 <_PrintUnsigned+0x110>
        FieldWidth--;
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	3b01      	subs	r3, #1
 80071ca:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80071cc:	2120      	movs	r1, #32
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fefc 	bl	8006fcc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80071d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <_PrintUnsigned+0x11e>
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	429a      	cmp	r2, r3
 80071e0:	d3f1      	bcc.n	80071c6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80071e2:	bf00      	nop
 80071e4:	3728      	adds	r7, #40	; 0x28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	08009248 	.word	0x08009248

080071f0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b088      	sub	sp, #32
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	bfb8      	it	lt
 8007204:	425b      	neglt	r3, r3
 8007206:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8007208:	2301      	movs	r3, #1
 800720a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800720c:	e007      	b.n	800721e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	fb92 f3f3 	sdiv	r3, r2, r3
 8007216:	613b      	str	r3, [r7, #16]
    Width++;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	3301      	adds	r3, #1
 800721c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	429a      	cmp	r2, r3
 8007224:	daf3      	bge.n	800720e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	429a      	cmp	r2, r3
 800722c:	d901      	bls.n	8007232 <_PrintInt+0x42>
    Width = NumDigits;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00a      	beq.n	800724e <_PrintInt+0x5e>
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	db04      	blt.n	8007248 <_PrintInt+0x58>
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <_PrintInt+0x5e>
    FieldWidth--;
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	3b01      	subs	r3, #1
 800724c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <_PrintInt+0x6e>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d016      	beq.n	800728c <_PrintInt+0x9c>
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d111      	bne.n	800728c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00e      	beq.n	800728c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800726e:	e006      	b.n	800727e <_PrintInt+0x8e>
        FieldWidth--;
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	3b01      	subs	r3, #1
 8007274:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8007276:	2120      	movs	r1, #32
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f7ff fea7 	bl	8006fcc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <_PrintInt+0x9c>
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	429a      	cmp	r2, r3
 800728a:	d3f1      	bcc.n	8007270 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	da07      	bge.n	80072a2 <_PrintInt+0xb2>
    v = -v;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	425b      	negs	r3, r3
 8007296:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8007298:	212d      	movs	r1, #45	; 0x2d
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7ff fe96 	bl	8006fcc <_StoreChar>
 80072a0:	e008      	b.n	80072b4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80072ac:	212b      	movs	r1, #43	; 0x2b
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff fe8c 	bl	8006fcc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d019      	beq.n	80072f2 <_PrintInt+0x102>
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d114      	bne.n	80072f2 <_PrintInt+0x102>
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d111      	bne.n	80072f2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00e      	beq.n	80072f2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80072d4:	e006      	b.n	80072e4 <_PrintInt+0xf4>
        FieldWidth--;
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	3b01      	subs	r3, #1
 80072da:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80072dc:	2130      	movs	r1, #48	; 0x30
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f7ff fe74 	bl	8006fcc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <_PrintInt+0x102>
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d3f1      	bcc.n	80072d6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80072f2:	68b9      	ldr	r1, [r7, #8]
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f7ff fedf 	bl	80070c4 <_PrintUnsigned>
}
 8007306:	bf00      	nop
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b098      	sub	sp, #96	; 0x60
 8007314:	af02      	add	r7, sp, #8
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800731c:	f3ef 8311 	mrs	r3, BASEPRI
 8007320:	f04f 0120 	mov.w	r1, #32
 8007324:	f381 8811 	msr	BASEPRI, r1
 8007328:	633b      	str	r3, [r7, #48]	; 0x30
 800732a:	48b7      	ldr	r0, [pc, #732]	; (8007608 <_VPrintTarget+0x2f8>)
 800732c:	f7ff fc73 	bl	8006c16 <_PreparePacket>
 8007330:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8007332:	4bb5      	ldr	r3, [pc, #724]	; (8007608 <_VPrintTarget+0x2f8>)
 8007334:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8007336:	2300      	movs	r3, #0
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	3301      	adds	r3, #1
 8007342:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3301      	adds	r3, #1
 8007354:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8007356:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 8183 	beq.w	8007666 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8007360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007364:	2b25      	cmp	r3, #37	; 0x25
 8007366:	f040 8170 	bne.w	800764a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800736a:	2300      	movs	r3, #0
 800736c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800736e:	2301      	movs	r3, #1
 8007370:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800737a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800737e:	3b23      	subs	r3, #35	; 0x23
 8007380:	2b0d      	cmp	r3, #13
 8007382:	d83f      	bhi.n	8007404 <_VPrintTarget+0xf4>
 8007384:	a201      	add	r2, pc, #4	; (adr r2, 800738c <_VPrintTarget+0x7c>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	080073f5 	.word	0x080073f5
 8007390:	08007405 	.word	0x08007405
 8007394:	08007405 	.word	0x08007405
 8007398:	08007405 	.word	0x08007405
 800739c:	08007405 	.word	0x08007405
 80073a0:	08007405 	.word	0x08007405
 80073a4:	08007405 	.word	0x08007405
 80073a8:	08007405 	.word	0x08007405
 80073ac:	080073e5 	.word	0x080073e5
 80073b0:	08007405 	.word	0x08007405
 80073b4:	080073c5 	.word	0x080073c5
 80073b8:	08007405 	.word	0x08007405
 80073bc:	08007405 	.word	0x08007405
 80073c0:	080073d5 	.word	0x080073d5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80073c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	e01a      	b.n	800740a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80073d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d6:	f043 0302 	orr.w	r3, r3, #2
 80073da:	64bb      	str	r3, [r7, #72]	; 0x48
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3301      	adds	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	e012      	b.n	800740a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80073e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e6:	f043 0304 	orr.w	r3, r3, #4
 80073ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	3301      	adds	r3, #1
 80073f0:	60fb      	str	r3, [r7, #12]
 80073f2:	e00a      	b.n	800740a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80073f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073f6:	f043 0308 	orr.w	r3, r3, #8
 80073fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3301      	adds	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	e002      	b.n	800740a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8007404:	2300      	movs	r3, #0
 8007406:	653b      	str	r3, [r7, #80]	; 0x50
 8007408:	bf00      	nop
        }
      } while (v);
 800740a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1b0      	bne.n	8007372 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8007410:	2300      	movs	r3, #0
 8007412:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800741c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007420:	2b2f      	cmp	r3, #47	; 0x2f
 8007422:	d912      	bls.n	800744a <_VPrintTarget+0x13a>
 8007424:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007428:	2b39      	cmp	r3, #57	; 0x39
 800742a:	d80e      	bhi.n	800744a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8007432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	461a      	mov	r2, r3
 800743e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007442:	4413      	add	r3, r2
 8007444:	3b30      	subs	r3, #48	; 0x30
 8007446:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8007448:	e7e4      	b.n	8007414 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800744a:	2300      	movs	r3, #0
 800744c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8007456:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800745a:	2b2e      	cmp	r3, #46	; 0x2e
 800745c:	d11d      	bne.n	800749a <_VPrintTarget+0x18a>
        sFormat++;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	3301      	adds	r3, #1
 8007462:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800746c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007470:	2b2f      	cmp	r3, #47	; 0x2f
 8007472:	d912      	bls.n	800749a <_VPrintTarget+0x18a>
 8007474:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007478:	2b39      	cmp	r3, #57	; 0x39
 800747a:	d80e      	bhi.n	800749a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8007482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	461a      	mov	r2, r3
 800748e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007492:	4413      	add	r3, r2
 8007494:	3b30      	subs	r3, #48	; 0x30
 8007496:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8007498:	e7e4      	b.n	8007464 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80074a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074a6:	2b6c      	cmp	r3, #108	; 0x6c
 80074a8:	d003      	beq.n	80074b2 <_VPrintTarget+0x1a2>
 80074aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074ae:	2b68      	cmp	r3, #104	; 0x68
 80074b0:	d107      	bne.n	80074c2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3301      	adds	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80074c0:	e7ef      	b.n	80074a2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80074c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074c6:	2b25      	cmp	r3, #37	; 0x25
 80074c8:	f000 80b3 	beq.w	8007632 <_VPrintTarget+0x322>
 80074cc:	2b25      	cmp	r3, #37	; 0x25
 80074ce:	f2c0 80b7 	blt.w	8007640 <_VPrintTarget+0x330>
 80074d2:	2b78      	cmp	r3, #120	; 0x78
 80074d4:	f300 80b4 	bgt.w	8007640 <_VPrintTarget+0x330>
 80074d8:	2b58      	cmp	r3, #88	; 0x58
 80074da:	f2c0 80b1 	blt.w	8007640 <_VPrintTarget+0x330>
 80074de:	3b58      	subs	r3, #88	; 0x58
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	f200 80ad 	bhi.w	8007640 <_VPrintTarget+0x330>
 80074e6:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <_VPrintTarget+0x1dc>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	080075e3 	.word	0x080075e3
 80074f0:	08007641 	.word	0x08007641
 80074f4:	08007641 	.word	0x08007641
 80074f8:	08007641 	.word	0x08007641
 80074fc:	08007641 	.word	0x08007641
 8007500:	08007641 	.word	0x08007641
 8007504:	08007641 	.word	0x08007641
 8007508:	08007641 	.word	0x08007641
 800750c:	08007641 	.word	0x08007641
 8007510:	08007641 	.word	0x08007641
 8007514:	08007641 	.word	0x08007641
 8007518:	08007571 	.word	0x08007571
 800751c:	08007597 	.word	0x08007597
 8007520:	08007641 	.word	0x08007641
 8007524:	08007641 	.word	0x08007641
 8007528:	08007641 	.word	0x08007641
 800752c:	08007641 	.word	0x08007641
 8007530:	08007641 	.word	0x08007641
 8007534:	08007641 	.word	0x08007641
 8007538:	08007641 	.word	0x08007641
 800753c:	08007641 	.word	0x08007641
 8007540:	08007641 	.word	0x08007641
 8007544:	08007641 	.word	0x08007641
 8007548:	08007641 	.word	0x08007641
 800754c:	0800760d 	.word	0x0800760d
 8007550:	08007641 	.word	0x08007641
 8007554:	08007641 	.word	0x08007641
 8007558:	08007641 	.word	0x08007641
 800755c:	08007641 	.word	0x08007641
 8007560:	080075bd 	.word	0x080075bd
 8007564:	08007641 	.word	0x08007641
 8007568:	08007641 	.word	0x08007641
 800756c:	080075e3 	.word	0x080075e3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	1d19      	adds	r1, r3, #4
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	6011      	str	r1, [r2, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800757e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8007584:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007588:	f107 0314 	add.w	r3, r7, #20
 800758c:	4611      	mov	r1, r2
 800758e:	4618      	mov	r0, r3
 8007590:	f7ff fd1c 	bl	8006fcc <_StoreChar>
        break;
 8007594:	e055      	b.n	8007642 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	1d19      	adds	r1, r3, #4
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6011      	str	r1, [r2, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80075a4:	f107 0014 	add.w	r0, r7, #20
 80075a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075aa:	9301      	str	r3, [sp, #4]
 80075ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b2:	220a      	movs	r2, #10
 80075b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075b6:	f7ff fe1b 	bl	80071f0 <_PrintInt>
        break;
 80075ba:	e042      	b.n	8007642 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	1d19      	adds	r1, r3, #4
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	6011      	str	r1, [r2, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80075ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075cc:	f107 0014 	add.w	r0, r7, #20
 80075d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075da:	220a      	movs	r2, #10
 80075dc:	f7ff fd72 	bl	80070c4 <_PrintUnsigned>
        break;
 80075e0:	e02f      	b.n	8007642 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	1d19      	adds	r1, r3, #4
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	6011      	str	r1, [r2, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80075f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075f2:	f107 0014 	add.w	r0, r7, #20
 80075f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007600:	2210      	movs	r2, #16
 8007602:	f7ff fd5f 	bl	80070c4 <_PrintUnsigned>
        break;
 8007606:	e01c      	b.n	8007642 <_VPrintTarget+0x332>
 8007608:	20014494 	.word	0x20014494
      case 'p':
        v = va_arg(*pParamList, int);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	1d19      	adds	r1, r3, #4
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6011      	str	r1, [r2, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800761a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800761c:	f107 0014 	add.w	r0, r7, #20
 8007620:	2300      	movs	r3, #0
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	2308      	movs	r3, #8
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	2308      	movs	r3, #8
 800762a:	2210      	movs	r2, #16
 800762c:	f7ff fd4a 	bl	80070c4 <_PrintUnsigned>
        break;
 8007630:	e007      	b.n	8007642 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8007632:	f107 0314 	add.w	r3, r7, #20
 8007636:	2125      	movs	r1, #37	; 0x25
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fcc7 	bl	8006fcc <_StoreChar>
        break;
 800763e:	e000      	b.n	8007642 <_VPrintTarget+0x332>
      default:
        break;
 8007640:	bf00      	nop
      }
      sFormat++;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3301      	adds	r3, #1
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	e007      	b.n	800765a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800764a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800764e:	f107 0314 	add.w	r3, r7, #20
 8007652:	4611      	mov	r1, r2
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff fcb9 	bl	8006fcc <_StoreChar>
    }
  } while (*sFormat);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f47f ae72 	bne.w	8007348 <_VPrintTarget+0x38>
 8007664:	e000      	b.n	8007668 <_VPrintTarget+0x358>
      break;
 8007666:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d041      	beq.n	80076f2 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800766e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	643b      	str	r3, [r7, #64]	; 0x40
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800767e:	e00b      	b.n	8007698 <_VPrintTarget+0x388>
 8007680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007682:	b2da      	uxtb	r2, r3
 8007684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007686:	1c59      	adds	r1, r3, #1
 8007688:	6439      	str	r1, [r7, #64]	; 0x40
 800768a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800768e:	b2d2      	uxtb	r2, r2
 8007690:	701a      	strb	r2, [r3, #0]
 8007692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007694:	09db      	lsrs	r3, r3, #7
 8007696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800769a:	2b7f      	cmp	r3, #127	; 0x7f
 800769c:	d8f0      	bhi.n	8007680 <_VPrintTarget+0x370>
 800769e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	643a      	str	r2, [r7, #64]	; 0x40
 80076a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076a6:	b2d2      	uxtb	r2, r2
 80076a8:	701a      	strb	r2, [r3, #0]
 80076aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ac:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80076b2:	2300      	movs	r3, #0
 80076b4:	637b      	str	r3, [r7, #52]	; 0x34
 80076b6:	e00b      	b.n	80076d0 <_VPrintTarget+0x3c0>
 80076b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	1c59      	adds	r1, r3, #1
 80076c0:	63b9      	str	r1, [r7, #56]	; 0x38
 80076c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	701a      	strb	r2, [r3, #0]
 80076ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076cc:	09db      	lsrs	r3, r3, #7
 80076ce:	637b      	str	r3, [r7, #52]	; 0x34
 80076d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d2:	2b7f      	cmp	r3, #127	; 0x7f
 80076d4:	d8f0      	bhi.n	80076b8 <_VPrintTarget+0x3a8>
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	63ba      	str	r2, [r7, #56]	; 0x38
 80076dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076de:	b2d2      	uxtb	r2, r2
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e4:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	69b9      	ldr	r1, [r7, #24]
 80076ea:	221a      	movs	r2, #26
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff fb85 	bl	8006dfc <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80076f8:	bf00      	nop
 80076fa:	3758      	adds	r7, #88	; 0x58
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af02      	add	r7, sp, #8
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800770e:	2300      	movs	r3, #0
 8007710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007714:	4917      	ldr	r1, [pc, #92]	; (8007774 <SEGGER_SYSVIEW_Init+0x74>)
 8007716:	4818      	ldr	r0, [pc, #96]	; (8007778 <SEGGER_SYSVIEW_Init+0x78>)
 8007718:	f7ff f93c 	bl	8006994 <SEGGER_RTT_AllocUpBuffer>
 800771c:	4603      	mov	r3, r0
 800771e:	b2da      	uxtb	r2, r3
 8007720:	4b16      	ldr	r3, [pc, #88]	; (800777c <SEGGER_SYSVIEW_Init+0x7c>)
 8007722:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007724:	4b15      	ldr	r3, [pc, #84]	; (800777c <SEGGER_SYSVIEW_Init+0x7c>)
 8007726:	785a      	ldrb	r2, [r3, #1]
 8007728:	4b14      	ldr	r3, [pc, #80]	; (800777c <SEGGER_SYSVIEW_Init+0x7c>)
 800772a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800772c:	4b13      	ldr	r3, [pc, #76]	; (800777c <SEGGER_SYSVIEW_Init+0x7c>)
 800772e:	7e1b      	ldrb	r3, [r3, #24]
 8007730:	4618      	mov	r0, r3
 8007732:	2300      	movs	r3, #0
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	2308      	movs	r3, #8
 8007738:	4a11      	ldr	r2, [pc, #68]	; (8007780 <SEGGER_SYSVIEW_Init+0x80>)
 800773a:	490f      	ldr	r1, [pc, #60]	; (8007778 <SEGGER_SYSVIEW_Init+0x78>)
 800773c:	f7ff f9ae 	bl	8006a9c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007740:	4b0e      	ldr	r3, [pc, #56]	; (800777c <SEGGER_SYSVIEW_Init+0x7c>)
 8007742:	2200      	movs	r2, #0
 8007744:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007746:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <SEGGER_SYSVIEW_Init+0x84>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a0c      	ldr	r2, [pc, #48]	; (800777c <SEGGER_SYSVIEW_Init+0x7c>)
 800774c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800774e:	4a0b      	ldr	r2, [pc, #44]	; (800777c <SEGGER_SYSVIEW_Init+0x7c>)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007754:	4a09      	ldr	r2, [pc, #36]	; (800777c <SEGGER_SYSVIEW_Init+0x7c>)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800775a:	4a08      	ldr	r2, [pc, #32]	; (800777c <SEGGER_SYSVIEW_Init+0x7c>)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007760:	4a06      	ldr	r2, [pc, #24]	; (800777c <SEGGER_SYSVIEW_Init+0x7c>)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007766:	4b05      	ldr	r3, [pc, #20]	; (800777c <SEGGER_SYSVIEW_Init+0x7c>)
 8007768:	2200      	movs	r2, #0
 800776a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800776c:	bf00      	nop
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	2001345c 	.word	0x2001345c
 8007778:	08009210 	.word	0x08009210
 800777c:	20014464 	.word	0x20014464
 8007780:	2001445c 	.word	0x2001445c
 8007784:	e0001004 	.word	0xe0001004

08007788 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007790:	4a04      	ldr	r2, [pc, #16]	; (80077a4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6113      	str	r3, [r2, #16]
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20014464 	.word	0x20014464

080077a8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80077b0:	f3ef 8311 	mrs	r3, BASEPRI
 80077b4:	f04f 0120 	mov.w	r1, #32
 80077b8:	f381 8811 	msr	BASEPRI, r1
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	4808      	ldr	r0, [pc, #32]	; (80077e0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80077c0:	f7ff fa29 	bl	8006c16 <_PreparePacket>
 80077c4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	68b9      	ldr	r1, [r7, #8]
 80077ca:	68b8      	ldr	r0, [r7, #8]
 80077cc:	f7ff fb16 	bl	8006dfc <_SendPacket>
  RECORD_END();
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f383 8811 	msr	BASEPRI, r3
}
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20014494 	.word	0x20014494

080077e4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80077ee:	f3ef 8311 	mrs	r3, BASEPRI
 80077f2:	f04f 0120 	mov.w	r1, #32
 80077f6:	f381 8811 	msr	BASEPRI, r1
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	4816      	ldr	r0, [pc, #88]	; (8007858 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80077fe:	f7ff fa0a 	bl	8006c16 <_PreparePacket>
 8007802:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	61fb      	str	r3, [r7, #28]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	61bb      	str	r3, [r7, #24]
 8007810:	e00b      	b.n	800782a <SEGGER_SYSVIEW_RecordU32+0x46>
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	b2da      	uxtb	r2, r3
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	1c59      	adds	r1, r3, #1
 800781a:	61f9      	str	r1, [r7, #28]
 800781c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007820:	b2d2      	uxtb	r2, r2
 8007822:	701a      	strb	r2, [r3, #0]
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	09db      	lsrs	r3, r3, #7
 8007828:	61bb      	str	r3, [r7, #24]
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	2b7f      	cmp	r3, #127	; 0x7f
 800782e:	d8f0      	bhi.n	8007812 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	61fa      	str	r2, [r7, #28]
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	b2d2      	uxtb	r2, r2
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	68f9      	ldr	r1, [r7, #12]
 8007844:	6938      	ldr	r0, [r7, #16]
 8007846:	f7ff fad9 	bl	8006dfc <_SendPacket>
  RECORD_END();
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f383 8811 	msr	BASEPRI, r3
}
 8007850:	bf00      	nop
 8007852:	3720      	adds	r7, #32
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20014494 	.word	0x20014494

0800785c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800785c:	b580      	push	{r7, lr}
 800785e:	b08c      	sub	sp, #48	; 0x30
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007868:	f3ef 8311 	mrs	r3, BASEPRI
 800786c:	f04f 0120 	mov.w	r1, #32
 8007870:	f381 8811 	msr	BASEPRI, r1
 8007874:	61fb      	str	r3, [r7, #28]
 8007876:	4825      	ldr	r0, [pc, #148]	; (800790c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007878:	f7ff f9cd 	bl	8006c16 <_PreparePacket>
 800787c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	62bb      	str	r3, [r7, #40]	; 0x28
 800788a:	e00b      	b.n	80078a4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	b2da      	uxtb	r2, r3
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	1c59      	adds	r1, r3, #1
 8007894:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007896:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	701a      	strb	r2, [r3, #0]
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	09db      	lsrs	r3, r3, #7
 80078a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	2b7f      	cmp	r3, #127	; 0x7f
 80078a8:	d8f0      	bhi.n	800788c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80078aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	701a      	strb	r2, [r3, #0]
 80078b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	623b      	str	r3, [r7, #32]
 80078c2:	e00b      	b.n	80078dc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	1c59      	adds	r1, r3, #1
 80078cc:	6279      	str	r1, [r7, #36]	; 0x24
 80078ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	09db      	lsrs	r3, r3, #7
 80078da:	623b      	str	r3, [r7, #32]
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	2b7f      	cmp	r3, #127	; 0x7f
 80078e0:	d8f0      	bhi.n	80078c4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	627a      	str	r2, [r7, #36]	; 0x24
 80078e8:	6a3a      	ldr	r2, [r7, #32]
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	6979      	ldr	r1, [r7, #20]
 80078f6:	69b8      	ldr	r0, [r7, #24]
 80078f8:	f7ff fa80 	bl	8006dfc <_SendPacket>
  RECORD_END();
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	f383 8811 	msr	BASEPRI, r3
}
 8007902:	bf00      	nop
 8007904:	3730      	adds	r7, #48	; 0x30
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20014494 	.word	0x20014494

08007910 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007910:	b580      	push	{r7, lr}
 8007912:	b08e      	sub	sp, #56	; 0x38
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
 800791c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800791e:	f3ef 8311 	mrs	r3, BASEPRI
 8007922:	f04f 0120 	mov.w	r1, #32
 8007926:	f381 8811 	msr	BASEPRI, r1
 800792a:	61fb      	str	r3, [r7, #28]
 800792c:	4832      	ldr	r0, [pc, #200]	; (80079f8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800792e:	f7ff f972 	bl	8006c16 <_PreparePacket>
 8007932:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	637b      	str	r3, [r7, #52]	; 0x34
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	633b      	str	r3, [r7, #48]	; 0x30
 8007940:	e00b      	b.n	800795a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	b2da      	uxtb	r2, r3
 8007946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007948:	1c59      	adds	r1, r3, #1
 800794a:	6379      	str	r1, [r7, #52]	; 0x34
 800794c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007950:	b2d2      	uxtb	r2, r2
 8007952:	701a      	strb	r2, [r3, #0]
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	09db      	lsrs	r3, r3, #7
 8007958:	633b      	str	r3, [r7, #48]	; 0x30
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	2b7f      	cmp	r3, #127	; 0x7f
 800795e:	d8f0      	bhi.n	8007942 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	637a      	str	r2, [r7, #52]	; 0x34
 8007966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007968:	b2d2      	uxtb	r2, r2
 800796a:	701a      	strb	r2, [r3, #0]
 800796c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	62bb      	str	r3, [r7, #40]	; 0x28
 8007978:	e00b      	b.n	8007992 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	b2da      	uxtb	r2, r3
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	1c59      	adds	r1, r3, #1
 8007982:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007984:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007988:	b2d2      	uxtb	r2, r2
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	09db      	lsrs	r3, r3, #7
 8007990:	62bb      	str	r3, [r7, #40]	; 0x28
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	2b7f      	cmp	r3, #127	; 0x7f
 8007996:	d8f0      	bhi.n	800797a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800799e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a0:	b2d2      	uxtb	r2, r2
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	623b      	str	r3, [r7, #32]
 80079b0:	e00b      	b.n	80079ca <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	1c59      	adds	r1, r3, #1
 80079ba:	6279      	str	r1, [r7, #36]	; 0x24
 80079bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079c0:	b2d2      	uxtb	r2, r2
 80079c2:	701a      	strb	r2, [r3, #0]
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	09db      	lsrs	r3, r3, #7
 80079c8:	623b      	str	r3, [r7, #32]
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	2b7f      	cmp	r3, #127	; 0x7f
 80079ce:	d8f0      	bhi.n	80079b2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	627a      	str	r2, [r7, #36]	; 0x24
 80079d6:	6a3a      	ldr	r2, [r7, #32]
 80079d8:	b2d2      	uxtb	r2, r2
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	6979      	ldr	r1, [r7, #20]
 80079e4:	69b8      	ldr	r0, [r7, #24]
 80079e6:	f7ff fa09 	bl	8006dfc <_SendPacket>
  RECORD_END();
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	f383 8811 	msr	BASEPRI, r3
}
 80079f0:	bf00      	nop
 80079f2:	3738      	adds	r7, #56	; 0x38
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	20014494 	.word	0x20014494

080079fc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b090      	sub	sp, #64	; 0x40
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8007a0e:	f04f 0120 	mov.w	r1, #32
 8007a12:	f381 8811 	msr	BASEPRI, r1
 8007a16:	61fb      	str	r3, [r7, #28]
 8007a18:	4840      	ldr	r0, [pc, #256]	; (8007b1c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007a1a:	f7ff f8fc 	bl	8006c16 <_PreparePacket>
 8007a1e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a2c:	e00b      	b.n	8007a46 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a34:	1c59      	adds	r1, r3, #1
 8007a36:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a3c:	b2d2      	uxtb	r2, r2
 8007a3e:	701a      	strb	r2, [r3, #0]
 8007a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a42:	09db      	lsrs	r3, r3, #7
 8007a44:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	2b7f      	cmp	r3, #127	; 0x7f
 8007a4a:	d8f0      	bhi.n	8007a2e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a54:	b2d2      	uxtb	r2, r2
 8007a56:	701a      	strb	r2, [r3, #0]
 8007a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	633b      	str	r3, [r7, #48]	; 0x30
 8007a64:	e00b      	b.n	8007a7e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6c:	1c59      	adds	r1, r3, #1
 8007a6e:	6379      	str	r1, [r7, #52]	; 0x34
 8007a70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a74:	b2d2      	uxtb	r2, r2
 8007a76:	701a      	strb	r2, [r3, #0]
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	09db      	lsrs	r3, r3, #7
 8007a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	2b7f      	cmp	r3, #127	; 0x7f
 8007a82:	d8f0      	bhi.n	8007a66 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	637a      	str	r2, [r7, #52]	; 0x34
 8007a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8c:	b2d2      	uxtb	r2, r2
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a9c:	e00b      	b.n	8007ab6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	1c59      	adds	r1, r3, #1
 8007aa6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007aa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007aac:	b2d2      	uxtb	r2, r2
 8007aae:	701a      	strb	r2, [r3, #0]
 8007ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab2:	09db      	lsrs	r3, r3, #7
 8007ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8007aba:	d8f0      	bhi.n	8007a9e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac4:	b2d2      	uxtb	r2, r2
 8007ac6:	701a      	strb	r2, [r3, #0]
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad2:	623b      	str	r3, [r7, #32]
 8007ad4:	e00b      	b.n	8007aee <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	1c59      	adds	r1, r3, #1
 8007ade:	6279      	str	r1, [r7, #36]	; 0x24
 8007ae0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ae4:	b2d2      	uxtb	r2, r2
 8007ae6:	701a      	strb	r2, [r3, #0]
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	09db      	lsrs	r3, r3, #7
 8007aec:	623b      	str	r3, [r7, #32]
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	2b7f      	cmp	r3, #127	; 0x7f
 8007af2:	d8f0      	bhi.n	8007ad6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	627a      	str	r2, [r7, #36]	; 0x24
 8007afa:	6a3a      	ldr	r2, [r7, #32]
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	701a      	strb	r2, [r3, #0]
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	6979      	ldr	r1, [r7, #20]
 8007b08:	69b8      	ldr	r0, [r7, #24]
 8007b0a:	f7ff f977 	bl	8006dfc <_SendPacket>
  RECORD_END();
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	f383 8811 	msr	BASEPRI, r3
}
 8007b14:	bf00      	nop
 8007b16:	3740      	adds	r7, #64	; 0x40
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	20014494 	.word	0x20014494

08007b20 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08c      	sub	sp, #48	; 0x30
 8007b24:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007b26:	4b59      	ldr	r3, [pc, #356]	; (8007c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8007b28:	2201      	movs	r2, #1
 8007b2a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8007b30:	f04f 0120 	mov.w	r1, #32
 8007b34:	f381 8811 	msr	BASEPRI, r1
 8007b38:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007b3a:	4b54      	ldr	r3, [pc, #336]	; (8007c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8007b3c:	785b      	ldrb	r3, [r3, #1]
 8007b3e:	220a      	movs	r2, #10
 8007b40:	4953      	ldr	r1, [pc, #332]	; (8007c90 <SEGGER_SYSVIEW_Start+0x170>)
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7f8 fb6c 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8007b4e:	f7fe fbf5 	bl	800633c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007b52:	200a      	movs	r0, #10
 8007b54:	f7ff fe28 	bl	80077a8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007b58:	f3ef 8311 	mrs	r3, BASEPRI
 8007b5c:	f04f 0120 	mov.w	r1, #32
 8007b60:	f381 8811 	msr	BASEPRI, r1
 8007b64:	60bb      	str	r3, [r7, #8]
 8007b66:	484b      	ldr	r0, [pc, #300]	; (8007c94 <SEGGER_SYSVIEW_Start+0x174>)
 8007b68:	f7ff f855 	bl	8006c16 <_PreparePacket>
 8007b6c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b76:	4b45      	ldr	r3, [pc, #276]	; (8007c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b7c:	e00b      	b.n	8007b96 <SEGGER_SYSVIEW_Start+0x76>
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b84:	1c59      	adds	r1, r3, #1
 8007b86:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007b88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b8c:	b2d2      	uxtb	r2, r2
 8007b8e:	701a      	strb	r2, [r3, #0]
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	09db      	lsrs	r3, r3, #7
 8007b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	2b7f      	cmp	r3, #127	; 0x7f
 8007b9a:	d8f0      	bhi.n	8007b7e <SEGGER_SYSVIEW_Start+0x5e>
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	1c5a      	adds	r2, r3, #1
 8007ba0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba4:	b2d2      	uxtb	r2, r2
 8007ba6:	701a      	strb	r2, [r3, #0]
 8007ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007baa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb0:	4b36      	ldr	r3, [pc, #216]	; (8007c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	623b      	str	r3, [r7, #32]
 8007bb6:	e00b      	b.n	8007bd0 <SEGGER_SYSVIEW_Start+0xb0>
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	1c59      	adds	r1, r3, #1
 8007bc0:	6279      	str	r1, [r7, #36]	; 0x24
 8007bc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	701a      	strb	r2, [r3, #0]
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	09db      	lsrs	r3, r3, #7
 8007bce:	623b      	str	r3, [r7, #32]
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8007bd4:	d8f0      	bhi.n	8007bb8 <SEGGER_SYSVIEW_Start+0x98>
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	627a      	str	r2, [r7, #36]	; 0x24
 8007bdc:	6a3a      	ldr	r2, [r7, #32]
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	61fb      	str	r3, [r7, #28]
 8007bea:	4b28      	ldr	r3, [pc, #160]	; (8007c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	61bb      	str	r3, [r7, #24]
 8007bf0:	e00b      	b.n	8007c0a <SEGGER_SYSVIEW_Start+0xea>
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	1c59      	adds	r1, r3, #1
 8007bfa:	61f9      	str	r1, [r7, #28]
 8007bfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c00:	b2d2      	uxtb	r2, r2
 8007c02:	701a      	strb	r2, [r3, #0]
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	09db      	lsrs	r3, r3, #7
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8007c0e:	d8f0      	bhi.n	8007bf2 <SEGGER_SYSVIEW_Start+0xd2>
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	61fa      	str	r2, [r7, #28]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	b2d2      	uxtb	r2, r2
 8007c1a:	701a      	strb	r2, [r3, #0]
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	2300      	movs	r3, #0
 8007c26:	613b      	str	r3, [r7, #16]
 8007c28:	e00b      	b.n	8007c42 <SEGGER_SYSVIEW_Start+0x122>
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	1c59      	adds	r1, r3, #1
 8007c32:	6179      	str	r1, [r7, #20]
 8007c34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c38:	b2d2      	uxtb	r2, r2
 8007c3a:	701a      	strb	r2, [r3, #0]
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	09db      	lsrs	r3, r3, #7
 8007c40:	613b      	str	r3, [r7, #16]
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	2b7f      	cmp	r3, #127	; 0x7f
 8007c46:	d8f0      	bhi.n	8007c2a <SEGGER_SYSVIEW_Start+0x10a>
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	617a      	str	r2, [r7, #20]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	b2d2      	uxtb	r2, r2
 8007c52:	701a      	strb	r2, [r3, #0]
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007c58:	2218      	movs	r2, #24
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff f8cd 	bl	8006dfc <_SendPacket>
      RECORD_END();
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007c68:	4b08      	ldr	r3, [pc, #32]	; (8007c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007c70:	4b06      	ldr	r3, [pc, #24]	; (8007c8c <SEGGER_SYSVIEW_Start+0x16c>)
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007c76:	f000 f9eb 	bl	8008050 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007c7a:	f000 f9b1 	bl	8007fe0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007c7e:	f000 fc83 	bl	8008588 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007c82:	bf00      	nop
 8007c84:	3730      	adds	r7, #48	; 0x30
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20014464 	.word	0x20014464
 8007c90:	0800923c 	.word	0x0800923c
 8007c94:	20014494 	.word	0x20014494

08007c98 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007c9e:	f3ef 8311 	mrs	r3, BASEPRI
 8007ca2:	f04f 0120 	mov.w	r1, #32
 8007ca6:	f381 8811 	msr	BASEPRI, r1
 8007caa:	607b      	str	r3, [r7, #4]
 8007cac:	480b      	ldr	r0, [pc, #44]	; (8007cdc <SEGGER_SYSVIEW_Stop+0x44>)
 8007cae:	f7fe ffb2 	bl	8006c16 <_PreparePacket>
 8007cb2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007cb4:	4b0a      	ldr	r3, [pc, #40]	; (8007ce0 <SEGGER_SYSVIEW_Stop+0x48>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d007      	beq.n	8007ccc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007cbc:	220b      	movs	r2, #11
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6838      	ldr	r0, [r7, #0]
 8007cc2:	f7ff f89b 	bl	8006dfc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007cc6:	4b06      	ldr	r3, [pc, #24]	; (8007ce0 <SEGGER_SYSVIEW_Stop+0x48>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f383 8811 	msr	BASEPRI, r3
}
 8007cd2:	bf00      	nop
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20014494 	.word	0x20014494
 8007ce0:	20014464 	.word	0x20014464

08007ce4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b08c      	sub	sp, #48	; 0x30
 8007ce8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007cea:	f3ef 8311 	mrs	r3, BASEPRI
 8007cee:	f04f 0120 	mov.w	r1, #32
 8007cf2:	f381 8811 	msr	BASEPRI, r1
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	4845      	ldr	r0, [pc, #276]	; (8007e10 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007cfa:	f7fe ff8c 	bl	8006c16 <_PreparePacket>
 8007cfe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d08:	4b42      	ldr	r3, [pc, #264]	; (8007e14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d0e:	e00b      	b.n	8007d28 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d16:	1c59      	adds	r1, r3, #1
 8007d18:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007d1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	09db      	lsrs	r3, r3, #7
 8007d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d2c:	d8f0      	bhi.n	8007d10 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	701a      	strb	r2, [r3, #0]
 8007d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24
 8007d42:	4b34      	ldr	r3, [pc, #208]	; (8007e14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	623b      	str	r3, [r7, #32]
 8007d48:	e00b      	b.n	8007d62 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	1c59      	adds	r1, r3, #1
 8007d52:	6279      	str	r1, [r7, #36]	; 0x24
 8007d54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d58:	b2d2      	uxtb	r2, r2
 8007d5a:	701a      	strb	r2, [r3, #0]
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	09db      	lsrs	r3, r3, #7
 8007d60:	623b      	str	r3, [r7, #32]
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	2b7f      	cmp	r3, #127	; 0x7f
 8007d66:	d8f0      	bhi.n	8007d4a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	627a      	str	r2, [r7, #36]	; 0x24
 8007d6e:	6a3a      	ldr	r2, [r7, #32]
 8007d70:	b2d2      	uxtb	r2, r2
 8007d72:	701a      	strb	r2, [r3, #0]
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	61fb      	str	r3, [r7, #28]
 8007d7c:	4b25      	ldr	r3, [pc, #148]	; (8007e14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	61bb      	str	r3, [r7, #24]
 8007d82:	e00b      	b.n	8007d9c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	1c59      	adds	r1, r3, #1
 8007d8c:	61f9      	str	r1, [r7, #28]
 8007d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	09db      	lsrs	r3, r3, #7
 8007d9a:	61bb      	str	r3, [r7, #24]
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8007da0:	d8f0      	bhi.n	8007d84 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	61fa      	str	r2, [r7, #28]
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	617b      	str	r3, [r7, #20]
 8007db6:	2300      	movs	r3, #0
 8007db8:	613b      	str	r3, [r7, #16]
 8007dba:	e00b      	b.n	8007dd4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	1c59      	adds	r1, r3, #1
 8007dc4:	6179      	str	r1, [r7, #20]
 8007dc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	701a      	strb	r2, [r3, #0]
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	09db      	lsrs	r3, r3, #7
 8007dd2:	613b      	str	r3, [r7, #16]
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8007dd8:	d8f0      	bhi.n	8007dbc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	1c5a      	adds	r2, r3, #1
 8007dde:	617a      	str	r2, [r7, #20]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007dea:	2218      	movs	r2, #24
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	68b8      	ldr	r0, [r7, #8]
 8007df0:	f7ff f804 	bl	8006dfc <_SendPacket>
  RECORD_END();
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007dfa:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007e02:	4b04      	ldr	r3, [pc, #16]	; (8007e14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	4798      	blx	r3
  }
}
 8007e08:	bf00      	nop
 8007e0a:	3730      	adds	r7, #48	; 0x30
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20014494 	.word	0x20014494
 8007e14:	20014464 	.word	0x20014464

08007e18 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b092      	sub	sp, #72	; 0x48
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007e20:	f3ef 8311 	mrs	r3, BASEPRI
 8007e24:	f04f 0120 	mov.w	r1, #32
 8007e28:	f381 8811 	msr	BASEPRI, r1
 8007e2c:	617b      	str	r3, [r7, #20]
 8007e2e:	486a      	ldr	r0, [pc, #424]	; (8007fd8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007e30:	f7fe fef1 	bl	8006c16 <_PreparePacket>
 8007e34:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	4b66      	ldr	r3, [pc, #408]	; (8007fdc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	643b      	str	r3, [r7, #64]	; 0x40
 8007e4a:	e00b      	b.n	8007e64 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e52:	1c59      	adds	r1, r3, #1
 8007e54:	6479      	str	r1, [r7, #68]	; 0x44
 8007e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e5a:	b2d2      	uxtb	r2, r2
 8007e5c:	701a      	strb	r2, [r3, #0]
 8007e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e60:	09db      	lsrs	r3, r3, #7
 8007e62:	643b      	str	r3, [r7, #64]	; 0x40
 8007e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e66:	2b7f      	cmp	r3, #127	; 0x7f
 8007e68:	d8f0      	bhi.n	8007e4c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	647a      	str	r2, [r7, #68]	; 0x44
 8007e70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e72:	b2d2      	uxtb	r2, r2
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e84:	e00b      	b.n	8007e9e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8c:	1c59      	adds	r1, r3, #1
 8007e8e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007e90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	701a      	strb	r2, [r3, #0]
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	09db      	lsrs	r3, r3, #7
 8007e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ea2:	d8f0      	bhi.n	8007e86 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eac:	b2d2      	uxtb	r2, r2
 8007eae:	701a      	strb	r2, [r3, #0]
 8007eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	4619      	mov	r1, r3
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f7fe fe5d 	bl	8006b7c <_EncodeStr>
 8007ec2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007ec4:	2209      	movs	r2, #9
 8007ec6:	68f9      	ldr	r1, [r7, #12]
 8007ec8:	6938      	ldr	r0, [r7, #16]
 8007eca:	f7fe ff97 	bl	8006dfc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4b40      	ldr	r3, [pc, #256]	; (8007fdc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8007ee2:	e00b      	b.n	8007efc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eea:	1c59      	adds	r1, r3, #1
 8007eec:	6379      	str	r1, [r7, #52]	; 0x34
 8007eee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ef2:	b2d2      	uxtb	r2, r2
 8007ef4:	701a      	strb	r2, [r3, #0]
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	09db      	lsrs	r3, r3, #7
 8007efa:	633b      	str	r3, [r7, #48]	; 0x30
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	2b7f      	cmp	r3, #127	; 0x7f
 8007f00:	d8f0      	bhi.n	8007ee4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f04:	1c5a      	adds	r2, r3, #1
 8007f06:	637a      	str	r2, [r7, #52]	; 0x34
 8007f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f0a:	b2d2      	uxtb	r2, r2
 8007f0c:	701a      	strb	r2, [r3, #0]
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f1c:	e00b      	b.n	8007f36 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f24:	1c59      	adds	r1, r3, #1
 8007f26:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f2c:	b2d2      	uxtb	r2, r2
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	09db      	lsrs	r3, r3, #7
 8007f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f38:	2b7f      	cmp	r3, #127	; 0x7f
 8007f3a:	d8f0      	bhi.n	8007f1e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f44:	b2d2      	uxtb	r2, r2
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	623b      	str	r3, [r7, #32]
 8007f56:	e00b      	b.n	8007f70 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	1c59      	adds	r1, r3, #1
 8007f60:	6279      	str	r1, [r7, #36]	; 0x24
 8007f62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f66:	b2d2      	uxtb	r2, r2
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	09db      	lsrs	r3, r3, #7
 8007f6e:	623b      	str	r3, [r7, #32]
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	2b7f      	cmp	r3, #127	; 0x7f
 8007f74:	d8f0      	bhi.n	8007f58 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	627a      	str	r2, [r7, #36]	; 0x24
 8007f7c:	6a3a      	ldr	r2, [r7, #32]
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	701a      	strb	r2, [r3, #0]
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61bb      	str	r3, [r7, #24]
 8007f8e:	e00b      	b.n	8007fa8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	1c59      	adds	r1, r3, #1
 8007f98:	61f9      	str	r1, [r7, #28]
 8007f9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f9e:	b2d2      	uxtb	r2, r2
 8007fa0:	701a      	strb	r2, [r3, #0]
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	09db      	lsrs	r3, r3, #7
 8007fa6:	61bb      	str	r3, [r7, #24]
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	2b7f      	cmp	r3, #127	; 0x7f
 8007fac:	d8f0      	bhi.n	8007f90 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	61fa      	str	r2, [r7, #28]
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007fbe:	2215      	movs	r2, #21
 8007fc0:	68f9      	ldr	r1, [r7, #12]
 8007fc2:	6938      	ldr	r0, [r7, #16]
 8007fc4:	f7fe ff1a 	bl	8006dfc <_SendPacket>
  RECORD_END();
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f383 8811 	msr	BASEPRI, r3
}
 8007fce:	bf00      	nop
 8007fd0:	3748      	adds	r7, #72	; 0x48
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20014494 	.word	0x20014494
 8007fdc:	20014464 	.word	0x20014464

08007fe0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007fe4:	4b07      	ldr	r3, [pc, #28]	; (8008004 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d008      	beq.n	8007ffe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007fec:	4b05      	ldr	r3, [pc, #20]	; (8008004 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007ff6:	4b03      	ldr	r3, [pc, #12]	; (8008004 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	4798      	blx	r3
  }
}
 8007ffe:	bf00      	nop
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20014464 	.word	0x20014464

08008008 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008010:	f3ef 8311 	mrs	r3, BASEPRI
 8008014:	f04f 0120 	mov.w	r1, #32
 8008018:	f381 8811 	msr	BASEPRI, r1
 800801c:	617b      	str	r3, [r7, #20]
 800801e:	480b      	ldr	r0, [pc, #44]	; (800804c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008020:	f7fe fdf9 	bl	8006c16 <_PreparePacket>
 8008024:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008026:	2280      	movs	r2, #128	; 0x80
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	6938      	ldr	r0, [r7, #16]
 800802c:	f7fe fda6 	bl	8006b7c <_EncodeStr>
 8008030:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008032:	220e      	movs	r2, #14
 8008034:	68f9      	ldr	r1, [r7, #12]
 8008036:	6938      	ldr	r0, [r7, #16]
 8008038:	f7fe fee0 	bl	8006dfc <_SendPacket>
  RECORD_END();
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f383 8811 	msr	BASEPRI, r3
}
 8008042:	bf00      	nop
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20014494 	.word	0x20014494

08008050 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008050:	b590      	push	{r4, r7, lr}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008056:	4b15      	ldr	r3, [pc, #84]	; (80080ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d01a      	beq.n	8008094 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800805e:	4b13      	ldr	r3, [pc, #76]	; (80080ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d015      	beq.n	8008094 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008068:	4b10      	ldr	r3, [pc, #64]	; (80080ac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4798      	blx	r3
 8008070:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008074:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	f04f 0300 	mov.w	r3, #0
 8008082:	000a      	movs	r2, r1
 8008084:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008086:	4613      	mov	r3, r2
 8008088:	461a      	mov	r2, r3
 800808a:	4621      	mov	r1, r4
 800808c:	200d      	movs	r0, #13
 800808e:	f7ff fbe5 	bl	800785c <SEGGER_SYSVIEW_RecordU32x2>
 8008092:	e006      	b.n	80080a2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008094:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4619      	mov	r1, r3
 800809a:	200c      	movs	r0, #12
 800809c:	f7ff fba2 	bl	80077e4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80080a0:	bf00      	nop
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd90      	pop	{r4, r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20014464 	.word	0x20014464
 80080b0:	e0001004 	.word	0xe0001004

080080b4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80080ba:	f3ef 8311 	mrs	r3, BASEPRI
 80080be:	f04f 0120 	mov.w	r1, #32
 80080c2:	f381 8811 	msr	BASEPRI, r1
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	4819      	ldr	r0, [pc, #100]	; (8008130 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80080ca:	f7fe fda4 	bl	8006c16 <_PreparePacket>
 80080ce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80080d4:	4b17      	ldr	r3, [pc, #92]	; (8008134 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080dc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	617b      	str	r3, [r7, #20]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	613b      	str	r3, [r7, #16]
 80080e6:	e00b      	b.n	8008100 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	1c59      	adds	r1, r3, #1
 80080f0:	6179      	str	r1, [r7, #20]
 80080f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080f6:	b2d2      	uxtb	r2, r2
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	09db      	lsrs	r3, r3, #7
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	2b7f      	cmp	r3, #127	; 0x7f
 8008104:	d8f0      	bhi.n	80080e8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	617a      	str	r2, [r7, #20]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8008116:	2202      	movs	r2, #2
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	68b8      	ldr	r0, [r7, #8]
 800811c:	f7fe fe6e 	bl	8006dfc <_SendPacket>
  RECORD_END();
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f383 8811 	msr	BASEPRI, r3
}
 8008126:	bf00      	nop
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20014494 	.word	0x20014494
 8008134:	e000ed04 	.word	0xe000ed04

08008138 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800813e:	f3ef 8311 	mrs	r3, BASEPRI
 8008142:	f04f 0120 	mov.w	r1, #32
 8008146:	f381 8811 	msr	BASEPRI, r1
 800814a:	607b      	str	r3, [r7, #4]
 800814c:	4807      	ldr	r0, [pc, #28]	; (800816c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800814e:	f7fe fd62 	bl	8006c16 <_PreparePacket>
 8008152:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008154:	2203      	movs	r2, #3
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6838      	ldr	r0, [r7, #0]
 800815a:	f7fe fe4f 	bl	8006dfc <_SendPacket>
  RECORD_END();
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f383 8811 	msr	BASEPRI, r3
}
 8008164:	bf00      	nop
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	20014494 	.word	0x20014494

08008170 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008176:	f3ef 8311 	mrs	r3, BASEPRI
 800817a:	f04f 0120 	mov.w	r1, #32
 800817e:	f381 8811 	msr	BASEPRI, r1
 8008182:	607b      	str	r3, [r7, #4]
 8008184:	4807      	ldr	r0, [pc, #28]	; (80081a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8008186:	f7fe fd46 	bl	8006c16 <_PreparePacket>
 800818a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800818c:	2212      	movs	r2, #18
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6838      	ldr	r0, [r7, #0]
 8008192:	f7fe fe33 	bl	8006dfc <_SendPacket>
  RECORD_END();
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f383 8811 	msr	BASEPRI, r3
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20014494 	.word	0x20014494

080081a8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80081ae:	f3ef 8311 	mrs	r3, BASEPRI
 80081b2:	f04f 0120 	mov.w	r1, #32
 80081b6:	f381 8811 	msr	BASEPRI, r1
 80081ba:	607b      	str	r3, [r7, #4]
 80081bc:	4807      	ldr	r0, [pc, #28]	; (80081dc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80081be:	f7fe fd2a 	bl	8006c16 <_PreparePacket>
 80081c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80081c4:	2211      	movs	r2, #17
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6838      	ldr	r0, [r7, #0]
 80081ca:	f7fe fe17 	bl	8006dfc <_SendPacket>
  RECORD_END();
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f383 8811 	msr	BASEPRI, r3
}
 80081d4:	bf00      	nop
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	20014494 	.word	0x20014494

080081e0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80081e8:	f3ef 8311 	mrs	r3, BASEPRI
 80081ec:	f04f 0120 	mov.w	r1, #32
 80081f0:	f381 8811 	msr	BASEPRI, r1
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	4819      	ldr	r0, [pc, #100]	; (800825c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80081f8:	f7fe fd0d 	bl	8006c16 <_PreparePacket>
 80081fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008202:	4b17      	ldr	r3, [pc, #92]	; (8008260 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	61fb      	str	r3, [r7, #28]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	61bb      	str	r3, [r7, #24]
 8008214:	e00b      	b.n	800822e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	b2da      	uxtb	r2, r3
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	1c59      	adds	r1, r3, #1
 800821e:	61f9      	str	r1, [r7, #28]
 8008220:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008224:	b2d2      	uxtb	r2, r2
 8008226:	701a      	strb	r2, [r3, #0]
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	09db      	lsrs	r3, r3, #7
 800822c:	61bb      	str	r3, [r7, #24]
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2b7f      	cmp	r3, #127	; 0x7f
 8008232:	d8f0      	bhi.n	8008216 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	1c5a      	adds	r2, r3, #1
 8008238:	61fa      	str	r2, [r7, #28]
 800823a:	69ba      	ldr	r2, [r7, #24]
 800823c:	b2d2      	uxtb	r2, r2
 800823e:	701a      	strb	r2, [r3, #0]
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008244:	2208      	movs	r2, #8
 8008246:	68f9      	ldr	r1, [r7, #12]
 8008248:	6938      	ldr	r0, [r7, #16]
 800824a:	f7fe fdd7 	bl	8006dfc <_SendPacket>
  RECORD_END();
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f383 8811 	msr	BASEPRI, r3
}
 8008254:	bf00      	nop
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	20014494 	.word	0x20014494
 8008260:	20014464 	.word	0x20014464

08008264 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800826c:	f3ef 8311 	mrs	r3, BASEPRI
 8008270:	f04f 0120 	mov.w	r1, #32
 8008274:	f381 8811 	msr	BASEPRI, r1
 8008278:	617b      	str	r3, [r7, #20]
 800827a:	4819      	ldr	r0, [pc, #100]	; (80082e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800827c:	f7fe fccb 	bl	8006c16 <_PreparePacket>
 8008280:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008286:	4b17      	ldr	r3, [pc, #92]	; (80082e4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	61fb      	str	r3, [r7, #28]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	61bb      	str	r3, [r7, #24]
 8008298:	e00b      	b.n	80082b2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	b2da      	uxtb	r2, r3
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	1c59      	adds	r1, r3, #1
 80082a2:	61f9      	str	r1, [r7, #28]
 80082a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	09db      	lsrs	r3, r3, #7
 80082b0:	61bb      	str	r3, [r7, #24]
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b7f      	cmp	r3, #127	; 0x7f
 80082b6:	d8f0      	bhi.n	800829a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	61fa      	str	r2, [r7, #28]
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80082c8:	2204      	movs	r2, #4
 80082ca:	68f9      	ldr	r1, [r7, #12]
 80082cc:	6938      	ldr	r0, [r7, #16]
 80082ce:	f7fe fd95 	bl	8006dfc <_SendPacket>
  RECORD_END();
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f383 8811 	msr	BASEPRI, r3
}
 80082d8:	bf00      	nop
 80082da:	3720      	adds	r7, #32
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20014494 	.word	0x20014494
 80082e4:	20014464 	.word	0x20014464

080082e8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b088      	sub	sp, #32
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80082f0:	f3ef 8311 	mrs	r3, BASEPRI
 80082f4:	f04f 0120 	mov.w	r1, #32
 80082f8:	f381 8811 	msr	BASEPRI, r1
 80082fc:	617b      	str	r3, [r7, #20]
 80082fe:	4819      	ldr	r0, [pc, #100]	; (8008364 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008300:	f7fe fc89 	bl	8006c16 <_PreparePacket>
 8008304:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800830a:	4b17      	ldr	r3, [pc, #92]	; (8008368 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	61fb      	str	r3, [r7, #28]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	61bb      	str	r3, [r7, #24]
 800831c:	e00b      	b.n	8008336 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	b2da      	uxtb	r2, r3
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	1c59      	adds	r1, r3, #1
 8008326:	61f9      	str	r1, [r7, #28]
 8008328:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	701a      	strb	r2, [r3, #0]
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	09db      	lsrs	r3, r3, #7
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b7f      	cmp	r3, #127	; 0x7f
 800833a:	d8f0      	bhi.n	800831e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	61fa      	str	r2, [r7, #28]
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	b2d2      	uxtb	r2, r2
 8008346:	701a      	strb	r2, [r3, #0]
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800834c:	2206      	movs	r2, #6
 800834e:	68f9      	ldr	r1, [r7, #12]
 8008350:	6938      	ldr	r0, [r7, #16]
 8008352:	f7fe fd53 	bl	8006dfc <_SendPacket>
  RECORD_END();
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f383 8811 	msr	BASEPRI, r3
}
 800835c:	bf00      	nop
 800835e:	3720      	adds	r7, #32
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	20014494 	.word	0x20014494
 8008368:	20014464 	.word	0x20014464

0800836c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800836c:	b580      	push	{r7, lr}
 800836e:	b08a      	sub	sp, #40	; 0x28
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008376:	f3ef 8311 	mrs	r3, BASEPRI
 800837a:	f04f 0120 	mov.w	r1, #32
 800837e:	f381 8811 	msr	BASEPRI, r1
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	4827      	ldr	r0, [pc, #156]	; (8008424 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8008386:	f7fe fc46 	bl	8006c16 <_PreparePacket>
 800838a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008390:	4b25      	ldr	r3, [pc, #148]	; (8008428 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	623b      	str	r3, [r7, #32]
 80083a2:	e00b      	b.n	80083bc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	1c59      	adds	r1, r3, #1
 80083ac:	6279      	str	r1, [r7, #36]	; 0x24
 80083ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083b2:	b2d2      	uxtb	r2, r2
 80083b4:	701a      	strb	r2, [r3, #0]
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	09db      	lsrs	r3, r3, #7
 80083ba:	623b      	str	r3, [r7, #32]
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	2b7f      	cmp	r3, #127	; 0x7f
 80083c0:	d8f0      	bhi.n	80083a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	627a      	str	r2, [r7, #36]	; 0x24
 80083c8:	6a3a      	ldr	r2, [r7, #32]
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	61fb      	str	r3, [r7, #28]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	61bb      	str	r3, [r7, #24]
 80083da:	e00b      	b.n	80083f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	1c59      	adds	r1, r3, #1
 80083e4:	61f9      	str	r1, [r7, #28]
 80083e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	09db      	lsrs	r3, r3, #7
 80083f2:	61bb      	str	r3, [r7, #24]
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	2b7f      	cmp	r3, #127	; 0x7f
 80083f8:	d8f0      	bhi.n	80083dc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	61fa      	str	r2, [r7, #28]
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800840a:	2207      	movs	r2, #7
 800840c:	68f9      	ldr	r1, [r7, #12]
 800840e:	6938      	ldr	r0, [r7, #16]
 8008410:	f7fe fcf4 	bl	8006dfc <_SendPacket>
  RECORD_END();
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f383 8811 	msr	BASEPRI, r3
}
 800841a:	bf00      	nop
 800841c:	3728      	adds	r7, #40	; 0x28
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	20014494 	.word	0x20014494
 8008428:	20014464 	.word	0x20014464

0800842c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008434:	4b04      	ldr	r3, [pc, #16]	; (8008448 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	1ad3      	subs	r3, r2, r3
}
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	20014464 	.word	0x20014464

0800844c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800844c:	b580      	push	{r7, lr}
 800844e:	b08c      	sub	sp, #48	; 0x30
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008456:	4b3b      	ldr	r3, [pc, #236]	; (8008544 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d06d      	beq.n	800853a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800845e:	4b39      	ldr	r3, [pc, #228]	; (8008544 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008464:	2300      	movs	r3, #0
 8008466:	62bb      	str	r3, [r7, #40]	; 0x28
 8008468:	e008      	b.n	800847c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	2b00      	cmp	r3, #0
 8008474:	d007      	beq.n	8008486 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	3301      	adds	r3, #1
 800847a:	62bb      	str	r3, [r7, #40]	; 0x28
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008480:	429a      	cmp	r2, r3
 8008482:	d3f2      	bcc.n	800846a <SEGGER_SYSVIEW_SendModule+0x1e>
 8008484:	e000      	b.n	8008488 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008486:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d055      	beq.n	800853a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800848e:	f3ef 8311 	mrs	r3, BASEPRI
 8008492:	f04f 0120 	mov.w	r1, #32
 8008496:	f381 8811 	msr	BASEPRI, r1
 800849a:	617b      	str	r3, [r7, #20]
 800849c:	482a      	ldr	r0, [pc, #168]	; (8008548 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800849e:	f7fe fbba 	bl	8006c16 <_PreparePacket>
 80084a2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	623b      	str	r3, [r7, #32]
 80084b0:	e00b      	b.n	80084ca <SEGGER_SYSVIEW_SendModule+0x7e>
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	1c59      	adds	r1, r3, #1
 80084ba:	6279      	str	r1, [r7, #36]	; 0x24
 80084bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084c0:	b2d2      	uxtb	r2, r2
 80084c2:	701a      	strb	r2, [r3, #0]
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	09db      	lsrs	r3, r3, #7
 80084c8:	623b      	str	r3, [r7, #32]
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	2b7f      	cmp	r3, #127	; 0x7f
 80084ce:	d8f0      	bhi.n	80084b2 <SEGGER_SYSVIEW_SendModule+0x66>
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	1c5a      	adds	r2, r3, #1
 80084d4:	627a      	str	r2, [r7, #36]	; 0x24
 80084d6:	6a3a      	ldr	r2, [r7, #32]
 80084d8:	b2d2      	uxtb	r2, r2
 80084da:	701a      	strb	r2, [r3, #0]
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	61fb      	str	r3, [r7, #28]
 80084e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	61bb      	str	r3, [r7, #24]
 80084ea:	e00b      	b.n	8008504 <SEGGER_SYSVIEW_SendModule+0xb8>
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	1c59      	adds	r1, r3, #1
 80084f4:	61f9      	str	r1, [r7, #28]
 80084f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084fa:	b2d2      	uxtb	r2, r2
 80084fc:	701a      	strb	r2, [r3, #0]
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	09db      	lsrs	r3, r3, #7
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	2b7f      	cmp	r3, #127	; 0x7f
 8008508:	d8f0      	bhi.n	80084ec <SEGGER_SYSVIEW_SendModule+0xa0>
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	1c5a      	adds	r2, r3, #1
 800850e:	61fa      	str	r2, [r7, #28]
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	b2d2      	uxtb	r2, r2
 8008514:	701a      	strb	r2, [r3, #0]
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2280      	movs	r2, #128	; 0x80
 8008520:	4619      	mov	r1, r3
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7fe fb2a 	bl	8006b7c <_EncodeStr>
 8008528:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800852a:	2216      	movs	r2, #22
 800852c:	68f9      	ldr	r1, [r7, #12]
 800852e:	6938      	ldr	r0, [r7, #16]
 8008530:	f7fe fc64 	bl	8006dfc <_SendPacket>
      RECORD_END();
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800853a:	bf00      	nop
 800853c:	3730      	adds	r7, #48	; 0x30
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	2001448c 	.word	0x2001448c
 8008548:	20014494 	.word	0x20014494

0800854c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008552:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00f      	beq.n	800857a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800855a:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1f2      	bne.n	8008560 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800857a:	bf00      	nop
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	2001448c 	.word	0x2001448c

08008588 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800858e:	f3ef 8311 	mrs	r3, BASEPRI
 8008592:	f04f 0120 	mov.w	r1, #32
 8008596:	f381 8811 	msr	BASEPRI, r1
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	4817      	ldr	r0, [pc, #92]	; (80085fc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800859e:	f7fe fb3a 	bl	8006c16 <_PreparePacket>
 80085a2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	617b      	str	r3, [r7, #20]
 80085ac:	4b14      	ldr	r3, [pc, #80]	; (8008600 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	613b      	str	r3, [r7, #16]
 80085b2:	e00b      	b.n	80085cc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	1c59      	adds	r1, r3, #1
 80085bc:	6179      	str	r1, [r7, #20]
 80085be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085c2:	b2d2      	uxtb	r2, r2
 80085c4:	701a      	strb	r2, [r3, #0]
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	09db      	lsrs	r3, r3, #7
 80085ca:	613b      	str	r3, [r7, #16]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	2b7f      	cmp	r3, #127	; 0x7f
 80085d0:	d8f0      	bhi.n	80085b4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	1c5a      	adds	r2, r3, #1
 80085d6:	617a      	str	r2, [r7, #20]
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	b2d2      	uxtb	r2, r2
 80085dc:	701a      	strb	r2, [r3, #0]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80085e2:	221b      	movs	r2, #27
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	68b8      	ldr	r0, [r7, #8]
 80085e8:	f7fe fc08 	bl	8006dfc <_SendPacket>
  RECORD_END();
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f383 8811 	msr	BASEPRI, r3
}
 80085f2:	bf00      	nop
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20014494 	.word	0x20014494
 8008600:	20014490 	.word	0x20014490

08008604 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8008604:	b40f      	push	{r0, r1, r2, r3}
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800860c:	f107 0314 	add.w	r3, r7, #20
 8008610:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8008612:	1d3b      	adds	r3, r7, #4
 8008614:	461a      	mov	r2, r3
 8008616:	2100      	movs	r1, #0
 8008618:	6938      	ldr	r0, [r7, #16]
 800861a:	f7fe fe79 	bl	8007310 <_VPrintTarget>
  va_end(ParamList);
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008628:	b004      	add	sp, #16
 800862a:	4770      	bx	lr

0800862c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800862c:	b580      	push	{r7, lr}
 800862e:	b08a      	sub	sp, #40	; 0x28
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008634:	f3ef 8311 	mrs	r3, BASEPRI
 8008638:	f04f 0120 	mov.w	r1, #32
 800863c:	f381 8811 	msr	BASEPRI, r1
 8008640:	617b      	str	r3, [r7, #20]
 8008642:	4827      	ldr	r0, [pc, #156]	; (80086e0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8008644:	f7fe fae7 	bl	8006c16 <_PreparePacket>
 8008648:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800864a:	2280      	movs	r2, #128	; 0x80
 800864c:	6879      	ldr	r1, [r7, #4]
 800864e:	6938      	ldr	r0, [r7, #16]
 8008650:	f7fe fa94 	bl	8006b7c <_EncodeStr>
 8008654:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
 800865a:	2301      	movs	r3, #1
 800865c:	623b      	str	r3, [r7, #32]
 800865e:	e00b      	b.n	8008678 <SEGGER_SYSVIEW_Warn+0x4c>
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	b2da      	uxtb	r2, r3
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	1c59      	adds	r1, r3, #1
 8008668:	6279      	str	r1, [r7, #36]	; 0x24
 800866a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800866e:	b2d2      	uxtb	r2, r2
 8008670:	701a      	strb	r2, [r3, #0]
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	09db      	lsrs	r3, r3, #7
 8008676:	623b      	str	r3, [r7, #32]
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	2b7f      	cmp	r3, #127	; 0x7f
 800867c:	d8f0      	bhi.n	8008660 <SEGGER_SYSVIEW_Warn+0x34>
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	627a      	str	r2, [r7, #36]	; 0x24
 8008684:	6a3a      	ldr	r2, [r7, #32]
 8008686:	b2d2      	uxtb	r2, r2
 8008688:	701a      	strb	r2, [r3, #0]
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	61fb      	str	r3, [r7, #28]
 8008692:	2300      	movs	r3, #0
 8008694:	61bb      	str	r3, [r7, #24]
 8008696:	e00b      	b.n	80086b0 <SEGGER_SYSVIEW_Warn+0x84>
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	b2da      	uxtb	r2, r3
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	1c59      	adds	r1, r3, #1
 80086a0:	61f9      	str	r1, [r7, #28]
 80086a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086a6:	b2d2      	uxtb	r2, r2
 80086a8:	701a      	strb	r2, [r3, #0]
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	09db      	lsrs	r3, r3, #7
 80086ae:	61bb      	str	r3, [r7, #24]
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	2b7f      	cmp	r3, #127	; 0x7f
 80086b4:	d8f0      	bhi.n	8008698 <SEGGER_SYSVIEW_Warn+0x6c>
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	61fa      	str	r2, [r7, #28]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	b2d2      	uxtb	r2, r2
 80086c0:	701a      	strb	r2, [r3, #0]
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80086c6:	221a      	movs	r2, #26
 80086c8:	68f9      	ldr	r1, [r7, #12]
 80086ca:	6938      	ldr	r0, [r7, #16]
 80086cc:	f7fe fb96 	bl	8006dfc <_SendPacket>
  RECORD_END();
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f383 8811 	msr	BASEPRI, r3
}
 80086d6:	bf00      	nop
 80086d8:	3728      	adds	r7, #40	; 0x28
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20014494 	.word	0x20014494

080086e4 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80086e8:	4b13      	ldr	r3, [pc, #76]	; (8008738 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80086ea:	7e1b      	ldrb	r3, [r3, #24]
 80086ec:	4619      	mov	r1, r3
 80086ee:	4a13      	ldr	r2, [pc, #76]	; (800873c <SEGGER_SYSVIEW_IsStarted+0x58>)
 80086f0:	460b      	mov	r3, r1
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	440b      	add	r3, r1
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	4413      	add	r3, r2
 80086fa:	336c      	adds	r3, #108	; 0x6c
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	4b0e      	ldr	r3, [pc, #56]	; (8008738 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8008700:	7e1b      	ldrb	r3, [r3, #24]
 8008702:	4618      	mov	r0, r3
 8008704:	490d      	ldr	r1, [pc, #52]	; (800873c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8008706:	4603      	mov	r3, r0
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4403      	add	r3, r0
 800870c:	00db      	lsls	r3, r3, #3
 800870e:	440b      	add	r3, r1
 8008710:	3370      	adds	r3, #112	; 0x70
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	429a      	cmp	r2, r3
 8008716:	d00b      	beq.n	8008730 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8008718:	4b07      	ldr	r3, [pc, #28]	; (8008738 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800871a:	789b      	ldrb	r3, [r3, #2]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d107      	bne.n	8008730 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008720:	4b05      	ldr	r3, [pc, #20]	; (8008738 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8008722:	2201      	movs	r2, #1
 8008724:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008726:	f7fe fa83 	bl	8006c30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800872a:	4b03      	ldr	r3, [pc, #12]	; (8008738 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800872c:	2200      	movs	r2, #0
 800872e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8008730:	4b01      	ldr	r3, [pc, #4]	; (8008738 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8008732:	781b      	ldrb	r3, [r3, #0]
}
 8008734:	4618      	mov	r0, r3
 8008736:	bd80      	pop	{r7, pc}
 8008738:	20014464 	.word	0x20014464
 800873c:	20012fa4 	.word	0x20012fa4

08008740 <__libc_init_array>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	4d0d      	ldr	r5, [pc, #52]	; (8008778 <__libc_init_array+0x38>)
 8008744:	4c0d      	ldr	r4, [pc, #52]	; (800877c <__libc_init_array+0x3c>)
 8008746:	1b64      	subs	r4, r4, r5
 8008748:	10a4      	asrs	r4, r4, #2
 800874a:	2600      	movs	r6, #0
 800874c:	42a6      	cmp	r6, r4
 800874e:	d109      	bne.n	8008764 <__libc_init_array+0x24>
 8008750:	4d0b      	ldr	r5, [pc, #44]	; (8008780 <__libc_init_array+0x40>)
 8008752:	4c0c      	ldr	r4, [pc, #48]	; (8008784 <__libc_init_array+0x44>)
 8008754:	f000 fcc0 	bl	80090d8 <_init>
 8008758:	1b64      	subs	r4, r4, r5
 800875a:	10a4      	asrs	r4, r4, #2
 800875c:	2600      	movs	r6, #0
 800875e:	42a6      	cmp	r6, r4
 8008760:	d105      	bne.n	800876e <__libc_init_array+0x2e>
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	f855 3b04 	ldr.w	r3, [r5], #4
 8008768:	4798      	blx	r3
 800876a:	3601      	adds	r6, #1
 800876c:	e7ee      	b.n	800874c <__libc_init_array+0xc>
 800876e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008772:	4798      	blx	r3
 8008774:	3601      	adds	r6, #1
 8008776:	e7f2      	b.n	800875e <__libc_init_array+0x1e>
 8008778:	0800928c 	.word	0x0800928c
 800877c:	0800928c 	.word	0x0800928c
 8008780:	0800928c 	.word	0x0800928c
 8008784:	08009290 	.word	0x08009290

08008788 <memcmp>:
 8008788:	b510      	push	{r4, lr}
 800878a:	3901      	subs	r1, #1
 800878c:	4402      	add	r2, r0
 800878e:	4290      	cmp	r0, r2
 8008790:	d101      	bne.n	8008796 <memcmp+0xe>
 8008792:	2000      	movs	r0, #0
 8008794:	e005      	b.n	80087a2 <memcmp+0x1a>
 8008796:	7803      	ldrb	r3, [r0, #0]
 8008798:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800879c:	42a3      	cmp	r3, r4
 800879e:	d001      	beq.n	80087a4 <memcmp+0x1c>
 80087a0:	1b18      	subs	r0, r3, r4
 80087a2:	bd10      	pop	{r4, pc}
 80087a4:	3001      	adds	r0, #1
 80087a6:	e7f2      	b.n	800878e <memcmp+0x6>

080087a8 <memcpy>:
 80087a8:	440a      	add	r2, r1
 80087aa:	4291      	cmp	r1, r2
 80087ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80087b0:	d100      	bne.n	80087b4 <memcpy+0xc>
 80087b2:	4770      	bx	lr
 80087b4:	b510      	push	{r4, lr}
 80087b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087be:	4291      	cmp	r1, r2
 80087c0:	d1f9      	bne.n	80087b6 <memcpy+0xe>
 80087c2:	bd10      	pop	{r4, pc}

080087c4 <memset>:
 80087c4:	4402      	add	r2, r0
 80087c6:	4603      	mov	r3, r0
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d100      	bne.n	80087ce <memset+0xa>
 80087cc:	4770      	bx	lr
 80087ce:	f803 1b01 	strb.w	r1, [r3], #1
 80087d2:	e7f9      	b.n	80087c8 <memset+0x4>

080087d4 <sniprintf>:
 80087d4:	b40c      	push	{r2, r3}
 80087d6:	b530      	push	{r4, r5, lr}
 80087d8:	4b17      	ldr	r3, [pc, #92]	; (8008838 <sniprintf+0x64>)
 80087da:	1e0c      	subs	r4, r1, #0
 80087dc:	681d      	ldr	r5, [r3, #0]
 80087de:	b09d      	sub	sp, #116	; 0x74
 80087e0:	da08      	bge.n	80087f4 <sniprintf+0x20>
 80087e2:	238b      	movs	r3, #139	; 0x8b
 80087e4:	602b      	str	r3, [r5, #0]
 80087e6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ea:	b01d      	add	sp, #116	; 0x74
 80087ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087f0:	b002      	add	sp, #8
 80087f2:	4770      	bx	lr
 80087f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80087f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80087fc:	bf14      	ite	ne
 80087fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008802:	4623      	moveq	r3, r4
 8008804:	9304      	str	r3, [sp, #16]
 8008806:	9307      	str	r3, [sp, #28]
 8008808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800880c:	9002      	str	r0, [sp, #8]
 800880e:	9006      	str	r0, [sp, #24]
 8008810:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008814:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008816:	ab21      	add	r3, sp, #132	; 0x84
 8008818:	a902      	add	r1, sp, #8
 800881a:	4628      	mov	r0, r5
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	f000 f869 	bl	80088f4 <_svfiprintf_r>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	bfbc      	itt	lt
 8008826:	238b      	movlt	r3, #139	; 0x8b
 8008828:	602b      	strlt	r3, [r5, #0]
 800882a:	2c00      	cmp	r4, #0
 800882c:	d0dd      	beq.n	80087ea <sniprintf+0x16>
 800882e:	9b02      	ldr	r3, [sp, #8]
 8008830:	2200      	movs	r2, #0
 8008832:	701a      	strb	r2, [r3, #0]
 8008834:	e7d9      	b.n	80087ea <sniprintf+0x16>
 8008836:	bf00      	nop
 8008838:	2000001c 	.word	0x2000001c

0800883c <__ssputs_r>:
 800883c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008840:	688e      	ldr	r6, [r1, #8]
 8008842:	429e      	cmp	r6, r3
 8008844:	4682      	mov	sl, r0
 8008846:	460c      	mov	r4, r1
 8008848:	4690      	mov	r8, r2
 800884a:	461f      	mov	r7, r3
 800884c:	d838      	bhi.n	80088c0 <__ssputs_r+0x84>
 800884e:	898a      	ldrh	r2, [r1, #12]
 8008850:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008854:	d032      	beq.n	80088bc <__ssputs_r+0x80>
 8008856:	6825      	ldr	r5, [r4, #0]
 8008858:	6909      	ldr	r1, [r1, #16]
 800885a:	eba5 0901 	sub.w	r9, r5, r1
 800885e:	6965      	ldr	r5, [r4, #20]
 8008860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008868:	3301      	adds	r3, #1
 800886a:	444b      	add	r3, r9
 800886c:	106d      	asrs	r5, r5, #1
 800886e:	429d      	cmp	r5, r3
 8008870:	bf38      	it	cc
 8008872:	461d      	movcc	r5, r3
 8008874:	0553      	lsls	r3, r2, #21
 8008876:	d531      	bpl.n	80088dc <__ssputs_r+0xa0>
 8008878:	4629      	mov	r1, r5
 800887a:	f000 fb55 	bl	8008f28 <_malloc_r>
 800887e:	4606      	mov	r6, r0
 8008880:	b950      	cbnz	r0, 8008898 <__ssputs_r+0x5c>
 8008882:	230c      	movs	r3, #12
 8008884:	f8ca 3000 	str.w	r3, [sl]
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888e:	81a3      	strh	r3, [r4, #12]
 8008890:	f04f 30ff 	mov.w	r0, #4294967295
 8008894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008898:	6921      	ldr	r1, [r4, #16]
 800889a:	464a      	mov	r2, r9
 800889c:	f7ff ff84 	bl	80087a8 <memcpy>
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088aa:	81a3      	strh	r3, [r4, #12]
 80088ac:	6126      	str	r6, [r4, #16]
 80088ae:	6165      	str	r5, [r4, #20]
 80088b0:	444e      	add	r6, r9
 80088b2:	eba5 0509 	sub.w	r5, r5, r9
 80088b6:	6026      	str	r6, [r4, #0]
 80088b8:	60a5      	str	r5, [r4, #8]
 80088ba:	463e      	mov	r6, r7
 80088bc:	42be      	cmp	r6, r7
 80088be:	d900      	bls.n	80088c2 <__ssputs_r+0x86>
 80088c0:	463e      	mov	r6, r7
 80088c2:	6820      	ldr	r0, [r4, #0]
 80088c4:	4632      	mov	r2, r6
 80088c6:	4641      	mov	r1, r8
 80088c8:	f000 faa8 	bl	8008e1c <memmove>
 80088cc:	68a3      	ldr	r3, [r4, #8]
 80088ce:	1b9b      	subs	r3, r3, r6
 80088d0:	60a3      	str	r3, [r4, #8]
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	4433      	add	r3, r6
 80088d6:	6023      	str	r3, [r4, #0]
 80088d8:	2000      	movs	r0, #0
 80088da:	e7db      	b.n	8008894 <__ssputs_r+0x58>
 80088dc:	462a      	mov	r2, r5
 80088de:	f000 fb97 	bl	8009010 <_realloc_r>
 80088e2:	4606      	mov	r6, r0
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d1e1      	bne.n	80088ac <__ssputs_r+0x70>
 80088e8:	6921      	ldr	r1, [r4, #16]
 80088ea:	4650      	mov	r0, sl
 80088ec:	f000 fab0 	bl	8008e50 <_free_r>
 80088f0:	e7c7      	b.n	8008882 <__ssputs_r+0x46>
	...

080088f4 <_svfiprintf_r>:
 80088f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f8:	4698      	mov	r8, r3
 80088fa:	898b      	ldrh	r3, [r1, #12]
 80088fc:	061b      	lsls	r3, r3, #24
 80088fe:	b09d      	sub	sp, #116	; 0x74
 8008900:	4607      	mov	r7, r0
 8008902:	460d      	mov	r5, r1
 8008904:	4614      	mov	r4, r2
 8008906:	d50e      	bpl.n	8008926 <_svfiprintf_r+0x32>
 8008908:	690b      	ldr	r3, [r1, #16]
 800890a:	b963      	cbnz	r3, 8008926 <_svfiprintf_r+0x32>
 800890c:	2140      	movs	r1, #64	; 0x40
 800890e:	f000 fb0b 	bl	8008f28 <_malloc_r>
 8008912:	6028      	str	r0, [r5, #0]
 8008914:	6128      	str	r0, [r5, #16]
 8008916:	b920      	cbnz	r0, 8008922 <_svfiprintf_r+0x2e>
 8008918:	230c      	movs	r3, #12
 800891a:	603b      	str	r3, [r7, #0]
 800891c:	f04f 30ff 	mov.w	r0, #4294967295
 8008920:	e0d1      	b.n	8008ac6 <_svfiprintf_r+0x1d2>
 8008922:	2340      	movs	r3, #64	; 0x40
 8008924:	616b      	str	r3, [r5, #20]
 8008926:	2300      	movs	r3, #0
 8008928:	9309      	str	r3, [sp, #36]	; 0x24
 800892a:	2320      	movs	r3, #32
 800892c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008930:	f8cd 800c 	str.w	r8, [sp, #12]
 8008934:	2330      	movs	r3, #48	; 0x30
 8008936:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ae0 <_svfiprintf_r+0x1ec>
 800893a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800893e:	f04f 0901 	mov.w	r9, #1
 8008942:	4623      	mov	r3, r4
 8008944:	469a      	mov	sl, r3
 8008946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800894a:	b10a      	cbz	r2, 8008950 <_svfiprintf_r+0x5c>
 800894c:	2a25      	cmp	r2, #37	; 0x25
 800894e:	d1f9      	bne.n	8008944 <_svfiprintf_r+0x50>
 8008950:	ebba 0b04 	subs.w	fp, sl, r4
 8008954:	d00b      	beq.n	800896e <_svfiprintf_r+0x7a>
 8008956:	465b      	mov	r3, fp
 8008958:	4622      	mov	r2, r4
 800895a:	4629      	mov	r1, r5
 800895c:	4638      	mov	r0, r7
 800895e:	f7ff ff6d 	bl	800883c <__ssputs_r>
 8008962:	3001      	adds	r0, #1
 8008964:	f000 80aa 	beq.w	8008abc <_svfiprintf_r+0x1c8>
 8008968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800896a:	445a      	add	r2, fp
 800896c:	9209      	str	r2, [sp, #36]	; 0x24
 800896e:	f89a 3000 	ldrb.w	r3, [sl]
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80a2 	beq.w	8008abc <_svfiprintf_r+0x1c8>
 8008978:	2300      	movs	r3, #0
 800897a:	f04f 32ff 	mov.w	r2, #4294967295
 800897e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008982:	f10a 0a01 	add.w	sl, sl, #1
 8008986:	9304      	str	r3, [sp, #16]
 8008988:	9307      	str	r3, [sp, #28]
 800898a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800898e:	931a      	str	r3, [sp, #104]	; 0x68
 8008990:	4654      	mov	r4, sl
 8008992:	2205      	movs	r2, #5
 8008994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008998:	4851      	ldr	r0, [pc, #324]	; (8008ae0 <_svfiprintf_r+0x1ec>)
 800899a:	f7f7 fc91 	bl	80002c0 <memchr>
 800899e:	9a04      	ldr	r2, [sp, #16]
 80089a0:	b9d8      	cbnz	r0, 80089da <_svfiprintf_r+0xe6>
 80089a2:	06d0      	lsls	r0, r2, #27
 80089a4:	bf44      	itt	mi
 80089a6:	2320      	movmi	r3, #32
 80089a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089ac:	0711      	lsls	r1, r2, #28
 80089ae:	bf44      	itt	mi
 80089b0:	232b      	movmi	r3, #43	; 0x2b
 80089b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089b6:	f89a 3000 	ldrb.w	r3, [sl]
 80089ba:	2b2a      	cmp	r3, #42	; 0x2a
 80089bc:	d015      	beq.n	80089ea <_svfiprintf_r+0xf6>
 80089be:	9a07      	ldr	r2, [sp, #28]
 80089c0:	4654      	mov	r4, sl
 80089c2:	2000      	movs	r0, #0
 80089c4:	f04f 0c0a 	mov.w	ip, #10
 80089c8:	4621      	mov	r1, r4
 80089ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ce:	3b30      	subs	r3, #48	; 0x30
 80089d0:	2b09      	cmp	r3, #9
 80089d2:	d94e      	bls.n	8008a72 <_svfiprintf_r+0x17e>
 80089d4:	b1b0      	cbz	r0, 8008a04 <_svfiprintf_r+0x110>
 80089d6:	9207      	str	r2, [sp, #28]
 80089d8:	e014      	b.n	8008a04 <_svfiprintf_r+0x110>
 80089da:	eba0 0308 	sub.w	r3, r0, r8
 80089de:	fa09 f303 	lsl.w	r3, r9, r3
 80089e2:	4313      	orrs	r3, r2
 80089e4:	9304      	str	r3, [sp, #16]
 80089e6:	46a2      	mov	sl, r4
 80089e8:	e7d2      	b.n	8008990 <_svfiprintf_r+0x9c>
 80089ea:	9b03      	ldr	r3, [sp, #12]
 80089ec:	1d19      	adds	r1, r3, #4
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	9103      	str	r1, [sp, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	bfbb      	ittet	lt
 80089f6:	425b      	neglt	r3, r3
 80089f8:	f042 0202 	orrlt.w	r2, r2, #2
 80089fc:	9307      	strge	r3, [sp, #28]
 80089fe:	9307      	strlt	r3, [sp, #28]
 8008a00:	bfb8      	it	lt
 8008a02:	9204      	strlt	r2, [sp, #16]
 8008a04:	7823      	ldrb	r3, [r4, #0]
 8008a06:	2b2e      	cmp	r3, #46	; 0x2e
 8008a08:	d10c      	bne.n	8008a24 <_svfiprintf_r+0x130>
 8008a0a:	7863      	ldrb	r3, [r4, #1]
 8008a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a0e:	d135      	bne.n	8008a7c <_svfiprintf_r+0x188>
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	1d1a      	adds	r2, r3, #4
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	9203      	str	r2, [sp, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bfb8      	it	lt
 8008a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a20:	3402      	adds	r4, #2
 8008a22:	9305      	str	r3, [sp, #20]
 8008a24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008af0 <_svfiprintf_r+0x1fc>
 8008a28:	7821      	ldrb	r1, [r4, #0]
 8008a2a:	2203      	movs	r2, #3
 8008a2c:	4650      	mov	r0, sl
 8008a2e:	f7f7 fc47 	bl	80002c0 <memchr>
 8008a32:	b140      	cbz	r0, 8008a46 <_svfiprintf_r+0x152>
 8008a34:	2340      	movs	r3, #64	; 0x40
 8008a36:	eba0 000a 	sub.w	r0, r0, sl
 8008a3a:	fa03 f000 	lsl.w	r0, r3, r0
 8008a3e:	9b04      	ldr	r3, [sp, #16]
 8008a40:	4303      	orrs	r3, r0
 8008a42:	3401      	adds	r4, #1
 8008a44:	9304      	str	r3, [sp, #16]
 8008a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4a:	4826      	ldr	r0, [pc, #152]	; (8008ae4 <_svfiprintf_r+0x1f0>)
 8008a4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a50:	2206      	movs	r2, #6
 8008a52:	f7f7 fc35 	bl	80002c0 <memchr>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d038      	beq.n	8008acc <_svfiprintf_r+0x1d8>
 8008a5a:	4b23      	ldr	r3, [pc, #140]	; (8008ae8 <_svfiprintf_r+0x1f4>)
 8008a5c:	bb1b      	cbnz	r3, 8008aa6 <_svfiprintf_r+0x1b2>
 8008a5e:	9b03      	ldr	r3, [sp, #12]
 8008a60:	3307      	adds	r3, #7
 8008a62:	f023 0307 	bic.w	r3, r3, #7
 8008a66:	3308      	adds	r3, #8
 8008a68:	9303      	str	r3, [sp, #12]
 8008a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a6c:	4433      	add	r3, r6
 8008a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a70:	e767      	b.n	8008942 <_svfiprintf_r+0x4e>
 8008a72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a76:	460c      	mov	r4, r1
 8008a78:	2001      	movs	r0, #1
 8008a7a:	e7a5      	b.n	80089c8 <_svfiprintf_r+0xd4>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	3401      	adds	r4, #1
 8008a80:	9305      	str	r3, [sp, #20]
 8008a82:	4619      	mov	r1, r3
 8008a84:	f04f 0c0a 	mov.w	ip, #10
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a8e:	3a30      	subs	r2, #48	; 0x30
 8008a90:	2a09      	cmp	r2, #9
 8008a92:	d903      	bls.n	8008a9c <_svfiprintf_r+0x1a8>
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d0c5      	beq.n	8008a24 <_svfiprintf_r+0x130>
 8008a98:	9105      	str	r1, [sp, #20]
 8008a9a:	e7c3      	b.n	8008a24 <_svfiprintf_r+0x130>
 8008a9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e7f0      	b.n	8008a88 <_svfiprintf_r+0x194>
 8008aa6:	ab03      	add	r3, sp, #12
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	462a      	mov	r2, r5
 8008aac:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <_svfiprintf_r+0x1f8>)
 8008aae:	a904      	add	r1, sp, #16
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f3af 8000 	nop.w
 8008ab6:	1c42      	adds	r2, r0, #1
 8008ab8:	4606      	mov	r6, r0
 8008aba:	d1d6      	bne.n	8008a6a <_svfiprintf_r+0x176>
 8008abc:	89ab      	ldrh	r3, [r5, #12]
 8008abe:	065b      	lsls	r3, r3, #25
 8008ac0:	f53f af2c 	bmi.w	800891c <_svfiprintf_r+0x28>
 8008ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ac6:	b01d      	add	sp, #116	; 0x74
 8008ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008acc:	ab03      	add	r3, sp, #12
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	462a      	mov	r2, r5
 8008ad2:	4b06      	ldr	r3, [pc, #24]	; (8008aec <_svfiprintf_r+0x1f8>)
 8008ad4:	a904      	add	r1, sp, #16
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	f000 f87a 	bl	8008bd0 <_printf_i>
 8008adc:	e7eb      	b.n	8008ab6 <_svfiprintf_r+0x1c2>
 8008ade:	bf00      	nop
 8008ae0:	08009258 	.word	0x08009258
 8008ae4:	08009262 	.word	0x08009262
 8008ae8:	00000000 	.word	0x00000000
 8008aec:	0800883d 	.word	0x0800883d
 8008af0:	0800925e 	.word	0x0800925e

08008af4 <_printf_common>:
 8008af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af8:	4616      	mov	r6, r2
 8008afa:	4699      	mov	r9, r3
 8008afc:	688a      	ldr	r2, [r1, #8]
 8008afe:	690b      	ldr	r3, [r1, #16]
 8008b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b04:	4293      	cmp	r3, r2
 8008b06:	bfb8      	it	lt
 8008b08:	4613      	movlt	r3, r2
 8008b0a:	6033      	str	r3, [r6, #0]
 8008b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b10:	4607      	mov	r7, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	b10a      	cbz	r2, 8008b1a <_printf_common+0x26>
 8008b16:	3301      	adds	r3, #1
 8008b18:	6033      	str	r3, [r6, #0]
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	0699      	lsls	r1, r3, #26
 8008b1e:	bf42      	ittt	mi
 8008b20:	6833      	ldrmi	r3, [r6, #0]
 8008b22:	3302      	addmi	r3, #2
 8008b24:	6033      	strmi	r3, [r6, #0]
 8008b26:	6825      	ldr	r5, [r4, #0]
 8008b28:	f015 0506 	ands.w	r5, r5, #6
 8008b2c:	d106      	bne.n	8008b3c <_printf_common+0x48>
 8008b2e:	f104 0a19 	add.w	sl, r4, #25
 8008b32:	68e3      	ldr	r3, [r4, #12]
 8008b34:	6832      	ldr	r2, [r6, #0]
 8008b36:	1a9b      	subs	r3, r3, r2
 8008b38:	42ab      	cmp	r3, r5
 8008b3a:	dc26      	bgt.n	8008b8a <_printf_common+0x96>
 8008b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b40:	1e13      	subs	r3, r2, #0
 8008b42:	6822      	ldr	r2, [r4, #0]
 8008b44:	bf18      	it	ne
 8008b46:	2301      	movne	r3, #1
 8008b48:	0692      	lsls	r2, r2, #26
 8008b4a:	d42b      	bmi.n	8008ba4 <_printf_common+0xb0>
 8008b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b50:	4649      	mov	r1, r9
 8008b52:	4638      	mov	r0, r7
 8008b54:	47c0      	blx	r8
 8008b56:	3001      	adds	r0, #1
 8008b58:	d01e      	beq.n	8008b98 <_printf_common+0xa4>
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	68e5      	ldr	r5, [r4, #12]
 8008b5e:	6832      	ldr	r2, [r6, #0]
 8008b60:	f003 0306 	and.w	r3, r3, #6
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	bf08      	it	eq
 8008b68:	1aad      	subeq	r5, r5, r2
 8008b6a:	68a3      	ldr	r3, [r4, #8]
 8008b6c:	6922      	ldr	r2, [r4, #16]
 8008b6e:	bf0c      	ite	eq
 8008b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b74:	2500      	movne	r5, #0
 8008b76:	4293      	cmp	r3, r2
 8008b78:	bfc4      	itt	gt
 8008b7a:	1a9b      	subgt	r3, r3, r2
 8008b7c:	18ed      	addgt	r5, r5, r3
 8008b7e:	2600      	movs	r6, #0
 8008b80:	341a      	adds	r4, #26
 8008b82:	42b5      	cmp	r5, r6
 8008b84:	d11a      	bne.n	8008bbc <_printf_common+0xc8>
 8008b86:	2000      	movs	r0, #0
 8008b88:	e008      	b.n	8008b9c <_printf_common+0xa8>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4652      	mov	r2, sl
 8008b8e:	4649      	mov	r1, r9
 8008b90:	4638      	mov	r0, r7
 8008b92:	47c0      	blx	r8
 8008b94:	3001      	adds	r0, #1
 8008b96:	d103      	bne.n	8008ba0 <_printf_common+0xac>
 8008b98:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba0:	3501      	adds	r5, #1
 8008ba2:	e7c6      	b.n	8008b32 <_printf_common+0x3e>
 8008ba4:	18e1      	adds	r1, r4, r3
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	2030      	movs	r0, #48	; 0x30
 8008baa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bae:	4422      	add	r2, r4
 8008bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bb8:	3302      	adds	r3, #2
 8008bba:	e7c7      	b.n	8008b4c <_printf_common+0x58>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	47c0      	blx	r8
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	d0e6      	beq.n	8008b98 <_printf_common+0xa4>
 8008bca:	3601      	adds	r6, #1
 8008bcc:	e7d9      	b.n	8008b82 <_printf_common+0x8e>
	...

08008bd0 <_printf_i>:
 8008bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd4:	7e0f      	ldrb	r7, [r1, #24]
 8008bd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bd8:	2f78      	cmp	r7, #120	; 0x78
 8008bda:	4691      	mov	r9, r2
 8008bdc:	4680      	mov	r8, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	469a      	mov	sl, r3
 8008be2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008be6:	d807      	bhi.n	8008bf8 <_printf_i+0x28>
 8008be8:	2f62      	cmp	r7, #98	; 0x62
 8008bea:	d80a      	bhi.n	8008c02 <_printf_i+0x32>
 8008bec:	2f00      	cmp	r7, #0
 8008bee:	f000 80d8 	beq.w	8008da2 <_printf_i+0x1d2>
 8008bf2:	2f58      	cmp	r7, #88	; 0x58
 8008bf4:	f000 80a3 	beq.w	8008d3e <_printf_i+0x16e>
 8008bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c00:	e03a      	b.n	8008c78 <_printf_i+0xa8>
 8008c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c06:	2b15      	cmp	r3, #21
 8008c08:	d8f6      	bhi.n	8008bf8 <_printf_i+0x28>
 8008c0a:	a101      	add	r1, pc, #4	; (adr r1, 8008c10 <_printf_i+0x40>)
 8008c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c10:	08008c69 	.word	0x08008c69
 8008c14:	08008c7d 	.word	0x08008c7d
 8008c18:	08008bf9 	.word	0x08008bf9
 8008c1c:	08008bf9 	.word	0x08008bf9
 8008c20:	08008bf9 	.word	0x08008bf9
 8008c24:	08008bf9 	.word	0x08008bf9
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008bf9 	.word	0x08008bf9
 8008c30:	08008bf9 	.word	0x08008bf9
 8008c34:	08008bf9 	.word	0x08008bf9
 8008c38:	08008bf9 	.word	0x08008bf9
 8008c3c:	08008d89 	.word	0x08008d89
 8008c40:	08008cad 	.word	0x08008cad
 8008c44:	08008d6b 	.word	0x08008d6b
 8008c48:	08008bf9 	.word	0x08008bf9
 8008c4c:	08008bf9 	.word	0x08008bf9
 8008c50:	08008dab 	.word	0x08008dab
 8008c54:	08008bf9 	.word	0x08008bf9
 8008c58:	08008cad 	.word	0x08008cad
 8008c5c:	08008bf9 	.word	0x08008bf9
 8008c60:	08008bf9 	.word	0x08008bf9
 8008c64:	08008d73 	.word	0x08008d73
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	1d1a      	adds	r2, r3, #4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	602a      	str	r2, [r5, #0]
 8008c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e0a3      	b.n	8008dc4 <_printf_i+0x1f4>
 8008c7c:	6820      	ldr	r0, [r4, #0]
 8008c7e:	6829      	ldr	r1, [r5, #0]
 8008c80:	0606      	lsls	r6, r0, #24
 8008c82:	f101 0304 	add.w	r3, r1, #4
 8008c86:	d50a      	bpl.n	8008c9e <_printf_i+0xce>
 8008c88:	680e      	ldr	r6, [r1, #0]
 8008c8a:	602b      	str	r3, [r5, #0]
 8008c8c:	2e00      	cmp	r6, #0
 8008c8e:	da03      	bge.n	8008c98 <_printf_i+0xc8>
 8008c90:	232d      	movs	r3, #45	; 0x2d
 8008c92:	4276      	negs	r6, r6
 8008c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c98:	485e      	ldr	r0, [pc, #376]	; (8008e14 <_printf_i+0x244>)
 8008c9a:	230a      	movs	r3, #10
 8008c9c:	e019      	b.n	8008cd2 <_printf_i+0x102>
 8008c9e:	680e      	ldr	r6, [r1, #0]
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ca6:	bf18      	it	ne
 8008ca8:	b236      	sxthne	r6, r6
 8008caa:	e7ef      	b.n	8008c8c <_printf_i+0xbc>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	6820      	ldr	r0, [r4, #0]
 8008cb0:	1d19      	adds	r1, r3, #4
 8008cb2:	6029      	str	r1, [r5, #0]
 8008cb4:	0601      	lsls	r1, r0, #24
 8008cb6:	d501      	bpl.n	8008cbc <_printf_i+0xec>
 8008cb8:	681e      	ldr	r6, [r3, #0]
 8008cba:	e002      	b.n	8008cc2 <_printf_i+0xf2>
 8008cbc:	0646      	lsls	r6, r0, #25
 8008cbe:	d5fb      	bpl.n	8008cb8 <_printf_i+0xe8>
 8008cc0:	881e      	ldrh	r6, [r3, #0]
 8008cc2:	4854      	ldr	r0, [pc, #336]	; (8008e14 <_printf_i+0x244>)
 8008cc4:	2f6f      	cmp	r7, #111	; 0x6f
 8008cc6:	bf0c      	ite	eq
 8008cc8:	2308      	moveq	r3, #8
 8008cca:	230a      	movne	r3, #10
 8008ccc:	2100      	movs	r1, #0
 8008cce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cd2:	6865      	ldr	r5, [r4, #4]
 8008cd4:	60a5      	str	r5, [r4, #8]
 8008cd6:	2d00      	cmp	r5, #0
 8008cd8:	bfa2      	ittt	ge
 8008cda:	6821      	ldrge	r1, [r4, #0]
 8008cdc:	f021 0104 	bicge.w	r1, r1, #4
 8008ce0:	6021      	strge	r1, [r4, #0]
 8008ce2:	b90e      	cbnz	r6, 8008ce8 <_printf_i+0x118>
 8008ce4:	2d00      	cmp	r5, #0
 8008ce6:	d04d      	beq.n	8008d84 <_printf_i+0x1b4>
 8008ce8:	4615      	mov	r5, r2
 8008cea:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cee:	fb03 6711 	mls	r7, r3, r1, r6
 8008cf2:	5dc7      	ldrb	r7, [r0, r7]
 8008cf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cf8:	4637      	mov	r7, r6
 8008cfa:	42bb      	cmp	r3, r7
 8008cfc:	460e      	mov	r6, r1
 8008cfe:	d9f4      	bls.n	8008cea <_printf_i+0x11a>
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d10b      	bne.n	8008d1c <_printf_i+0x14c>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	07de      	lsls	r6, r3, #31
 8008d08:	d508      	bpl.n	8008d1c <_printf_i+0x14c>
 8008d0a:	6923      	ldr	r3, [r4, #16]
 8008d0c:	6861      	ldr	r1, [r4, #4]
 8008d0e:	4299      	cmp	r1, r3
 8008d10:	bfde      	ittt	le
 8008d12:	2330      	movle	r3, #48	; 0x30
 8008d14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d1c:	1b52      	subs	r2, r2, r5
 8008d1e:	6122      	str	r2, [r4, #16]
 8008d20:	f8cd a000 	str.w	sl, [sp]
 8008d24:	464b      	mov	r3, r9
 8008d26:	aa03      	add	r2, sp, #12
 8008d28:	4621      	mov	r1, r4
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	f7ff fee2 	bl	8008af4 <_printf_common>
 8008d30:	3001      	adds	r0, #1
 8008d32:	d14c      	bne.n	8008dce <_printf_i+0x1fe>
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295
 8008d38:	b004      	add	sp, #16
 8008d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d3e:	4835      	ldr	r0, [pc, #212]	; (8008e14 <_printf_i+0x244>)
 8008d40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d44:	6829      	ldr	r1, [r5, #0]
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d4c:	6029      	str	r1, [r5, #0]
 8008d4e:	061d      	lsls	r5, r3, #24
 8008d50:	d514      	bpl.n	8008d7c <_printf_i+0x1ac>
 8008d52:	07df      	lsls	r7, r3, #31
 8008d54:	bf44      	itt	mi
 8008d56:	f043 0320 	orrmi.w	r3, r3, #32
 8008d5a:	6023      	strmi	r3, [r4, #0]
 8008d5c:	b91e      	cbnz	r6, 8008d66 <_printf_i+0x196>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	f023 0320 	bic.w	r3, r3, #32
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	2310      	movs	r3, #16
 8008d68:	e7b0      	b.n	8008ccc <_printf_i+0xfc>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	f043 0320 	orr.w	r3, r3, #32
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	2378      	movs	r3, #120	; 0x78
 8008d74:	4828      	ldr	r0, [pc, #160]	; (8008e18 <_printf_i+0x248>)
 8008d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d7a:	e7e3      	b.n	8008d44 <_printf_i+0x174>
 8008d7c:	0659      	lsls	r1, r3, #25
 8008d7e:	bf48      	it	mi
 8008d80:	b2b6      	uxthmi	r6, r6
 8008d82:	e7e6      	b.n	8008d52 <_printf_i+0x182>
 8008d84:	4615      	mov	r5, r2
 8008d86:	e7bb      	b.n	8008d00 <_printf_i+0x130>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	6826      	ldr	r6, [r4, #0]
 8008d8c:	6961      	ldr	r1, [r4, #20]
 8008d8e:	1d18      	adds	r0, r3, #4
 8008d90:	6028      	str	r0, [r5, #0]
 8008d92:	0635      	lsls	r5, r6, #24
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	d501      	bpl.n	8008d9c <_printf_i+0x1cc>
 8008d98:	6019      	str	r1, [r3, #0]
 8008d9a:	e002      	b.n	8008da2 <_printf_i+0x1d2>
 8008d9c:	0670      	lsls	r0, r6, #25
 8008d9e:	d5fb      	bpl.n	8008d98 <_printf_i+0x1c8>
 8008da0:	8019      	strh	r1, [r3, #0]
 8008da2:	2300      	movs	r3, #0
 8008da4:	6123      	str	r3, [r4, #16]
 8008da6:	4615      	mov	r5, r2
 8008da8:	e7ba      	b.n	8008d20 <_printf_i+0x150>
 8008daa:	682b      	ldr	r3, [r5, #0]
 8008dac:	1d1a      	adds	r2, r3, #4
 8008dae:	602a      	str	r2, [r5, #0]
 8008db0:	681d      	ldr	r5, [r3, #0]
 8008db2:	6862      	ldr	r2, [r4, #4]
 8008db4:	2100      	movs	r1, #0
 8008db6:	4628      	mov	r0, r5
 8008db8:	f7f7 fa82 	bl	80002c0 <memchr>
 8008dbc:	b108      	cbz	r0, 8008dc2 <_printf_i+0x1f2>
 8008dbe:	1b40      	subs	r0, r0, r5
 8008dc0:	6060      	str	r0, [r4, #4]
 8008dc2:	6863      	ldr	r3, [r4, #4]
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dcc:	e7a8      	b.n	8008d20 <_printf_i+0x150>
 8008dce:	6923      	ldr	r3, [r4, #16]
 8008dd0:	462a      	mov	r2, r5
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	47d0      	blx	sl
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d0ab      	beq.n	8008d34 <_printf_i+0x164>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	079b      	lsls	r3, r3, #30
 8008de0:	d413      	bmi.n	8008e0a <_printf_i+0x23a>
 8008de2:	68e0      	ldr	r0, [r4, #12]
 8008de4:	9b03      	ldr	r3, [sp, #12]
 8008de6:	4298      	cmp	r0, r3
 8008de8:	bfb8      	it	lt
 8008dea:	4618      	movlt	r0, r3
 8008dec:	e7a4      	b.n	8008d38 <_printf_i+0x168>
 8008dee:	2301      	movs	r3, #1
 8008df0:	4632      	mov	r2, r6
 8008df2:	4649      	mov	r1, r9
 8008df4:	4640      	mov	r0, r8
 8008df6:	47d0      	blx	sl
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d09b      	beq.n	8008d34 <_printf_i+0x164>
 8008dfc:	3501      	adds	r5, #1
 8008dfe:	68e3      	ldr	r3, [r4, #12]
 8008e00:	9903      	ldr	r1, [sp, #12]
 8008e02:	1a5b      	subs	r3, r3, r1
 8008e04:	42ab      	cmp	r3, r5
 8008e06:	dcf2      	bgt.n	8008dee <_printf_i+0x21e>
 8008e08:	e7eb      	b.n	8008de2 <_printf_i+0x212>
 8008e0a:	2500      	movs	r5, #0
 8008e0c:	f104 0619 	add.w	r6, r4, #25
 8008e10:	e7f5      	b.n	8008dfe <_printf_i+0x22e>
 8008e12:	bf00      	nop
 8008e14:	08009269 	.word	0x08009269
 8008e18:	0800927a 	.word	0x0800927a

08008e1c <memmove>:
 8008e1c:	4288      	cmp	r0, r1
 8008e1e:	b510      	push	{r4, lr}
 8008e20:	eb01 0402 	add.w	r4, r1, r2
 8008e24:	d902      	bls.n	8008e2c <memmove+0x10>
 8008e26:	4284      	cmp	r4, r0
 8008e28:	4623      	mov	r3, r4
 8008e2a:	d807      	bhi.n	8008e3c <memmove+0x20>
 8008e2c:	1e43      	subs	r3, r0, #1
 8008e2e:	42a1      	cmp	r1, r4
 8008e30:	d008      	beq.n	8008e44 <memmove+0x28>
 8008e32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e3a:	e7f8      	b.n	8008e2e <memmove+0x12>
 8008e3c:	4402      	add	r2, r0
 8008e3e:	4601      	mov	r1, r0
 8008e40:	428a      	cmp	r2, r1
 8008e42:	d100      	bne.n	8008e46 <memmove+0x2a>
 8008e44:	bd10      	pop	{r4, pc}
 8008e46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e4e:	e7f7      	b.n	8008e40 <memmove+0x24>

08008e50 <_free_r>:
 8008e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e52:	2900      	cmp	r1, #0
 8008e54:	d044      	beq.n	8008ee0 <_free_r+0x90>
 8008e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e5a:	9001      	str	r0, [sp, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8008e62:	bfb8      	it	lt
 8008e64:	18e4      	addlt	r4, r4, r3
 8008e66:	f000 f913 	bl	8009090 <__malloc_lock>
 8008e6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ee4 <_free_r+0x94>)
 8008e6c:	9801      	ldr	r0, [sp, #4]
 8008e6e:	6813      	ldr	r3, [r2, #0]
 8008e70:	b933      	cbnz	r3, 8008e80 <_free_r+0x30>
 8008e72:	6063      	str	r3, [r4, #4]
 8008e74:	6014      	str	r4, [r2, #0]
 8008e76:	b003      	add	sp, #12
 8008e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e7c:	f000 b90e 	b.w	800909c <__malloc_unlock>
 8008e80:	42a3      	cmp	r3, r4
 8008e82:	d908      	bls.n	8008e96 <_free_r+0x46>
 8008e84:	6825      	ldr	r5, [r4, #0]
 8008e86:	1961      	adds	r1, r4, r5
 8008e88:	428b      	cmp	r3, r1
 8008e8a:	bf01      	itttt	eq
 8008e8c:	6819      	ldreq	r1, [r3, #0]
 8008e8e:	685b      	ldreq	r3, [r3, #4]
 8008e90:	1949      	addeq	r1, r1, r5
 8008e92:	6021      	streq	r1, [r4, #0]
 8008e94:	e7ed      	b.n	8008e72 <_free_r+0x22>
 8008e96:	461a      	mov	r2, r3
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	b10b      	cbz	r3, 8008ea0 <_free_r+0x50>
 8008e9c:	42a3      	cmp	r3, r4
 8008e9e:	d9fa      	bls.n	8008e96 <_free_r+0x46>
 8008ea0:	6811      	ldr	r1, [r2, #0]
 8008ea2:	1855      	adds	r5, r2, r1
 8008ea4:	42a5      	cmp	r5, r4
 8008ea6:	d10b      	bne.n	8008ec0 <_free_r+0x70>
 8008ea8:	6824      	ldr	r4, [r4, #0]
 8008eaa:	4421      	add	r1, r4
 8008eac:	1854      	adds	r4, r2, r1
 8008eae:	42a3      	cmp	r3, r4
 8008eb0:	6011      	str	r1, [r2, #0]
 8008eb2:	d1e0      	bne.n	8008e76 <_free_r+0x26>
 8008eb4:	681c      	ldr	r4, [r3, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	6053      	str	r3, [r2, #4]
 8008eba:	4421      	add	r1, r4
 8008ebc:	6011      	str	r1, [r2, #0]
 8008ebe:	e7da      	b.n	8008e76 <_free_r+0x26>
 8008ec0:	d902      	bls.n	8008ec8 <_free_r+0x78>
 8008ec2:	230c      	movs	r3, #12
 8008ec4:	6003      	str	r3, [r0, #0]
 8008ec6:	e7d6      	b.n	8008e76 <_free_r+0x26>
 8008ec8:	6825      	ldr	r5, [r4, #0]
 8008eca:	1961      	adds	r1, r4, r5
 8008ecc:	428b      	cmp	r3, r1
 8008ece:	bf04      	itt	eq
 8008ed0:	6819      	ldreq	r1, [r3, #0]
 8008ed2:	685b      	ldreq	r3, [r3, #4]
 8008ed4:	6063      	str	r3, [r4, #4]
 8008ed6:	bf04      	itt	eq
 8008ed8:	1949      	addeq	r1, r1, r5
 8008eda:	6021      	streq	r1, [r4, #0]
 8008edc:	6054      	str	r4, [r2, #4]
 8008ede:	e7ca      	b.n	8008e76 <_free_r+0x26>
 8008ee0:	b003      	add	sp, #12
 8008ee2:	bd30      	pop	{r4, r5, pc}
 8008ee4:	20014578 	.word	0x20014578

08008ee8 <sbrk_aligned>:
 8008ee8:	b570      	push	{r4, r5, r6, lr}
 8008eea:	4e0e      	ldr	r6, [pc, #56]	; (8008f24 <sbrk_aligned+0x3c>)
 8008eec:	460c      	mov	r4, r1
 8008eee:	6831      	ldr	r1, [r6, #0]
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	b911      	cbnz	r1, 8008efa <sbrk_aligned+0x12>
 8008ef4:	f000 f8bc 	bl	8009070 <_sbrk_r>
 8008ef8:	6030      	str	r0, [r6, #0]
 8008efa:	4621      	mov	r1, r4
 8008efc:	4628      	mov	r0, r5
 8008efe:	f000 f8b7 	bl	8009070 <_sbrk_r>
 8008f02:	1c43      	adds	r3, r0, #1
 8008f04:	d00a      	beq.n	8008f1c <sbrk_aligned+0x34>
 8008f06:	1cc4      	adds	r4, r0, #3
 8008f08:	f024 0403 	bic.w	r4, r4, #3
 8008f0c:	42a0      	cmp	r0, r4
 8008f0e:	d007      	beq.n	8008f20 <sbrk_aligned+0x38>
 8008f10:	1a21      	subs	r1, r4, r0
 8008f12:	4628      	mov	r0, r5
 8008f14:	f000 f8ac 	bl	8009070 <_sbrk_r>
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d101      	bne.n	8008f20 <sbrk_aligned+0x38>
 8008f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8008f20:	4620      	mov	r0, r4
 8008f22:	bd70      	pop	{r4, r5, r6, pc}
 8008f24:	2001457c 	.word	0x2001457c

08008f28 <_malloc_r>:
 8008f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f2c:	1ccd      	adds	r5, r1, #3
 8008f2e:	f025 0503 	bic.w	r5, r5, #3
 8008f32:	3508      	adds	r5, #8
 8008f34:	2d0c      	cmp	r5, #12
 8008f36:	bf38      	it	cc
 8008f38:	250c      	movcc	r5, #12
 8008f3a:	2d00      	cmp	r5, #0
 8008f3c:	4607      	mov	r7, r0
 8008f3e:	db01      	blt.n	8008f44 <_malloc_r+0x1c>
 8008f40:	42a9      	cmp	r1, r5
 8008f42:	d905      	bls.n	8008f50 <_malloc_r+0x28>
 8008f44:	230c      	movs	r3, #12
 8008f46:	603b      	str	r3, [r7, #0]
 8008f48:	2600      	movs	r6, #0
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f50:	4e2e      	ldr	r6, [pc, #184]	; (800900c <_malloc_r+0xe4>)
 8008f52:	f000 f89d 	bl	8009090 <__malloc_lock>
 8008f56:	6833      	ldr	r3, [r6, #0]
 8008f58:	461c      	mov	r4, r3
 8008f5a:	bb34      	cbnz	r4, 8008faa <_malloc_r+0x82>
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	4638      	mov	r0, r7
 8008f60:	f7ff ffc2 	bl	8008ee8 <sbrk_aligned>
 8008f64:	1c43      	adds	r3, r0, #1
 8008f66:	4604      	mov	r4, r0
 8008f68:	d14d      	bne.n	8009006 <_malloc_r+0xde>
 8008f6a:	6834      	ldr	r4, [r6, #0]
 8008f6c:	4626      	mov	r6, r4
 8008f6e:	2e00      	cmp	r6, #0
 8008f70:	d140      	bne.n	8008ff4 <_malloc_r+0xcc>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	4631      	mov	r1, r6
 8008f76:	4638      	mov	r0, r7
 8008f78:	eb04 0803 	add.w	r8, r4, r3
 8008f7c:	f000 f878 	bl	8009070 <_sbrk_r>
 8008f80:	4580      	cmp	r8, r0
 8008f82:	d13a      	bne.n	8008ffa <_malloc_r+0xd2>
 8008f84:	6821      	ldr	r1, [r4, #0]
 8008f86:	3503      	adds	r5, #3
 8008f88:	1a6d      	subs	r5, r5, r1
 8008f8a:	f025 0503 	bic.w	r5, r5, #3
 8008f8e:	3508      	adds	r5, #8
 8008f90:	2d0c      	cmp	r5, #12
 8008f92:	bf38      	it	cc
 8008f94:	250c      	movcc	r5, #12
 8008f96:	4629      	mov	r1, r5
 8008f98:	4638      	mov	r0, r7
 8008f9a:	f7ff ffa5 	bl	8008ee8 <sbrk_aligned>
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	d02b      	beq.n	8008ffa <_malloc_r+0xd2>
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	442b      	add	r3, r5
 8008fa6:	6023      	str	r3, [r4, #0]
 8008fa8:	e00e      	b.n	8008fc8 <_malloc_r+0xa0>
 8008faa:	6822      	ldr	r2, [r4, #0]
 8008fac:	1b52      	subs	r2, r2, r5
 8008fae:	d41e      	bmi.n	8008fee <_malloc_r+0xc6>
 8008fb0:	2a0b      	cmp	r2, #11
 8008fb2:	d916      	bls.n	8008fe2 <_malloc_r+0xba>
 8008fb4:	1961      	adds	r1, r4, r5
 8008fb6:	42a3      	cmp	r3, r4
 8008fb8:	6025      	str	r5, [r4, #0]
 8008fba:	bf18      	it	ne
 8008fbc:	6059      	strne	r1, [r3, #4]
 8008fbe:	6863      	ldr	r3, [r4, #4]
 8008fc0:	bf08      	it	eq
 8008fc2:	6031      	streq	r1, [r6, #0]
 8008fc4:	5162      	str	r2, [r4, r5]
 8008fc6:	604b      	str	r3, [r1, #4]
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f104 060b 	add.w	r6, r4, #11
 8008fce:	f000 f865 	bl	800909c <__malloc_unlock>
 8008fd2:	f026 0607 	bic.w	r6, r6, #7
 8008fd6:	1d23      	adds	r3, r4, #4
 8008fd8:	1af2      	subs	r2, r6, r3
 8008fda:	d0b6      	beq.n	8008f4a <_malloc_r+0x22>
 8008fdc:	1b9b      	subs	r3, r3, r6
 8008fde:	50a3      	str	r3, [r4, r2]
 8008fe0:	e7b3      	b.n	8008f4a <_malloc_r+0x22>
 8008fe2:	6862      	ldr	r2, [r4, #4]
 8008fe4:	42a3      	cmp	r3, r4
 8008fe6:	bf0c      	ite	eq
 8008fe8:	6032      	streq	r2, [r6, #0]
 8008fea:	605a      	strne	r2, [r3, #4]
 8008fec:	e7ec      	b.n	8008fc8 <_malloc_r+0xa0>
 8008fee:	4623      	mov	r3, r4
 8008ff0:	6864      	ldr	r4, [r4, #4]
 8008ff2:	e7b2      	b.n	8008f5a <_malloc_r+0x32>
 8008ff4:	4634      	mov	r4, r6
 8008ff6:	6876      	ldr	r6, [r6, #4]
 8008ff8:	e7b9      	b.n	8008f6e <_malloc_r+0x46>
 8008ffa:	230c      	movs	r3, #12
 8008ffc:	603b      	str	r3, [r7, #0]
 8008ffe:	4638      	mov	r0, r7
 8009000:	f000 f84c 	bl	800909c <__malloc_unlock>
 8009004:	e7a1      	b.n	8008f4a <_malloc_r+0x22>
 8009006:	6025      	str	r5, [r4, #0]
 8009008:	e7de      	b.n	8008fc8 <_malloc_r+0xa0>
 800900a:	bf00      	nop
 800900c:	20014578 	.word	0x20014578

08009010 <_realloc_r>:
 8009010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009014:	4680      	mov	r8, r0
 8009016:	4614      	mov	r4, r2
 8009018:	460e      	mov	r6, r1
 800901a:	b921      	cbnz	r1, 8009026 <_realloc_r+0x16>
 800901c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009020:	4611      	mov	r1, r2
 8009022:	f7ff bf81 	b.w	8008f28 <_malloc_r>
 8009026:	b92a      	cbnz	r2, 8009034 <_realloc_r+0x24>
 8009028:	f7ff ff12 	bl	8008e50 <_free_r>
 800902c:	4625      	mov	r5, r4
 800902e:	4628      	mov	r0, r5
 8009030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009034:	f000 f838 	bl	80090a8 <_malloc_usable_size_r>
 8009038:	4284      	cmp	r4, r0
 800903a:	4607      	mov	r7, r0
 800903c:	d802      	bhi.n	8009044 <_realloc_r+0x34>
 800903e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009042:	d812      	bhi.n	800906a <_realloc_r+0x5a>
 8009044:	4621      	mov	r1, r4
 8009046:	4640      	mov	r0, r8
 8009048:	f7ff ff6e 	bl	8008f28 <_malloc_r>
 800904c:	4605      	mov	r5, r0
 800904e:	2800      	cmp	r0, #0
 8009050:	d0ed      	beq.n	800902e <_realloc_r+0x1e>
 8009052:	42bc      	cmp	r4, r7
 8009054:	4622      	mov	r2, r4
 8009056:	4631      	mov	r1, r6
 8009058:	bf28      	it	cs
 800905a:	463a      	movcs	r2, r7
 800905c:	f7ff fba4 	bl	80087a8 <memcpy>
 8009060:	4631      	mov	r1, r6
 8009062:	4640      	mov	r0, r8
 8009064:	f7ff fef4 	bl	8008e50 <_free_r>
 8009068:	e7e1      	b.n	800902e <_realloc_r+0x1e>
 800906a:	4635      	mov	r5, r6
 800906c:	e7df      	b.n	800902e <_realloc_r+0x1e>
	...

08009070 <_sbrk_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d06      	ldr	r5, [pc, #24]	; (800908c <_sbrk_r+0x1c>)
 8009074:	2300      	movs	r3, #0
 8009076:	4604      	mov	r4, r0
 8009078:	4608      	mov	r0, r1
 800907a:	602b      	str	r3, [r5, #0]
 800907c:	f000 f81e 	bl	80090bc <_sbrk>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <_sbrk_r+0x1a>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	b103      	cbz	r3, 800908a <_sbrk_r+0x1a>
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	20014580 	.word	0x20014580

08009090 <__malloc_lock>:
 8009090:	4801      	ldr	r0, [pc, #4]	; (8009098 <__malloc_lock+0x8>)
 8009092:	f000 b811 	b.w	80090b8 <__retarget_lock_acquire_recursive>
 8009096:	bf00      	nop
 8009098:	20014584 	.word	0x20014584

0800909c <__malloc_unlock>:
 800909c:	4801      	ldr	r0, [pc, #4]	; (80090a4 <__malloc_unlock+0x8>)
 800909e:	f000 b80c 	b.w	80090ba <__retarget_lock_release_recursive>
 80090a2:	bf00      	nop
 80090a4:	20014584 	.word	0x20014584

080090a8 <_malloc_usable_size_r>:
 80090a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ac:	1f18      	subs	r0, r3, #4
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bfbc      	itt	lt
 80090b2:	580b      	ldrlt	r3, [r1, r0]
 80090b4:	18c0      	addlt	r0, r0, r3
 80090b6:	4770      	bx	lr

080090b8 <__retarget_lock_acquire_recursive>:
 80090b8:	4770      	bx	lr

080090ba <__retarget_lock_release_recursive>:
 80090ba:	4770      	bx	lr

080090bc <_sbrk>:
 80090bc:	4a04      	ldr	r2, [pc, #16]	; (80090d0 <_sbrk+0x14>)
 80090be:	6811      	ldr	r1, [r2, #0]
 80090c0:	4603      	mov	r3, r0
 80090c2:	b909      	cbnz	r1, 80090c8 <_sbrk+0xc>
 80090c4:	4903      	ldr	r1, [pc, #12]	; (80090d4 <_sbrk+0x18>)
 80090c6:	6011      	str	r1, [r2, #0]
 80090c8:	6810      	ldr	r0, [r2, #0]
 80090ca:	4403      	add	r3, r0
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	4770      	bx	lr
 80090d0:	20014588 	.word	0x20014588
 80090d4:	20014590 	.word	0x20014590

080090d8 <_init>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	bf00      	nop
 80090dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090de:	bc08      	pop	{r3}
 80090e0:	469e      	mov	lr, r3
 80090e2:	4770      	bx	lr

080090e4 <_fini>:
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e6:	bf00      	nop
 80090e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ea:	bc08      	pop	{r3}
 80090ec:	469e      	mov	lr, r3
 80090ee:	4770      	bx	lr
